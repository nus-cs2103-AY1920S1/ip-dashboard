[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 15,
      "Sam-limyr": 2
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DeadlineTask(String description, String time) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.time + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                String instruction \u003d input.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                if (instruction.equals(\"bye\")) { // First, check if \u0027bye\u0027 is called"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"list\")) { // Then, check if \u0027list\u0027 is called"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    if (taskList.size() \u003d\u003d 0) { // if \u0027list\u0027 is called with no tasks currently stored"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new EmptyTaskListException(\"OOPS!!! You have no tasks currently stored in your list!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        System.out.println((i + 1) + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"done\")) { // Then, check if task is marked done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    if (taskList.size() \u003d\u003d 0) { // if \u0027list\u0027 is empty, \u0027done\u0027 cannot be called"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new EmptyTaskListException(\"OOPS!!! You have no tasks currently stored in your list!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        int index \u003d Integer.parseInt(input.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \" + taskList.get(index - 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    } catch (NumberFormatException error) { // if not a number is entered after \u0027done\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new NotAnIntegerTaskListException(\"OOPS!!! Please enter an integer after \u0027done\u0027!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    } catch (IndexOutOfBoundsException error) { // if an invalid number is entered after \u0027done\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new InvalidIntegerTaskListException(\"OOPS!!! Please enter a valid task number!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"delete\")) { // Then, check if task is marked delete"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    if (taskList.size() \u003d\u003d 0) { // if \u0027list\u0027 is empty, \u0027delete\u0027 cannot be called"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new EmptyTaskListException(\"OOPS!!! You have no tasks currently stored in your list!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        int index \u003d Integer.parseInt(input.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        Task currentTask \u003d taskList.remove(index - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve removed this task:\\n  \" + currentTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    } catch (NumberFormatException error) { // if not a number is entered after \u0027delete\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new NotAnIntegerTaskListException(\"OOPS!!! Please enter an integer after \u0027delete\u0027!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    } catch (IndexOutOfBoundsException error) { // if an invalid number is entered after \u0027delete\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new InvalidIntegerTaskListException(\"OOPS!!! Please enter a valid task number!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"todo\") || instruction.equals(\"deadline\") || instruction.equals(\"event\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        if (instruction.equals(\"todo\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            String taskContent \u003d input.split(\" \", 2)[1]; // Remaining content of task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            if (taskContent.matches(\"\\\\s*\")) { // if the task\u0027s description is only whitespace"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                throw new EmptyTaskDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            Task currentTask \u003d new ToDoTask((taskContent));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            taskList.add(currentTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + currentTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            String taskDescription \u003d input.split(\"deadline|event\", 2)[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            if (!(taskDescription.contains(\" /by \") || taskDescription.contains(\" /at \"))) { // if \u0027/by\u0027 and \u0027/at\u0027 are absent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                throw new IncorrectTaskTimeFormatException(\"OOPS!!! No \u0027 /by \u0027 or \u0027 /at \u0027 detected! Please use the correct format!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            String taskContent \u003d taskDescription.split(\"/by|/at\", 2)[0].strip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            String taskTime \u003d taskDescription.split(\"/by|/at\", 2)[1].strip(); // time must be parsed via \u0027/by\u0027 or \u0027/at\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            if (taskContent.matches(\"\\\\s*\")) { // if the task\u0027s description is only whitespace"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                throw new EmptyTaskDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            } else if (taskTime.matches(\"\\\\s*\")) { // if the task\u0027s time listed is only whitespace"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                throw new EmptyTaskTimeException(\"OOPS!!! Please include a time for your task!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            if (instruction.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                Task currentTask \u003d new DeadlineTask(taskContent, taskTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                taskList.add(currentTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + currentTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                Task currentTask \u003d new EventTask(taskContent, taskTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                taskList.add(currentTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + currentTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    } catch (IndexOutOfBoundsException error) { // if the task description is empty"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new EmptyTaskDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else { // if an invalid instruction is entered"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    throw new InvalidInstructionException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                System.out.println(error.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "Sam-limyr": 91
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/EmptyTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class EmptyTaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public EmptyTaskDescriptionException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/EmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class EmptyTaskListException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public EmptyTaskListException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/EmptyTaskTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class EmptyTaskTimeException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public EmptyTaskTimeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public EventTask(String description, String time) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.time + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/IncorrectTaskTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class IncorrectTaskTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public IncorrectTaskTimeFormatException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/InvalidInstructionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class InvalidInstructionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public InvalidInstructionException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/InvalidIntegerTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class InvalidIntegerTaskListException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public InvalidIntegerTaskListException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/NotAnIntegerTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NotAnIntegerTaskListException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NotAnIntegerTaskListException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 5
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return (isDone ? \"+\" : \"-\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 22
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ToDoTask(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 10
    }
  }
]
