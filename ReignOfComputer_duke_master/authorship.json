[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "// I miss Visual Studio"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "// I miss C#"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 26,
      "-": 13
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 duke.command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@rem Get duke.command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@rem Slurp the duke.command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "@rem Setup the duke.command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4,
      "-": 80
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Alas - OOP, using a sledgehammer to crack a nut."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Yet another assignment with disproportionate workload #NUSLife"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (new File(filePath).exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                ui.showLoading(tasks.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } catch (DukeException | FileNotFoundException ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                ui.showLoadingError(ex.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                c.execute(tasks, ui, storage, fullCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } catch (DukeException | IOException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     * Program entry point."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static void main(String[] args) throws DukeException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        new Duke(\".\" + File.separator + \"duke.txt\").run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 64,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, String command) throws IOException, DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String addTextDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String addTextPeriod \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                addTextDescription \u003d command.substring(command.lastIndexOf(\"todo \") + 5);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                if (addTextDescription.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    throw new DukeException(\"Error [AddCommand] 0x0000006: The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    tasks.add(new Todo(addTextDescription));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                if (command.lastIndexOf(\"/by\") \u003d\u003d -1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    throw new DukeException(\"Error [AddCommand] 0x0000007: You are missing information.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                addTextDescription \u003d command.substring(9, command.lastIndexOf(\"/by\")).trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                addTextPeriod \u003d command.substring(command.lastIndexOf(\"/by \") + 3).trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                if (addTextDescription.length() \u003d\u003d 0 || addTextPeriod.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    throw new DukeException(\"Error [AddCommand] 0x0000008: You are missing information.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    tasks.add(new Deadline(addTextDescription, addTextPeriod));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                if (command.lastIndexOf(\"/at\") \u003d\u003d -1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    throw new DukeException(\"Error [AddCommand] 0x0000009: You are missing information.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                addTextDescription \u003d command.substring(6, command.lastIndexOf(\"/at\")).trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                addTextPeriod \u003d command.substring(command.lastIndexOf(\"/at \") + 3).trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                if (addTextDescription.length() \u003d\u003d 0 || addTextPeriod.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    throw new DukeException(\"Error [AddCommand] 0x0000010: You are missing information.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    tasks.add(new Event(addTextDescription, addTextPeriod));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new DukeException(\"Error [AddCommand] 0x0000011: I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 57
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage, String command) throws IOException, DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            int target \u003d parseInt(command.replaceAll(\"\\\\D+\", \"\")) - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            tasks.remove(target);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            System.out.println(\"Error [DeleteCommand] 0x0000005: Not a valid number.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 20
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            int target \u003d parseInt(command.replaceAll(\"\\\\D+\", \"\")) - 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            tasks.markDone((target));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            System.out.println(\"Error [DoneCommand] 0x0000004: Not a valid number.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 20
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, String command) throws IOException, DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        storage.save(tasks.getList());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Ui.showBye();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 18
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String target \u003d command.substring(5);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            ArrayList\u003cTask\u003e foundList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            for (Task t : tasks.getList()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                if (t.toString().contains(target)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    foundList.add(t);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            if (foundList.size() \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                System.out.println(\"Here are the matching tasks in your list: \" + System.lineSeparator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d foundList.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    System.out.println(i + \". \" + foundList.get(i - 1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                System.out.println(\"No matching tasks.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            System.out.println(\"Error [FindCommand] 0x0000012: Invalid Operation.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 37
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Invalid Command, try again.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 13
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage, String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        tasks.output();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, formatter);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String printSave() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"D | \" + ((isDone) ? \"1\" : \"0\") + \" | \" + description + \" | \" + by.format(formatter);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(formatter) + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at, formatter);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String printSave() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"E | \" + ((isDone) ? \"1\" : \"0\") + \" | \" + description + \" | \" + at.format(formatter);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(formatter) + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String printSave() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"T | \" + ((isDone) ? \"1\" : \"0\") + \" | \" + description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String printSave() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"T | \" + ((isDone) ? \"1\" : \"0\") + \" | \" + description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 18
    }
  },
  {
    "path": "src/main/java/duke/util/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 7
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (fullCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else if (fullCommand.contains(\"done\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else if (fullCommand.contains(\"delete\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else if (fullCommand.contains(\"todo\") || fullCommand.contains(\"deadline\") || fullCommand.contains(\"event\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new AddCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } else if (fullCommand.contains(\"find\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return new InvalidCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 32
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws IOException, DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                fw.write(t.printSave() + System.lineSeparator());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            throw new DukeException(\"Error [Storage] 0x0000003: Save Failed.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        File dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Scanner sc \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            String[] lineSplit \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                switch (line.charAt(0)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    case \u0027T\u0027:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        tasks.add(new Todo(lineSplit[2]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    case \u0027D\u0027:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        tasks.add(new Deadline(lineSplit[2], lineSplit[3]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    case \u0027E\u0027:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        tasks.add(new Event(lineSplit[2], lineSplit[3]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                        throw new DukeException(\"Error [Storage] 0x0000001: Invalid or Malformed Data.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                if (lineSplit[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                    tasks.get(tasks.size() - 1).done();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "                throw new DukeException(\"Error [Storage] 0x0000002: Invalid or Malformed Data.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 65
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void output() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            System.out.println(i + \". \" + tasks.get(i - 1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void markDone(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        tasks.get(index).done();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"  \" + tasks.get(index));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"  \" + tasks.get(index));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"You now have \" + getSize() + (getSize() \u003d\u003d 1 ? \"task\" : \" tasks\") + \" in the list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"  \" + t);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"You now have \" + getSize() + (getSize() \u003d\u003d 1 ? \"task\" : \" tasks\") + \" in the list.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 53
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public Ui() { }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"What can I OOP for you today?\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static void showLoading(int size) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Loaded \" + size + (size \u003d\u003d 1 ? \"task\" : \" tasks\") + System.lineSeparator());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static void showLoadingError(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(message + System.lineSeparator());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static void showError(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(message + System.lineSeparator());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"_______\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public static void showBye() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        System.out.println(\"Goodbye... Until more OOP.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        return \"bye\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 41
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addTodoTest() throws IOException, DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddCommand testCommand \u003d new AddCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        testCommand.execute(testList, null, null, \"todo oop\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(\"[T][✘] oop\", testList.getList().get(0).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void addDeadlineTest() throws IOException, DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddCommand testCommand \u003d new AddCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        testCommand.execute(testList, null, null, \"deadline return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(\"[D][✘] return book (by: 2/12/2019 1800)\", testList.getList().get(0).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 28
    }
  },
  {
    "path": "src/test/java/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    public void doneTest() throws IOException, DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        AddCommand testCommand \u003d new AddCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        testCommand.execute(testList, null, null, \"todo oop\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        doneCommand.execute(testList, null, null, \"done 1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "        assertEquals(\"[T][✓] oop\", testList.getList().get(0).toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 22
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Got it. I\u0027ve added this duke.task:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  [D][✘] do homework (by: no idea :-p)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "You now have 1 duke.task in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Nice! I\u0027ve marked this duke.task as done:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "  [D][✓] do homework (by: no idea :-p)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1. [D][✓] do homework (by: no idea :-p)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   )"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the duke.task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another duke.task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the duke.command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": ":bulb: Simply run the duke.command `gradlew {taskName}` in the terminal and Gradle will run the duke.task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` duke.command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the duke.command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "Now you can run the duke.command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the duke.command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 6,
      "-": 164
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ReignOfComputer"
        },
        "content": "import java.duke.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ReignOfComputer": 1,
      "-": 293
    }
  }
]
