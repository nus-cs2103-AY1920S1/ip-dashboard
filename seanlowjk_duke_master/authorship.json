[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027org.jetbrains.kotlin.jvm\u0027 version \u00271.3.50\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "test {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "compileKotlin {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    kotlinOptions {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        jvmTarget \u003d \"1.8\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "compileTestKotlin {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    kotlinOptions {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        jvmTarget \u003d \"1.8\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 45,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Circle clip \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 62
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.EndCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Main Class of the Application, which requires the workings of all packages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the reader and the writer for the output text file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the list of tasks stored in the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the interface which handles user input and interactions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses out the user input for ui recognition."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private DataParser parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses out the date to a readable format for the ui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private DateParser dateHelper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents if the boolean has terminated or not."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    protected boolean hasTerminated;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates a new Duke class which contains all packages to process user input and file input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * If no file is found, a new task list is created instead."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * If a file is found, data is retrieved from the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        parser \u003d new DataParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dateHelper \u003d new DateParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        hasTerminated \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Main Logic of the Code, which runs based on user input given by the parsers."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Continues to create and execute commands till there is no more user input left."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.sendGreeting();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        while (!hasTerminated) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!parser.hasAnymoreData()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.readInput();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                Command c \u003d parser.findCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                hasTerminated \u003d c.isExit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                c.execute(taskList, ui, storage, parser, dateHelper);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ui.sendErrorMessage(error);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.sendFarewell();;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *  Takes in a input and returns a response which duke says."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param input the input received from the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a response in the form of a String."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (hasTerminated) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \".\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.reset();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            parser.readInput(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Command c \u003d parser.findCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (c instanceof EndCommand) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                hasTerminated \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            c.execute(taskList, ui, storage, parser, dateHelper);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return ui.print();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ui.sendErrorMessage(error);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return ui.print();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 109,
      "-": 5
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.setTitle(\"Duke: Abstraction Techniques\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/DukeIcon.png\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 33
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Martin.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            DialogBox.getDukeDialog(\"Hello! Martin here!\\nWhat can I do?\", dukeImage)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Follwong which, appends them to the dialog container."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String in \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String out \u003d duke.getResponse(in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (out.equals(\".\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    DialogBox.getUserDialog(in, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    DialogBox.getDukeDialog(out, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 59
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.TooManyTasksException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to add a Deadline Task to the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AddDeadlineTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddDeadlineTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it adds a new Deadline Task to the TaskList, if there are less than 101 tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (TaskList.getNumberOfTasks() \u003e\u003d 100) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new TooManyTasksException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] deadlineData \u003d dataParser.parseDeadlineData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dateParser.readInput(deadlineData[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String dateOutput \u003d dateParser.convertDateToString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOutput \u003d deadlineData[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d taskList.addDeadlineTask(nameOutput, dateOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showAddedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 47
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.TooManyTasksException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to add a ToDo Task to the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AddEventTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddEventTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it adds a new Event Task to the TaskList, if there are less than 101 tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (TaskList.getNumberOfTasks() \u003e\u003d 100) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new TooManyTasksException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] eventData \u003d dataParser.parseEventDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dateParser.readInput(eventData[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String dateOutput \u003d dateParser.convertDateToString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOutput \u003d eventData[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d taskList.addEventTask(nameOutput, dateOutput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showAddedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 47
    }
  },
  {
    "path": "src/main/java/duke/command/AddToDoTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.TooManyTasksException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to add a ToDo Task to the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AddToDoTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddToDoTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it adds a new ToDo Task to the TaskList, if there are less than 101 tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (TaskList.getNumberOfTasks() \u003e\u003d 100) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new TooManyTasksException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String toDoData \u003d dataParser.parseToDoData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d taskList.addTodoTask(toDoData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showAddedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.TooManyTasksException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to be executed during the running of the Duke Application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isExit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isExit Represents whether the Application should terminate or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Command(boolean isExit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.isExit \u003d  isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 40
    }
  },
  {
    "path": "src/main/java/duke/command/CompleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to complete one single task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class CompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CompleteTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it completes a task by setting the completion to true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d dataParser.getTaskIndex();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        taskList.completeTask(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showCompletedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to delete one single task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DeleteTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it deletes a task by retrieving its index and removing it from TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d dataParser.getTaskIndex();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showDeletedTask(deletedTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 41
    }
  },
  {
    "path": "src/main/java/duke/command/EndCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to end the reading of user input and data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EndCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EndCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, what it does is to signal the end of input processing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.sendFarewell();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 36
    }
  },
  {
    "path": "src/main/java/duke/command/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command find matching tasks based on a specific keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FindTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it finds matching tasks which contain a specific keyword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String keyword \u003d dataParser.findKeyWord();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cInteger\u003e taskIndexes \u003d taskList.findMatchingTasks(keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showMatchingTasks(taskIndexes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ListTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to list all tasks in the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ListTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it asks the ui to list all the tasks found in the TaskList, if any."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.listTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 37
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an Exception which is thrown during the running of the Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeLoadingError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents the Loading Error when there is no data or file to be loaded by the storage."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DukeLoadingError extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! File is empty or not found.  Creating new list...\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents the Exception to be thrown when the date given is not of proper format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidDateInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidDateInputException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + this.message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an exception to be thrown when the name or the date of the Deadline Task is not given or valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidDeadlineException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an exception to be thrown when the name or the date of the Event Task is not given or valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidEventException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! Please key in a valid keyword!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Rerpresents an Exception to be thrown when an invalid task index has been given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidTaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! Please key in a valid task index!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an Exception that is thrown when the name of the ToDo Task is not given or valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidToDoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! The description of a todo cannot be empty\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/TooManyTasksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an Exception to be thrown when the user tries to add more than 100 tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class TooManyTasksException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! You can have only at most 100 tasks!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an Exception that is thrown when the input does not result in the execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 12
    }
  },
  {
    "path": "src/main/java/duke/parser/DataParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.AddDeadlineTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.AddEventTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.AddToDoTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.CompleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.EndCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.ListTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.FindTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidToDoException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidKeywordException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Data Parser to parse in all user input provided."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DataParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new DataParser to read in the user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DataParser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * To check the user has anymore data left unread."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * If there is anymore data left unread, return true."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns true if there is data left unread."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean hasAnymoreData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return sc.hasNextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the input line."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the given input line."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param input The given input line."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readInput(String input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the User Input data and returns a Command based on the first word given by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Inputs should start with \"bye\", \"delete\", \"done\" etc."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A Command based on the user input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If the user input is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Command findCommand() throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (shouldEndParsing()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new EndCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldListTasks()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldCompleteTask()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new CompleteTaskCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldDeleteTask()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new DeleteTaskCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldAddToDoTask()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AddToDoTaskCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldAddDeadlineTask()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AddDeadlineTaskCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldAddEventTask()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AddEventTaskCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldFindTask()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new FindTaskCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the Index of the Task involved from the user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The Index of the Task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException If no index or invalid index is provided."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int getTaskIndex() throws InvalidTaskIndexException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] parsedData \u003d input.split(\" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (parsedData.length \u003c 2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String index \u003d parsedData[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return taskIndex;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the data given represents a task with no name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data The data provided by the user input."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns false if the data provided gives a name for the task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isEmptyTask(String data) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.equals(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user has included the \"/by\" regex to allow parsing of the date for the Deadline Task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data The data provided by the user input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns false if the data provided does not contain the \"/by\" regex."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isDeadlineTaskValid(String data) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.contains(\"/by\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user has included the \"/att\" regex to allow parsing of the date for the Event Task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data The data provided by the user input."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns false if the data provided does not contain the \"/at\" regex."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isEventTaskValid(String data) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.contains(\"/at\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the user input to return the name of the ToDo Task."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the name of the ToDo Task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidToDoException If the name of the task is not provided."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String parseToDoData() throws InvalidToDoException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(4);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyTask(data)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidToDoException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the user input to return the name of the Deadline Task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the name and the date of the Deadline Task in the form of an array."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDeadlineException If the name or the date of the task is not provided."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseDeadlineData() throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(8).trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyTask(data)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDeadlineException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (!isDeadlineTaskValid(data)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDeadlineException(\"Please include the time of a deadline.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskData \u003d data.split(\" /by \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (taskData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDeadlineException(\"The time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return taskData;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the user input to return the name of the Event Task."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the name and the date of the Event Task in the form of an array."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidEventException If the name or the date of the task is not provided."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseEventDate() throws InvalidEventException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(5).trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyTask(data)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEventException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (!isEventTaskValid(data)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEventException(\"Please include the time of an event.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskData \u003d data.split(\" /at \");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (taskData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEventException(\"The time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return taskData;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user input indicates that the data parser should end the parsing of user input."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns true if input is \"bye\"."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String findKeyWord() throws InvalidKeywordException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(5).trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (data.equals(\"\")) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidKeywordException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return data;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldEndParsing() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.equals(\"bye\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user input indicates that the tasks should be listed out."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns true if input is \"list\"."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldListTasks() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.equals(\"list\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user input wishes to complete a task."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns true if the input starts with \"done\"."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldCompleteTask() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.startsWith(\"done\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to delete a task."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"delete\"."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldDeleteTask() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.startsWith(\"delete\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to add a ToDo Task."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"todo\"."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldAddToDoTask() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.startsWith(\"todo\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to add a Deadline Task."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"deadline\"."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldAddDeadlineTask() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.startsWith(\"deadline\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to add an Event Task."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"event\"."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldAddEventTask() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.startsWith(\"event\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldFindTask() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.startsWith(\"find\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 258
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Date Parser to parse in all String data given into a form readable by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Date inputParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the input and stores it in the parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param input The input provided by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readInput(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the month (provided an integer) and returns it as a String."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * For example, 0 represents January, 1 represents February all the way until 11 represents December."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param month The integer representation of the month."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The String representation of the month."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String monthToString(int month) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (month \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"January\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"February\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"March\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 3) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"April\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 4) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"May\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 5) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"June\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 6) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"July\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 7) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"August\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 8) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"September\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 9) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"October\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 10) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"November\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"December\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Takes in an array of data which represents the day, month and year of the date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Following which, checks if the day, month and year are valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateData An array of data which contains the day, month and year of the date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException If the day, month or year is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void checkDateData(String[] dateData) throws InvalidDateInputException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        InvalidDateInputException error \u003d new InvalidDateInputException(\"Please key in a valid date in the format:\\n \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                + \"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int day \u003d Integer.parseInt(dateData[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int month \u003d Integer.parseInt(dateData[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int year \u003d Integer.parseInt(dateData[2]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (year \u003c 0 || month \u003c 0 ||  month \u003e 12 || day \u003c 0 || day \u003e 31) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (day \u003e 31 \u0026\u0026 (month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7 || month \u003d\u003d 8"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    || month \u003d\u003d 10 || month \u003d\u003d 12)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 2 \u0026\u0026 ((day \u003e 29 \u0026\u0026 year % 4 \u003d\u003d 0) || day \u003e 28)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (day \u003e 30 \u0026\u0026 (month \u003d\u003d 2 || month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Takes in a String which represents the hour and the minutes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Following which, check if the data is valid or not."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param time A String representation of the time in the format \"hhmm\"."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException If the hour or minutes is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void checkTimeData(String time) throws InvalidDateInputException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        InvalidDateInputException error \u003d new InvalidDateInputException(\"Please key in a valid time in the format:\\n \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                + \"hhmm\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int hours \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int mins \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (hours \u003c 0  || hours \u003e 23 || mins \u003c 0 || mins \u003e 60) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the Date and Time are valid in general."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * This is done by splitting the Date and Time and checking them individually."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException IF either the Date of Time is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void checkDateTime() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String[] dateTime \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String[] dateData \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            checkDateData(dateData);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            checkTimeData(dateTime[1]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (InvalidDateInputException error) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDateInputException(\"Please key in the date in this format:\\n dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts the time in \"hhmm\" format into a String."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * For example: \"1207\" is converted to \"12:07 pm\"."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param hour The hour of the time."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param minutes The minute of the time."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param timeInString The String representation of the time in \"hhmm\" format to determine am or pm."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The String representation fot eh time in the format \"hh:mm pm\" or \"hh:mm am\"."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String timeToString(int hour, int minutes, String timeInString) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (hour \u003e 12) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d pm\", hour - 12, minutes);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (hour \u003e 0 \u0026\u0026 hour \u003c 12) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d am\", hour, minutes);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (timeInString.substring(0, 2).equals(\"12\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d pm\", hour + 12, minutes);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d am\", hour + 12, minutes);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts the date from \"dd/MM/yyyy\" into the format \"dd of mm yyyy\"."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The date in the format of \"dd of mm yyyy\"."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException If the date, month or year is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String convertDateToString() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        checkDateTime();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            inputParser \u003d formatter.parse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            calendar.setTime(inputParser);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String month \u003d monthToString(calendar.get(Calendar.MONTH));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int day \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int hour \u003d calendar.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int minutes \u003d calendar.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d of %s %d %s\", day, month, year, timeToString(hour, minutes,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    (input.split(\" \"))[1]));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDateInputException(\"Please key in the date in this format:\\n dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 167
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeLoadingError;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Storage Class which loads and saves data to the output file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FileWriter writer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The path of the output file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The list of the tasks to be uploaded or saved."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates a new Storage based on the filepath provided."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param filepath the path of the file provided."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads back the Deadline Task based on the task data loaded from the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task the data from the file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addBackDeadlineTask(String task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskDetails \u003d task.split(\" / \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String completion \u003d taskDetails[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOfTask \u003d taskDetails[2];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String deadline \u003d taskDetails[3];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (completion.equals(\"Y\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(new DeadlineTask(nameOfTask, true, deadline));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(new DeadlineTask(nameOfTask, false, deadline));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads back the Event Task based on the task data loaded from the file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task the data from the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addBackEventTask(String task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskDetails \u003d task.split(\" / \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String completion \u003d taskDetails[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOfTask \u003d taskDetails[2];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String time \u003d taskDetails[3];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (completion.equals(\"Y\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(new EventTask(nameOfTask, true, time));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(new EventTask(nameOfTask, false, time));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads back the ToDo Task based on the task data loaded from the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task the data from the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addBackToDoTask(String task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskDetails \u003d task.split(\" / \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String completion \u003d taskDetails[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOfTask \u003d taskDetails[2];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (completion.equals(\"Y\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(new ToDoTask(nameOfTask, true));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(new ToDoTask(nameOfTask, false));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads all the data from the output file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * If there is no data provided, an error is thrown."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A list of Tasks loaded from the file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is no file or data provided."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String task;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            boolean hasStartedLoading \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            while ((task \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                if (task.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    addBackDeadlineTask(task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else if (task.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    addBackEventTask(task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    addBackToDoTask(task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                hasStartedLoading \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!hasStartedLoading) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                throw new DukeLoadingError();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new DukeLoadingError();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Saves all the tasks from the TaskList into the output file one by one."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            writer \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            for (int i \u003d 0; i \u003c TaskList.getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                Task task \u003d TaskList.getTask(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    if (task.isCompleted) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"D / Y / %s / %s\", task.todo, deadlineTask.deadline));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"D / N / %s / %s\", task.todo, deadlineTask.deadline));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    if (task.isCompleted) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"E / Y / %s / %s\", task.todo, eventTask.time));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"E / N / %s / %s\", task.todo, eventTask.time));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    ToDoTask todoTask \u003d (ToDoTask) task;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    if (task.isCompleted) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"T / Y / %s\", task.todo));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"T / N / %s\", task.todo));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the filepath of the storage."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The filepath of the storage."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.filepath;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 171
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to complete by a certain deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Deadline Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param deadline The time of the deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DeadlineTask(String todo, String deadline) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Deadline Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param deadline The time of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DeadlineTask(String todo, boolean isCompleted, String deadline) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo, isCompleted);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[D][Y] %s (by: %s)\", this.todo, this.deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[D][N] %s (by: %s)\", this.todo, this.deadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 42
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to complete at a certain time period."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs am Event Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param time The time of the event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EventTask(String todo, String time) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs an Event Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param time The time of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EventTask(String todo, boolean isCompleted, String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo, isCompleted);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[E][Y] %s (at: %s)\", this.todo, this.time);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[E][N] %s (at: %s)\", this.todo, this.time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 42
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to complete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isCompleted;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task(String todo) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.todo \u003d todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task(String todo, boolean isCompleted) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.todo \u003d todo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"[Y] \" + this.todo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"[N] \" + this.todo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 40
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a list of all completed and uncompleted Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Task List which reads in 0 tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Task List which reads in a list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tasks The loaded list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds the ToDo Task based on the data given, and returns the index of the new task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param toDoData The name of the ToDo Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The index of the new task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int addTodoTask(String toDoData) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ToDoTask newTask \u003d new ToDoTask(toDoData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds the Deadline Task based on the data given, and returns the index of the new task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskName The name of the Deadline Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskDate The date of the Deadline Task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The index of the new task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int addDeadlineTask(String taskName, String taskDate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeadlineTask newTask \u003d new DeadlineTask(taskName, taskDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds the Event Task based on the data given, and returns the index of the new task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskName The name of the Deadline Task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskDate The date of the Deadline Task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The index of the new task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int addEventTask(String taskName, String taskDate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EventTask newTask \u003d new EventTask(taskName, taskDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Completes a task based on the index given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException If the index is lees than 0 or the index exceeds the number of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void completeTask(int index) throws InvalidTaskIndexException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            task.isCompleted \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Deletes a task based on the index given, returning the Task that was deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The deleted task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException If the index is less than 0 or the index exceeds the number of tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task deleteTask(int index) throws InvalidTaskIndexException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The number of tasks in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ArrayList\u003cInteger\u003e findMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cInteger\u003e matchingIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (task.todo.contains(keyword)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                matchingIndexes.add(i);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return matchingIndexes;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static int getNumberOfTasks() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the task at the index provided."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The task to be retrieved."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static Task getTask(int index) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 130
    }
  },
  {
    "path": "src/main/java/duke/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a ToDo Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ToDoTask(String todo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a ToDo Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ToDoTask(String todo, boolean isCompleted) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo, isCompleted);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[T][Y] %s\", this.todo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[T][N] %s\", this.todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 37
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * The Class which handles user input and interacts with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Prints the output message to be sent and resets the output message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Resets the output message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        output \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Appends the string to the output meesage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void append(String message) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        output +\u003d (message + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The completed task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showCompletedTask(Task task) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has deleted."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The deleted task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showDeletedTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Now you have \" +  TaskList.getNumberOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has added."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The added task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showAddedTask(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Now you have \" + TaskList.getNumberOfTasks() + \" tasks in the list!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a simple greeting to the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void sendGreeting() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Hello! Martin here!\\nWhat can I do\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a simple farewell message to the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void sendFarewell() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Press enter to keep the app closed.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a message to the user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskIndexes Represents the list of matching tasks indexes."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showMatchingTasks(ArrayList\u003cInteger\u003e taskIndexes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c taskIndexes.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d TaskList.getTask(taskIndexes.get(i));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(task.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a message to the user based on the DukeException given."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param error The error which has arised."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void sendErrorMessage(DukeException error) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(error.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a Loading error in the event where there is no tasks to be read from the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"OOPS !!! Loading Error! Creating a New List...\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Lists all the tasks involved in the TaskList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void listTasks() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (TaskList.getNumberOfTasks() \u003d\u003d  0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(\"You have no tasks in the list!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int tasknum \u003d 0; tasknum \u003c TaskList.getNumberOfTasks(); tasknum++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d TaskList.getTask(tasknum);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String todo \u003d task.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (task.isCompleted) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                append((tasknum + 1) + \". \" + todo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                append((tasknum + 1) + \". \" + todo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 126
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.HBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "               prefWidth\u003d\"324.0\" text\u003d\"\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 26
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 9
    }
  },
  {
    "path": "src/test/java/ToDoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class ToDoTaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task task \u003d new ToDoTask(\"Eat Food\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(task.toString().equals(\"[T][N] Eat Food\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(task.isCompleted);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 17
    }
  }
]
