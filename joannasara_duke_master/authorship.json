[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    standardInput \u003d  System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 32,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "joannasara": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Initializes other classes and get responses for input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a duke object with a given filepath to save the output."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            taskList  \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        parser \u003d new Parser(taskList, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ui.taskList \u003d taskList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Starts the program."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ui.start(parser, storage, taskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Main method for the whole program that creates a new Duke object and calls run()."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Setting up the layout (no longer used since fxml is used."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param stage the main stage."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        stage.setScene(scene);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        stage.show();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        stage.setResizable(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            handleUserInput();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            handleUserInput();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Iteration 1:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * @param text String containing text to add"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        return textToAdd;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Iteration 2:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    private void handleUserInput() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joannasara"
        },
        "content": "////        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joannasara"
        },
        "content": "////                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joannasara"
        },
        "content": "////                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "////        );"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String input \u003d userInput.getText().trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        String response \u003d getResponse(input);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                DialogBox.getUserDialog(input, user),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//                DialogBox.getDukeDialog(response,duke)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            Platform.exit();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//            System.exit(0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//        userInput.clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joannasara"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            storage.updateFile(taskList.getList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                return  parser.parseLine(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                return \"Must input an integer\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 200,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            dialog.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            displayPicture.setClip(new Circle(50, 35, 50));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        double minHeight \u003d text.split(\"\\n\").length * 30 + 30;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        dialog.setMinHeight(minHeight);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.setMinHeight(minHeight);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 70
    }
  },
  {
    "path": "src/main/java/duke/command/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Main class for this application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 12
    }
  },
  {
    "path": "src/main/java/duke/command/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String welcomeMessage  \u003d \"Hello! I\u0027m duke.Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            VBox dialogContainer \u003d (VBox) scene.lookup(\"#dialogContainer\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    DialogBox.getDukeDialog(welcomeMessage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                            new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joannasara": 41
    }
  },
  {
    "path": "src/main/java/duke/command/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Controller for duke.command.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 59
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a parser that will be used to parse each line of input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a Parser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param taskList taskList to which the parsed Tasks would be saved"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param ui ui for input and output"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Parser(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Parses the inputted string into a Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param  str string to be parsed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String parseLine(String str) throws DukeException, NumberFormatException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (str.equals(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return ui.printList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else if (str.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] arr \u003d str.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            int i \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (i \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                throw new DukeException(\"Number can\u0027t be bigger than list size.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else if (i \u003c 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                throw new DukeException(\"Number must be greater than 0\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return ui.printDelete(taskList.removeTask(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else if (str.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] arr \u003d str.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            int i \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (i \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                throw new DukeException(\"Number can\u0027t be bigger than list size.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else if (i \u003c 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                throw new DukeException(\"Number must be greater than 0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return ui.printDone(taskList.markTaskAsDone(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else if (str.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] arr \u003d str.split(\" \", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return ui.printMatchingList(arr[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] arr \u003d str.split(\"/\", 2); // separates the the description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] typeArray \u003d arr[0].split(\" \", 2); // separate the task type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (typeArray[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (typeArray.length \u003c 2  || typeArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                task \u003d new Todo(typeArray[1], false, \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                taskList.addTask(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else  if (typeArray[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (typeArray.length \u003c 2 || typeArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (arr.length \u003c 2 || arr[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The time of a deadline cannot be empty, add a /by description!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (!arr[1].startsWith(\"by \")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    throw new DukeException(\"Use /by  \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                task \u003d new Deadline(typeArray[1], false, arr[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                taskList.addTask(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else if (typeArray[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (typeArray.length \u003c 2 || typeArray[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (arr.length \u003c 2 || arr[1].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! The time of a deadline cannot be empty, add a /at description!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (!arr[1].startsWith(\"at \")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    throw new DukeException(\"Use /at  \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                task \u003d new Event(typeArray[1], false, arr[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                taskList.addTask(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return ui.printAdd(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 95
    }
  },
  {
    "path": "src/main/java/duke/command/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Saves file to the specified filePath."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param filePath a String that represents the filepath to save this program\u0027s output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Loads the saved file and adds the tasks to TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return the list of tasks parsed from the saved file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] arr  \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            boolean isDone \u003d !arr[1].trim().equals(\"0\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if  (arr[0].trim().equals(\"T\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                task \u003d new Todo(arr[2].trim(), isDone, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else if (arr[0].trim().equals(\"D\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                task \u003d new Deadline(arr[2].trim(), isDone, arr[3].trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                task \u003d new Event(arr[2].trim(), isDone, arr[3].trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            list.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Updates the file in the corresponding filePath."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param arr an ArrayList of Tasks to update the file in the corresponding filePath"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static  void  updateFile(ArrayList\u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        File dir \u003d new File(\"/Users/joannasara/Desktop/duke/data\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String  fileString \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (Task t : arr) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fileString +\u003d t.getFileStringFormat() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            File f \u003d new File(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fw.write(fileString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 79
    }
  },
  {
    "path": "src/main/java/duke/command/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Stores the list of tasks and supports the addition, deletion, and mark as done of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * An empty constructor for TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.list \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a new TaskList with the given ArrayList of Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param list an ArrayList of Tasks which content is going to be saved in the new TaskList object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Adds a new task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the list of tasks in this TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return an ArrayList of Tasks containng the tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Removes a task with of the position i - 1."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param i position of the task (starts from 1)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return the Task which is removed from this TaskList"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Task removeTask(int i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return list.remove(i - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns the current number of tasks stored in this TaskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return an integer representing the number of tasks in this tasklist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Marks the task stored at position i + 1 as done."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return the modified Task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Task markTaskAsDone(int i) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Task task \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 70
    }
  },
  {
    "path": "src/main/java/duke/command/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Manages input and output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public static TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates a new Ui object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Loops through the input and calls the Parser to evaluate each line. Loop terminate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * when the user types in \"bye\"."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param parser the Parser that is used to evaluate each line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param storage the Storage that is used to save information into file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param taskList the TaskList that is used to save the current information"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void start(Parser parser, Storage storage, TaskList taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Hello! I\u0027m duke.Duke\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String word \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        while (!word.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                parser.parseLine(word);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                System.out.println(\"Must input an integer\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                word \u003d sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        storage.updateFile(taskList.getList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Prints the loading error."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \"File not found\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Prints the list of Tasks stored in the TaskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String result \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            System.out.println(i + \". \" + task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            result +\u003d i + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Prints the message displayed when the user deletes a Task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String printDelete(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: : \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"\\t\" + task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Now you have \" +  taskList.getSize()  +  \" tasks in the list.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \"Noted. I\u0027ve removed this task: : \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                + \"\\t\" + task + \"\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                + \"Now you have \" +  taskList.getSize()  +  \" tasks in the list.\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Prints the message displayed when the user marks a Task as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String printDone(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"\\t\" + task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n\\t\" +task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Prints the message displayed when the user adds a new Task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String printAdd(Task task) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"\\t\" + task.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Now you have \" +  taskList.getSize()  +  \" tasks in the list.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                + \"\\t\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                + \"Now you have \" +  taskList.getSize()  +  \" tasks in the list.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Prints the list of Tasks stored in the TaskList that contains the user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String printMatchingList(String pattern) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String result \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            if (task.toString().contains(pattern) || task.getFileStringFormat().contains(pattern)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                System.out.println(i + \". \" + task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                result +\u003d i + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 125
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Exception for this program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Creates an exception with the specified message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param message a String that is used as the error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a task of type deadline. An \u003ccode\u003eDeadline\u003c/code\u003e object contains a description,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * a  boolean representing whether or not the task has been done and additional information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected String  by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a new Deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param isDone whether or not the task has been done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Deadline(String description, boolean isDone, String info) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(description, isDone, info);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super.type \u003d Type.DEADLINE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String[] infos \u003d info.split(\" \", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        by \u003d  super.checkDate(infos[1]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Overrides toString method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a String in the to-be-displayed format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" +  by + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a String in the format for file saving."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a string in the saved format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (isDone()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"D | 1 | \" + description + \" | \" + info;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"D | 0 | \" + description + \" | \" + info;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a task of type event. An \u003ccode\u003eEvent\u003c/code\u003e object contains a description,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * a  boolean representing whether or not the task has been done and additional information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a new Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param isDone whether or not the task has been done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Event(String description, boolean isDone,  String info) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(description, isDone, info);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super.type \u003d Type.EVENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        String[] infos \u003d info.split(\" \", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.at \u003d  super.checkDate(infos[1]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Overrides toString method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a String in the to-be-displayed format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \"[E][\" + getStatusIcon() + \"] \" + description + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a String in the format for file saving."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a string in the saved format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (isDone()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"E | 1 | \" + description + \" | \" + info;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"E | 0 | \" + description + \" | \" + info;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object contains a description,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * a  boolean representing whether or not the task has been done and additional information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected Type type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected String info;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Empty constructor for Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a new Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param isDone whether or not the task has been done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Task(String description, boolean isDone, String info) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.info \u003d info.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a boolean representing whether or not the task is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return true if the task is done, false otherwise"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a string which is the first character of each task type."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a \"T\", \"D\", or \"E\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"T\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"D\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"E\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a boolean representing whether or not the task is done."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return true if the task is done, false otherwise"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"x\"); //return tick or X symbols"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Overrides toString method."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a String in the to-be-displayed format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (info.equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"[\" + getSymbol() + \"][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] infos \u003d info.split(\" \", 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"[\" + getSymbol() + \"][\" + getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    + description + \" (\" + infos[0] + \":  \" +  infos[1] + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a String in the format for file saving. An abstract method to be implemented in child classes."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public abstract String getFileStringFormat();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Checks if the string is in date format dd/MM/yyyy HHmm and returns the parsed form of the  date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param str the task\u0027s info String"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return true if the task is done, false otherwise"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String checkDate(String str)  {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            DateFormat parser \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            DateFormat formatter \u003d new SimpleDateFormat(\"d MMMM yyyy ha\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            date \u003d parser.parse(str);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String output \u003d formatter.format(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String[] arr \u003d output.split(\" \",  4);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            int day \u003d Integer.parseInt(arr[0]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            String finalString \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            finalString +\u003d arr[0];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            switch (day % 10) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (day \u003d\u003d 11) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    finalString +\u003d \"th\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    finalString +\u003d \"st\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                if (day \u003d\u003d 12) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    finalString +\u003d \"th\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                    finalString +\u003d \"nd\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                finalString +\u003d \"rd\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                finalString +\u003d \"th\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            finalString +\u003d \" of \" + arr[1] + \" \" + arr[2] + \", \" + arr[3];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return finalString;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return str;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 142
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a task of type todo. A \u003ccode\u003eTodo\u003c/code\u003e object contains a description,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * a  boolean representing whether or not the task has been done and additional information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Constructs a new Todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @param isDone whether or not the task has been done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public Todo(String description, boolean isDone, String info) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super(description, isDone, info);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        super.type \u003d Type.TODO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Overrides toString method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a String in the to-be-displayed format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Returns a String in the format for file saving."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * @return a string in the saved format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        if (isDone()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"T | 1 | \" + description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            return \"T | 0 | \" + description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Type.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Represents a types of Tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public enum Type {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    TODO, DEADLINE, EVENT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 8
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "joannasara": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.command.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "joannasara": 19
    }
  },
  {
    "path": "src/test/java/duke/command/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.task.Type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Tests TaskList class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Tests if TaskList successfully add a new Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void taskList_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Stub for Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        class TaskStub extends Task {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * Constructs a new TaskStub."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * @param desc description of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * @param bool whether or not the task has been done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * @param information extra info of the TaskStub"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            public TaskStub(String desc, boolean bool, String information) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                description \u003d desc;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                isDone \u003d bool;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                info \u003d information;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * Returns null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            public String getFileStringFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         * Stub for Event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joannasara"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        class EventStub extends TaskStub {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * Constructs a new EventStub."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * @param description description of the task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * @param isDone      whether or not the task has been done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             * @param info extra info of the EventStub"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joannasara"
        },
        "content": "             */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            public EventStub(String description, boolean isDone, String info) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                super(description, isDone, info);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joannasara"
        },
        "content": "                type \u003d Type.EVENT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        taskList.addTask(new EventStub(\"Do this thing\",  false, \"\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        assertEquals(1, taskList.getSize());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 67
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Tests Deadline class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Tests if Deadline.getFileStringFormat outputs the correct String format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void deadlineGenerateStringFormat_doneDeadline_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Certain CS project\", true, \"one of these days\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        assertEquals(\"D | 1 | Certain CS project | one of these days\", deadline.getFileStringFormat());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 19
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joannasara"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joannasara"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joannasara"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joannasara"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Tests Event class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joannasara"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joannasara"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     * Tests if Event.toString outputs the correct String."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joannasara"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    public void eventDateDetection_validDate_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        Event event \u003d new Event(\"A new event\", false, \"by 12/10/2019 2100\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        taskList.addTask(new Todo(\"Do this thing\",  false, \"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joannasara"
        },
        "content": "        assertEquals(\"[E][x] A new event (at: 12th of October 2019, 9PM)\", event.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joannasara"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joannasara": 22
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joannasara"
        },
        "content": "**duke.command.MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joannasara"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.command.MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joannasara"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/duke.command.MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   ![SceneBuilder opening duke.command.MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joannasara"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `duke.command.MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joannasara"
        },
        "content": "   ![Controller for duke.command.MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Let\u0027s implement the `duke.command.MainWindow` controller class that we specified in `duke.command.MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joannasara"
        },
        "content": "**duke.command.MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joannasara"
        },
        "content": " * Controller for duke.command.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joannasara"
        },
        "content": "public class duke.command.MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Notice how in `duke.command.MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joannasara"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `duke.command.MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/duke.command.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            fxmlLoader.\u003cduke.command.MainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joannasara"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.command.MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joannasara"
        },
        "content": "1. Convert `duke.command.MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joannasara"
        },
        "content": "1. Extend `duke.command.MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "joannasara": 17,
      "-": 277
    }
  }
]
