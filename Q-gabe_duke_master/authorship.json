[
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Deadline.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * CS2103T"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a Deadline Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Deadline extends Task implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected static DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Deadline(String description) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String[] splitDescription \u003d description.split(\" /by \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.description \u003d splitDescription[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.by \u003d LocalDateTime.parse(splitDescription[1], dateFormatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter a deadline using \\\"/by\\\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter a date with the format dd/MM/yyyy HHmm.\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[D]\"+ super.toString() + \" (by: \" + by.format(dateFormatter) + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 40
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Duke.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * CS2103T"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This program is an interactive task list that takes in several preset commands from the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * to create tasks, view the list of tasks and mark each of it as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class contains the main method and is responsible for all input/output and Task creation."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        ui.greetHello();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.tasks \u003d ui.runInputLoop(this.tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        //Save file before exiting"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.storage.save(this.tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.ui.showError(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.ui.greetBye();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        new Duke(\".\" + File.separator + \"data\").run();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 50,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * DukeException.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * CS2103T"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Represents the exception that can store an error message to be printed for the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * in the operation of Duke.java."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 17
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Event.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * CS2103T"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a Event Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Event extends Task implements Serializable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected static DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Event(String description) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String[] splitDescription \u003d description.split(\" /at \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.description \u003d splitDescription[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            this.at \u003d LocalDateTime.parse(splitDescription[1], dateFormatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter a deadline using \\\"/at\\\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Please enter a date with the format dd/MM/yyyy HHmm.\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(dateFormatter) + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 40
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    TaskList taskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    // Takes in a string, parses it and immediately runs the command as parsed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    // Returns a String output for the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         * Check if command suffix to parse, split accordingly and run command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // \"done\" commands"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e 5) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    Task item \u003d this.taskList.get(taskIndex-1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    item.setDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    return (\"Nice! I\u0027ve marked this task as done:\\n  \" + item);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    throw new DukeException(\"The description of a done must be an integer.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of a done cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // \"delete\" commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        else if (input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            // Process input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            if (input.length() \u003e 7) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(input.substring(7));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    if (this.taskList.size() \u003e\u003d taskIndex \u0026\u0026 taskIndex \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        String output \u003d (\"Noted. I\u0027ve removed this task:\\n  \" + this.taskList.get(taskIndex - 1) +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                                \"\\nNow you have \" + (this.taskList.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        this.taskList.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                        throw new DukeException(\"The integer entered for deletion is not valid.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    throw new DukeException(\"The description of a delete must be an integer.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                throw new DukeException(\"The description of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // \"to-do\" commands"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return addToList(input, TaskType.Todo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // \"deadline\" commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        else if (input.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return addToList(input, TaskType.Deadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // \"event\" commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        else if (input.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return addToList(input, TaskType.Event);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // \"list\" command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return this.taskList.getList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Other unrecognized commands"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    //Adds a list of a particular task type to the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String addToList(String input, TaskType type) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Process input string (Cut command suffix)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        switch(type) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            case Todo:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                if (input.length() \u003e 5) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    task \u003d new Todo(input.substring(5));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            case Deadline:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                if (input.length() \u003e 9) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    task \u003d new Deadline(input.substring(9));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            case Event:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                if (input.length() \u003e 6) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    task \u003d new Event(input.substring(6));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return (\"Got it. I\u0027ve added this task:\\n  \" + task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                + \"\\nNow you have \" + this.taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 107
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    File directoryPath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    File saveFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.directoryPath \u003d new File(filepath);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        directoryPath.mkdirs();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.saveFile \u003d new File(filepath + File.separator + \"list.bin\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FileInputStream load \u003d new FileInputStream(this.saveFile);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            ObjectInputStream loadList \u003d new ObjectInputStream(load);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            TaskList taskList \u003d (TaskList) loadList.readObject();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            loadList.close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Existing save not found! Creating new task list.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            FileOutputStream save \u003d new FileOutputStream(this.saveFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            ObjectOutputStream saveList \u003d new ObjectOutputStream(save);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            saveList.writeObject(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            saveList.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"Failed to save!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 40
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Task.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * CS2103T"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a basic Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 34
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.taskList.remove(index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String getList() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // List and print all items stored"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        for (Task item: this.taskList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            output.append(count++ + \".\" + item + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Remove terminal newline character if at least 1 item inserted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        if (count \u003e 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            output.deleteCharAt(output.toString().length() - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            return output.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            throw new DukeException(\"The task list is empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 47
    }
  },
  {
    "path": "src/main/java/duke/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * TaskType.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * CS2103T"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * Task types are represented like this upon parsing input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Todo,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Deadline,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 15
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * To-do.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * CS2103T"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * @author Gabriel Ong"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " * This class represents a To-do Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Todo extends Task implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 23
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Scanner input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    Parser parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.input \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void showError(DukeException e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        printOutput(e.getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void printOutput(String output) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String line \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Indent and process output line"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        output \u003d \"      \" + output.replaceAll(\"\\n\",\"\\n      \") + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        System.out.println(line + output + line);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void greetHello() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        printOutput(\"Hello I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void greetBye() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        printOutput(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public TaskList runInputLoop(TaskList taskList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        this.parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        // Run input loop"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        while (!(input \u003d this.input.nextLine()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                String output \u003d parser.parse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                printOutput(output);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                printOutput(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 50
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_ToDoCommand_writtenCorrectly() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"todo return book to library\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    \"[T][✘] return book to library\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Todo Command correctly parsed.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_ToDoCommand_empty_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"todo \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    \"[T][✘] return book to library\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e ) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Exception successfully thrown: \" + e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_deadLineCommand_writtenCorrectly() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"deadline return book /by 12/12/1212 1212\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    \"[D][✘] return book (by: 12/12/1212 1212)\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"deadline Command correctly parsed.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_deadLineCommand_empty_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"deadline \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    \"[D][✘] return book (by: 12/12/1212 1212)\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Exception successfully thrown: \" + e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void write_deadLineCommand_wrong_dateFormat() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Parser testParser \u003d new Parser(new TaskList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        String testToDoStr \u003d \"deadline return book /by 13/13/2019 2460\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            assertEquals(testParser.parse(testToDoStr), \"Got it. I\u0027ve added this task:\\n  \" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "                    \"[D][✘] return book (by: 13/13/2019 2460)\" + \"\\nNow you have 1 tasks in the list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "            System.out.println(\"Exception successfully thrown: \" + e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 80
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void testSetDone() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        Task testTask \u003d new Task(\"return book to library\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(testTask.toString(),\"[✘] return book to library\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        testTask.setDone();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(testTask.toString(),\"[✓] return book to library\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 14
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import duke.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    public void testStringRepresentation() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(new Todo(\"return book to library\").toString(),\"[T][✘] return book to library\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "        assertEquals(new Todo(\"testing\").toString(),\"[T][✘] testing\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Q-gabe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Q-gabe": 11
    }
  }
]
