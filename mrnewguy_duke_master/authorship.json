[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 30,
      "-": 13
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * The parent class of other command classes."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Command{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Command (String command, TaskList taskList){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Processes the raw command. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a cleaned command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Executes the instructions as per the processedCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param processedCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (e.g. task deleted)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 38
    }
  },
  {
    "path": "src/main/java/DeadLineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Deadline command is used to create DeadLine tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DeadLineCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String taskName; "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DeadLineCommand class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DeadLineCommand(String command, String taskName, TaskList taskList ){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(command, taskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Also creates the deadline task and executes it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] deadlineArray \u003d super.command.split(\"/by \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(deadlineArray.length \u003c 2){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The date of a deadline cannot be empty.\"); "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String deadLineTime \u003d deadlineArray[deadlineArray.length - 1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            LocalDateTime deadlineDateTime \u003d LocalDateTime.parse(deadLineTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String newTaskName \u003d taskName.split(\"/\")[0];        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            DeadlinesTask newTask1 \u003d new DeadlinesTask (false, newTaskName, deadlineDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String toPrint1 \u003d taskList.add(newTask1);    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return toPrint1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Date time format is wrong!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the process."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task added)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return processedCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 55
    }
  },
  {
    "path": "src/main/java/DeadlinesTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks with deadlines."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "class DeadlinesTask extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime endingDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DeadlinesTask class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param endingDateTime deadline of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DeadlinesTask (Boolean status, String message, LocalDateTime endingDateTime){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(status, message, \"[D]\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.endingDateTime \u003d endingDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the DeadlineTask."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[✓]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String formattedEndingDateTime \u003d String.valueOf(endingDateTime.getDayOfMonth()) + \" \" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(endingDateTime.getMonth()) + \" \" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(endingDateTime.getHour()) + "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(endingDateTime.getMinute()) +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        \" hours\" ;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return  super.type + doneString + \" \" + super.message + \" (by: \" +formattedEndingDateTime + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"1\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"D|\" +doneString + \"|\"+ super.message+ \"|\" + endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else if (! super.status ){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"0\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"D|\" +doneString + \"|\"+ super.message+ \"|\" + endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            assert false : \"Status of a event must be a boolean!\" ;  "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Status is not a boolean!\";         "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 62
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Delete command is used to create Delete tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DeleteCommand class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DeleteCommand(String command, String taskName, TaskList taskList ){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(command, taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(containsNonNumber(taskName)){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! You have chosen an invalid task number!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            int offset \u003d Integer.parseInt(taskName) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(offset \u003e taskList.size() - 1){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! There aren\u0027t so many tasks!\"); "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return Integer.toString(offset);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Calls the deleteTask method of the tasklist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task deleted)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.deleteTask(Integer.parseInt(processedCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public boolean containsNonNumber(String taskName){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(taskName.matches(\".*[a-zA-Z]+.*\") || taskName.contains(\"-\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return true; "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 54
    }
  },
  {
    "path": "src/main/java/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" styleClass\u003d\"list-view\" stylesheets\u003d\"@../resources/view/DarkTheme.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"result-display\" stylesheets\u003d\"@../resources/view/DarkTheme.css\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cInsets bottom\u003d\"30.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 16
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The DialogBox constructor takes in a text and an image, and creates a new dialog box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param img"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.setHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 68
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Done command is used to create Done tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DoneCommand class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DoneCommand(String command, TaskList taskList ){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(command, taskList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String userIndex \u003d super.command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (containsNonNumber(userIndex)){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! You have chosen an invalid task number!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String stringFromUser \u003d super.command.replaceAll(\"\\\\D+\",\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Integer indexFromUser \u003d Integer.parseInt(stringFromUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(indexFromUser \u003e taskList.size() -1 || indexFromUser \u003c 1 ){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String taskListMaxIndex \u003d Integer.toString(taskList.size()) ;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! Please choose a number from 1 to \" +taskListMaxIndex );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return Integer.toString(indexFromUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public boolean containsNonNumber(String userIndex){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(userIndex.matches(\".*[a-zA-Z]+.*\") || userIndex.contains(\"-\")){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return true; "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Calls the deleteTask method of the tasklist"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task done)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Integer indexFromUser \u003d Integer.parseInt(processedCommand); "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.doneTask(indexFromUser - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * This class is where the main classes of the class are instantiated."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The constructor initiates the storage, tasklist and parser objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Duke() throws DukeException{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.filepath \u003d \"../resources/data/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskList \u003d storage.loadStorage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.parser \u003d new Parser(storage, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return the parser used for \u0027cleaning\u0027 and executing commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Parser getParser(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 24,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A custom exception class detailing the error messages."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param errorMessage takes in the error message and instantiates its parent class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DukeException(String errorMessage){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 14
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Event command is used to create Event tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String taskName; "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for EventCommand class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public EventCommand(String command, String taskName,TaskList taskList ){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(command, taskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Also creates a new event task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] deadlineArray1 \u003d super.command.split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(deadlineArray1.length \u003c 2){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The date of an event cannot be empty.\"); "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String newTaskName1 \u003d taskName.split(\"/\")[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] timeArray \u003d taskName.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String startingDateTimeString \u003d timeArray[timeArray.length - 2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String endingDateTimeString \u003d timeArray[timeArray.length - 1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            LocalDateTime startingDateTime \u003d LocalDateTime.parse(startingDateTimeString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            LocalDateTime endingDateTime \u003d LocalDateTime.parse(endingDateTimeString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            EventsTask newTask2 \u003d new EventsTask (false, newTaskName1, startingDateTime, endingDateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String toPrint2 \u003d taskList.add(newTask2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return toPrint2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! Date time format is wrong!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return processedCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 58
    }
  },
  {
    "path": "src/main/java/EventsTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks that are events"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "class EventsTask extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime startingDateTime ; "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime endingDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for EventsTask class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param startingDateTime starting date of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param endingDateTime ending date of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public EventsTask (Boolean status, String message, "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime startingDateTime, LocalDateTime endingDateTime){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(status, message, \"[E]\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.startingDateTime \u003d startingDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.endingDateTime \u003d endingDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the EventTask"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[✓]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String formattedStartingDateTime \u003d String.valueOf(startingDateTime.getDayOfMonth()) + \" \" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(startingDateTime.getMonth()) + \" \" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(startingDateTime.getHour()) + "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(startingDateTime.getMinute()) +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        \" hours\" ;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String formattedEndingDateTime \u003d String.valueOf(endingDateTime.getDayOfMonth()) + \" \" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(endingDateTime.getMonth()) + \" \" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(endingDateTime.getHour()) + "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String.valueOf(endingDateTime.getMinute()) +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        \" hours\" ;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return super.type + doneString + \" \" + super.message +\" (at: \" + formattedStartingDateTime.toString()  + \" to \" +formattedEndingDateTime.toString() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"1\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"E|\" +doneString + \"|\"+ super.message+ \"|\" + startingDateTime.toString() +\"|\"+ endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else if (! super.status){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"0\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"E|\" +doneString + \"|\"+ super.message+ \"|\" + startingDateTime.toString() +\"|\"+ endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            assert false : \"Status of a event must be a boolean!\" ;  "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Status is not a boolean!\";         "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 76
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Find command is used to create find tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for FindCommand class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public FindCommand(String command, TaskList taskList ){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(command, taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return super.command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Calls the getTask method of the tasklist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds the task to a new taskList if the task contains the keyword"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task deleted)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(processedCommand.contains(\"#\")){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return executeTagCommand(processedCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return executeNormalFindCommand(processedCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Abstraction of finding a tag. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string containing the tasks that contain this tag."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String executeTagCommand(String tagName){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        TaskList taskListsWithKeyWords \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        int length \u003d super.taskList.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        for(int i \u003d 0; i \u003c length; i++){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Task currentTask \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            ArrayList \u003cString\u003e tagList \u003d currentTask.getTagList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            for (int j\u003d 0; j \u003c tagList.size(); j ++){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                if(tagList.get(j).equals(tagName)){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    taskListsWithKeyWords.add(currentTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(taskListsWithKeyWords.size() \u003c 1){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Cannot find any tasks with that tag! \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return taskListsWithKeyWords.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Abstraction of finding a string. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string containing the tasks that contain this string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String executeNormalFindCommand(String tagName){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        TaskList taskListsWithKeyWords \u003d new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        int length \u003d super.taskList.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        for(int i \u003d 0; i \u003c length; i++){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Task currentTask \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(currentTask.getMessage().contains(tagName)){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                taskListsWithKeyWords.add(currentTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(taskListsWithKeyWords.size() \u003c 1){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Cannot find any tasks with that keyword! \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return taskListsWithKeyWords.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 95
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            URL url \u003d Main.class.getResource(\"/MainWindow.fxml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(url);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(url);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            duke \u003d new Duke();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } catch(DukeException e){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 35
    }
  },
  {
    "path": "src/main/java/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" styleClass\u003d\"text-field\" stylesheets\u003d\"@../resources/view/DarkTheme.css\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" stylesheets\u003d\"@../resources/view/DarkTheme.css\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"scroll-bar\" stylesheets\u003d\"@../resources/view/DarkTheme.css\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"background\" stylesheets\u003d\"@../../../../../Address-Book/addressbook-level3/src/main/resources/view/DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 19
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.FileInputStream; "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Image userImage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Image dukeImage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * A workaround for getResourceAsStream()."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Uses FileInputStream rather than the above method."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a new Image which can be added to the dialog box control"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Image getImages(String input){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return new Image(new FileInputStream(input));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(\"Cannot find file\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return new Image(this.getClass().getResourceAsStream(input));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        userImage \u003d getImages(\"C:/Users/Tan Ye Kai/Documents/Uni work/Y2S1/CS2103T/Tutorials/Project 1/duke/src/main/resources/images/DaUser.png\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        dukeImage \u003d getImages(\"C:/Users/Tan Ye Kai/Documents/Uni work/Y2S1/CS2103T/Tutorials/Project 1/duke/src/main/resources/images/DaDuke.png\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            response \u003d duke.getParser().parse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            response \u003d e.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 74
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Parser class takes in the command passes the command to the correct "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * command class."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Parser{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Parser(Storage storage, TaskList taskList){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The parse method is the \u0027main\u0027 method of the parser class and basically"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * a switch case statement that calls the right command based on the "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * first word of the command (e.g. \u0027done\u0027/\u0027bye\u0027/\u0027list\u0027)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param line takes in the command that the user types"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string that corresponds to the command given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @throws DukeException "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String parse (String line) throws DukeException{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        switch (line){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return new Response( \"Bye. Hope to see you again soon!\").toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return new Response(taskList.toString()).toString(); "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String inputnoun \u003d line.split(\" \")[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                if (line.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\"); "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String taskName \u003d line.split(\" \", 2) [1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                switch (inputnoun){    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    case \"done\" :"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        Command doneCommand \u003d new DoneCommand(line, taskList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String processedDoneCommand \u003d doneCommand.processCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String doneResponse \u003d doneCommand.execute(processedDoneCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        storage.save();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        return new Response(doneResponse).toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    case \"todo\" :"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        Command toDoCommand \u003d new ToDoCommand(line, taskName, taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String processedtoDoCommand \u003d toDoCommand.processCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String toDoResponse \u003d toDoCommand.execute(processedtoDoCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        storage.save();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        return new Response(toDoResponse).toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    case \"deadline\" :"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        Command deadLineCommand \u003d new DeadLineCommand(line, taskName, taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String processeddeadLineCommand \u003d deadLineCommand.processCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String deadlineResponse \u003d deadLineCommand.execute(processeddeadLineCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        storage.save();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        return new Response(deadlineResponse).toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    case \"event\" :"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        Command eventCommand \u003d new EventCommand(line, taskName, taskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String processedeventCommand \u003d eventCommand.processCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String eventResponse \u003d eventCommand.execute(processedeventCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        storage.save();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        return new Response(eventResponse).toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "          "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    case \"find\" :"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        Command findCommand \u003d new FindCommand(taskName, taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String processedCommand \u003d findCommand.processCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String response \u003d findCommand.execute(processedCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        return new Response(response).toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    case \"delete\" :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        Command deleteCommand \u003d new DeleteCommand(line, taskName, taskList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String processedDeleteCommand \u003d deleteCommand.processCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String deleteResponse \u003d deleteCommand.execute(processedDeleteCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        storage.save();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        return new Response(deleteResponse).toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    case \"tag\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        Command TagCommand \u003d new TagCommand(line, taskName, taskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String processedTagCommand \u003d TagCommand.processCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String tagResponse \u003d TagCommand.execute(processedTagCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        return new Response(tagResponse).toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"); "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 94
    }
  },
  {
    "path": "src/main/java/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A wrapper class for the responses of each task (e.g. deleteTask returns the string \"Task deleted\")"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Response (String response){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 16
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Storage class deals with the storing of the tasks in memory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Storage (String filepath){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The loadStorage method reads the txt file for information about the tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * It then processes the tasks and stores it in the taskList class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a taslist contaning the stored information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public TaskList loadStorage() throws DukeException{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try (BufferedReader br \u003d new BufferedReader(new FileReader(filepath))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               String[] currentTaskArray \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               String taskCategory \u003d currentTaskArray[0].replace(\" \",\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               String currentStatus \u003d currentTaskArray[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               Boolean currentstatusBoolean;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               if(currentStatus.equals(\"0\")){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                   currentstatusBoolean \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               }else{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                   currentstatusBoolean \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               String taskName \u003d currentTaskArray[2];    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               if(taskCategory.equals(\"T\")){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    ToDoTask newTask \u003d new ToDoTask (currentstatusBoolean, taskName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    taskList.fileAdd(newTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               }else if(taskCategory.equals(\"D\")){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                   String deadline \u003d currentTaskArray[3];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                   LocalDateTime endingDateTime \u003d LocalDateTime.parse(deadline);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                   DeadlinesTask newTask \u003d new DeadlinesTask (currentstatusBoolean, taskName, endingDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                   taskList.fileAdd(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               }else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    String startingDateTimesString \u003d currentTaskArray[3];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    String endingDateTimesString \u003d currentTaskArray[4];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                                        "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    LocalDateTime startingDateTime \u003d LocalDateTime.parse(startingDateTimesString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    LocalDateTime endingDateTime \u003d LocalDateTime.parse(endingDateTimesString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    EventsTask newTask \u003d new EventsTask (currentstatusBoolean, taskName, startingDateTime, endingDateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    taskList.fileAdd(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "               }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"Cannot read file!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Saves the current tasklist to a txt file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void save(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filepath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            for(int i \u003d 0; i \u003c taskList.size(); i ++){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                writer.write(taskList.getTask(i).toFileFormat());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch (Exception e){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 86
    }
  },
  {
    "path": "src/main/java/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Tag command is used tag the task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for TagCommand class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public TagCommand(String command, String taskName, TaskList taskList ){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(command, taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] tagCommandArray \u003d taskName.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String userInputIndex \u003d tagCommandArray[0] ;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Integer tagIndex \u003d Integer.parseInt(userInputIndex) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String tagName \u003d tagCommandArray[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(! tagName.contains(\"#\")){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"Tag should contain the # at the start!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String message \u003d taskList.addTag(tagIndex, tagName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Creates a new Todo task and adds that task to the tasklist"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task added)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return processedCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 47
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.ArrayList; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks that are events"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "class Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected boolean status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected ArrayList \u003cString\u003e tagList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for EventsTask class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param type indicates the type of the task (e.g. Events/ToDo/Deadlines)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Task (Boolean status, String message, String type){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        tagList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Sets the status of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void setStatus(boolean status){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * A getter function to get the message of the task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public ArrayList\u003cString\u003e getTagList(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *Adds a new tag to the arraylist containing all the tags."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void addTag(String tag){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        tagList.add(tag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the Task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(status){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[✓]\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return type + doneString + \" \" + message;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return \"dummy\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 84
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * This task represents all the tasks stored by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class TaskList{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private ArrayList \u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public TaskList (){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList \u003d new ArrayList \u003cTask\u003e ();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns an integer representing the number of tasks in the tasklist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds a new task to the tasklist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Called by the storage class. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Differs from the add() method by not providing a print statements."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param newTask "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void fileAdd(Task newTask){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds a new task to the tasklist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param newTask"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns a string detailing the process."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String add(Task newTask){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\" +\"\\n\" );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(newTask.toString() +\"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(String.format(\"Now you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Deletes a task from the tasklist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index This index represents the index in which the task is placed in the arraylist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns a string detailing the process."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String deleteTask(int index){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task:\" +\"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(taskList.get(index) +\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(String.format(\"Now you have %d tasks in the list.\", taskList.size() ));        "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Gets the task from the arraylist of taks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index This index represents the index in which the task is placed in the arraylist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns the task from the arraylist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Task getTask(int index){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Marks the chosen task as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index This index represents the index in which the task is placed in the arraylist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns a string detailing the process."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String doneTask(int index){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Task currentTask \u003d taskList.get(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        currentTask.setStatus(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + currentTask;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds a tag to a specified task. Provides funcitonality for the tagging of "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * an event."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String addTag(int index, String tagName){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.get(index).addTag(tagName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve tagged this task as \" +tagName;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns a string representation of a taglist "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        int size \u003d taskList.size();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        for(int i \u003d 0; i \u003c size; i ++){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Integer number \u003d i + 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String message \u003d number + \". \" + taskList.get(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(i \u003c size - 1){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                sb.append(message + \"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                sb.append(message);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 122
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * ToDo command is used to create ToDo tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for ToDoCommand class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param command takes in the raw commmand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public ToDoCommand(String command, String taskName, TaskList taskList ){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(command, taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        // refactor this?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Creates a new Todo task and adds that task to the tasklist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task added)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        ToDoTask newTask \u003d new ToDoTask (false, processedCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String toPrint \u003d taskList.add(newTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 40
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks that are to-do"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "class ToDoTask extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for ToDoTask class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public ToDoTask (Boolean status, String message){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(status, message, \"[T]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the ToDoTask"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[✓]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return super.type + doneString + \" \" + super.message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"T|\" +doneString +\"|\" + super.message + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else if (! super.status){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"0\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"T|\" +doneString +\"|\" + super.message + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            assert false : \"Status of a event must be a boolean!\" ;  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Status is not a boolean!\";   "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 51
    }
  },
  {
    "path": "src/main/resources/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "D|1|return book|2019-03-21T20:50"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "E|0|project meeting|2019-01-20T06:30|2019-01-20T07:30"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|asd"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|0|do asd"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "E|0|project meeting |2019-01-20T06:30|2019-01-20T07:30"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 5
    }
  },
  {
    "path": "src/main/resources/examples.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "deadline return book /by 6/apr/2020/20/33"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "event project meeting /at 3/oct/2019/18/00/3/oct/2019/19/00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "D|0|return book|6 June 2019 14 00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "E|0|project meeting|6 Aug 2019 14 00 16 00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|join sports club"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 8
    }
  },
  {
    "path": "src/main/resources/newExamples.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "** INPUT FORMAT **"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "deadline return book /by 2019-03-21T20:50:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "event project meeting /at 2019-01-20T06:30:00 2019-01-20T07:30:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "** STORAGE FORMAT **"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "D|0|return book|2019-03-21T20:50:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "E|0|project meeting|2019-01-20T06:30:00|2019-01-20T07:30:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|join sports club"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 11
    }
  },
  {
    "path": "src/test/java/DeadlinesTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DeadlinesTaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-03-21T20:50:00\");  "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"[D][✓] return book (by: 21 MARCH 2050 hours)\", "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new DeadlinesTask(true, \"return book\", endingTimeStub).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToFileFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-03-21T20:50:00\");  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"D|1|return book|2019-03-21T20:50\\n\", "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new DeadlinesTask(true, \"return book\", endingTimeStub).toFileFormat());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 22
    }
  },
  {
    "path": "src/test/java/EventsTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class EventsTaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime startingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T06:30:00\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T07:30:00\");  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"[E][✓] project meeting (at: 20 JANUARY 630 hours to 20 JANUARY 730 hours)\", "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new EventsTask(true, \"project meeting\",startingTimeStub, endingTimeStub).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToFileFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime startingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T06:30:01\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T07:30:01\");  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"E|1|project meeting|2019-01-20T06:30:01|2019-01-20T07:30:01\\n\", "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new EventsTask(true, \"project meeting\",startingTimeStub, endingTimeStub).toFileFormat());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 24
    }
  },
  {
    "path": "src/test/java/ToDoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class ToDoTaskTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"[T][✓] join sports club\", "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new ToDoTask(true, \"join sports club\").toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToFileFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"T|1|join sports club\\n\", "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new ToDoTask(true, \"join sports club\").toFileFormat());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 17
    }
  }
]
