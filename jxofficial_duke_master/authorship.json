[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Event | T | Project Meeting (at: 28/08/19 1600 - 28/08/19 1800)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Todo | F | read books"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Todo | T | pay attention"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 3
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Driver class for Duke operations"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * @author JXKENG"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String filePath \u003d \"C:/Users/jxken/Desktop/Github/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Starting point for duke commands and actions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param args command line arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        TaskList tasks \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        UI ui \u003d new UI(tasks, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ui.sayHi();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String fullCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(\"\\t â˜¹ OOPS!!! \" + e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                UI.printLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 43,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/FileReaderHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Helper class for converting task strings from file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * to \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class FileReaderHandler {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for FileReaderHandler class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks A \u003ccode\u003eTaskList\u003c/code\u003e object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public FileReaderHandler(TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads file and converts each line to \u003ccode\u003eTask\u003c/code\u003e and"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * adds each task to the \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskType    A \u003ccode\u003eString\u003c/code\u003e representing the type of task e.g., \"TODO\", \"DEADLINE\", \"EVENT\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A \u003ccode\u003eboolean\u003c/code\u003e indicating if the task is completed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskString  A \u003ccode\u003eString\u003c/code\u003e representing taskName and taskDetails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void readLineFromFileToList(String taskType, boolean isCompleted, String taskString) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            case \"TODO\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                tasks.addTask(new Todo(taskString, isCompleted), false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            case \"DEADLINE\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String[] deadlineParts \u003d taskString.split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String deadlineText \u003d deadlineParts[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    tasks.addTask(new Deadline(deadlineText, deadlineParts[1], isCompleted), false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                } catch (ParseException error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    System.out.println(error.getMessage() + \". Please make sure date from file is in this format DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            case \"EVENT\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String[] eventParts \u003d taskString.split(\" \\\\(at: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String eventText \u003d eventParts[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    tasks.addTask(new Event(eventText, eventParts[1], isCompleted), false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                } catch (ParseException error) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    System.out.println(error.getMessage() + \". Please enter date from file in this format DD/MM/YYYY HHMM - DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t â˜¹ OOPS!!! \" + error.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 64
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Helper class for parsing Duke commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses and executes Duke commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param fullCommand A \u003ccode\u003eString\u003c/code\u003e representing the full input command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] parts \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String command \u003d parts[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String commandInformation \u003d fullCommand.substring(command.length()).stripLeading();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new ExitCommand(commandInformation);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new ListCommand(commandInformation);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new MarkAsDoneCommand(commandInformation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new DeleteTaskCommand(commandInformation);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CreateTodoCommand(commandInformation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CreateDeadlineCommand(commandInformation);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CreateEventCommand(commandInformation);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new FindTaskCommand(commandInformation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 44
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * This class deals with reading-write processes of disk files"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private File tasksFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Storage class, which creates a file given a filepath"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param filePath A filepath in \u003ccode\u003eString\u003c/code\u003e format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.tasksFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Write tasks from list into file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks A \u003ccode\u003eTaskList\u003c/code\u003e object that will be the source to write into the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void writeToTasksFile(TaskList tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(tasksFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String fileString \u003d task.convertTaskToFileString() + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                fileWriter.write(fileString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(error.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * Read tasks from file into list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * @param tasks A \u003ccode\u003eTaskList\u003c/code\u003e object which will be the destination"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         *              for each \u003ccode\u003eTask\u003c/code\u003e read from file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * @throws FileNotFoundException if file is not found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        public void readFromTasksFileToList (TaskList tasks) throws FileNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            FileReaderHandler fileReaderHandler \u003d new FileReaderHandler(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Scanner sc \u003d new Scanner(tasksFile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String fileLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String[] parts \u003d fileLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String taskType \u003d parts[0].toUpperCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                boolean isCompleted \u003d parts[1].equals(\"T\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String taskString \u003d parts[2];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                fileReaderHandler.readLineFromFileToList(taskType, isCompleted, taskString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 70
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.EmptyTodoTextException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * This class encapsulates methods and fields related to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * direct operations on the list of \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for \u003ccode\u003eTaskList\u003c/code\u003e class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskList A \u003ccode\u003eList\u003c/code\u003e object containing objects of type \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui       A \u003ccode\u003eUI\u003c/code\u003e object that handles UI output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TaskList(List taskList, UI ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for \u003ccode\u003eTaskList\u003c/code\u003e class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Creates a new \u003ccode\u003eTaskList\u003c/code\u003e instance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage A \u003ccode\u003eStorage\u003c/code\u003e object used to initialize a new \u003ccode\u003eUI\u003c/code\u003e instance"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.ui \u003d new UI(this, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Adds task to \u003ccode\u003eTaskList\u003c/code\u003e object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task         A \u003ccode\u003eTask\u003c/code\u003e instance to be added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param printMessage A \u003ccode\u003eboolean\u003c/code\u003e which specifies whether a message should be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                     printed upon successful adding of task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws EmptyTodoTextException if taskName is blank"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void addTask(Task task, boolean printMessage) throws EmptyTodoTextException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (task.getTaskName().isBlank()) throw new EmptyTodoTextException(\"The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (printMessage) ui.printAddTaskMessage(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints tasks in the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ui.printTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Marks a task as completed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskNumber   integer representing the number of the task to be marked as completed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param printMessage A \u003ccode\u003eboolean\u003c/code\u003e which specifies whether a message should be"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                     printed upon successful adding of task"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not correspond to task in list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void markTaskAsCompleted(int taskNumber, boolean printMessage) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskNumber \u003c 1 || taskNumber \u003e taskList.size()) throw new TaskDoesNotExistException(\"Task not found\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        task.markAsCompleted();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (printMessage) ui.printMarkTaskAsCompletedMessage(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Deletes a task given its taskNumber"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskNumber   integer representing the number of the task to be marked as completed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param printMessage A \u003ccode\u003eboolean\u003c/code\u003e which specifies whether a message should be"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                     printed upon successful adding of task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not correspond to task in list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void deleteTask(int taskNumber, boolean printMessage) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskNumber \u003e taskList.size()) throw new TaskDoesNotExistException(\"Task not found\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        taskList.remove(task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (printMessage) ui.printDeleteTaskMessage(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Gets list from \u003ccode\u003eTaskList\u003c/code\u003e object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eList\u003c/code\u003e object which contains list matching search results"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public List\u003cTask\u003e findMatchingTasks(String searchTerm) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (task.getTaskName().toLowerCase().contains(searchTerm.toLowerCase())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 116
    }
  },
  {
    "path": "src/main/java/duke/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Helper class for displaying user interface messages"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for UI class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   A \u003ccode\u003eTaskList\u003c/code\u003e object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage A \u003ccode\u003eStorage\u003c/code\u003e object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public UI(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints goodbye message to console"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void sayBye() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.out.println(\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints hello message to console"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and retrieves previously saved state from local file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void sayHi() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.out.println(\"\\t Hello! I\u0027m Duke.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            storage.readFromTasksFileToList(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t This is where you left off previously: \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t Fetching failed. \" + e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t Creating file now...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            File dukeTxt \u003d new File(Duke.filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                dukeTxt.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(\"\\t File created! \" + dukeTxt.getAbsolutePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(\"\\t Reading file...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(\"\\t File creation was not successful. \" + ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(\"\\t Exiting system.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        printTasks();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints line separator to console"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.out.println(\"\\t_______________________________\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints addTask success message"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task Task that was successfully added"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void printAddTaskMessage(Task task) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String pluralOrNot \u003d taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.out.println(\"\\t Got it. I\u0027ve added this task: \\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \"\\t  \" + task.toString() + \"\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \"\\t Now you have \" + list.size() + \" \" + pluralOrNot + \" in the list\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints list of \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void printTasks() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) System.out.println(\"\\t No pending tasks\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String pluralOrNot \u003d taskList.size() \u003d\u003d 1 ? \"Task\" : \"Tasks\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t \" + pluralOrNot);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.print(\"\\t \" + (i + 1) + \".\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(taskList.get(i));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints markTaskAsCompleted success message"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task Task that was successfully marked as completed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void printMarkTaskAsCompletedMessage(Task task) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.out.println(\"\\t Nice! I\u0027ve marked this task as done: \\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \"\\t  [âœ“] \" + task.getTaskName() + \" \" + task.getDetails());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints deleteTask success message"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task Task that was successfully deleted"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void printDeleteTaskMessage(Task task) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String pluralOrNot \u003d taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.out.println(\"\\t I\u0027ve removed this task: \\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \"\\t  [âœ“] \" + task.getTaskName() + \" \" + task.getDetails() + \"\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \"\\t Now you have \" + taskList.size() + \" \" + pluralOrNot + \" in the list\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void printSearchResults(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t You have no tasks that match the search query\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t Here are your search results: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.print(\"\\t \" + (i + 1) + \".\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(taskList.get(i));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 139
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * An abstract class meant to be inherited by commands in Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g., \u003ccode\u003elist\u003c/code\u003e, \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003edone\u003c/code\u003e commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    String commandInformation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Command class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Command class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param commandInformation Information related to command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                           e.g., \u003ccode\u003etaskName\u003c/code\u003e,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                           \u003ccode\u003etaskNumber\u003c/code\u003e,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                           \u003ccode\u003edeadLineDate\u003c/code\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Command(String commandInformation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.commandInformation \u003d commandInformation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes the command tied to each respective sub-class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and reads result of executed command into preset task.txt file as required"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public abstract void execute(TaskList tasks, UI ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Informs the caller if the command should result in program termination"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return A boolean specifying if program should terminate after command execution"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 57
    }
  },
  {
    "path": "src/main/java/duke/command/CreateDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003edeadline taskName /by DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CreateDeadlineCommand(String commandInformation) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format: \u003ccode\u003edeadline taskName /by DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String deadline \u003d this.commandInformation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] deadlineParts \u003d deadline.split(\" /by \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String deadLineText \u003d deadlineParts[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String by \u003d deadlineParts[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(new Deadline(deadLineText, by), true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t \" + error.getMessage() + \". Please enter date in this format DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 53
    }
  },
  {
    "path": "src/main/java/duke/command/CreateEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003eevent taskName /at DD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateEventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CreateEventCommand(String commandInformation) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003eevent taskName /at DD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String event \u003d this.commandInformation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] eventParts \u003d event.split(\" /at \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String eventText \u003d eventParts[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String at \u003d eventParts[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(new Event(eventText, at),true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (ParseException error) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"\\t \" + error.getMessage() + \". Please enter date in this format DD/MM/YYYY HHMM - DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 52
    }
  },
  {
    "path": "src/main/java/duke/command/CreateTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003etodo taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateTodoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CreateTodoCommand(String commandInformation) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003etodo taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String todoText \u003d commandInformation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        tasks.addTask(new Todo(todoText), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003edelete taskNumberToDelete\u003c/code\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public DeleteTaskCommand(String commandInformation) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003edelete taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not exist in taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(commandInformation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        tasks.deleteTask(taskNumber, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003ebye\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public ExitCommand(String taskInformation) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskInformation);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003ebye\u003c/code\u003e and prints goodbye message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ui.sayBye();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 38
    }
  },
  {
    "path": "src/main/java/duke/command/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public FindTaskCommand(String commandInformation) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String searchTerm \u003d this.commandInformation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e searchResultsList \u003d tasks.findMatchingTasks(searchTerm);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ui.printSearchResults(searchResultsList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 27
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands that are not recognised by Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands that are not recognized by Duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws InvalidCommandException whenever this overridden method is called."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003elist/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public ListCommand(String taskInformation) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskInformation);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Prints taskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        tasks.printTasks();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 35
    }
  },
  {
    "path": "src/main/java/duke/command/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003edone taskNumberToMarkAsDone\u003c/code\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MarkAsDoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public MarkAsDoneCommand(String taskInformation) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskInformation);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003edone taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                and various methods to operate on the taskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param ui      \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not exist in taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(commandInformation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        tasks.markTaskAsCompleted(taskNumber, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 41
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * An abstract class meant to be inherited by the various exceptions related to Duke operations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g., InvalidCommandException, EmptyTodoTextException"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructor for DukeExceptionClass"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param message A String containing information about the error"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jxofficial": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTodoTextException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract DukeException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles errors related to \u003ccode\u003etodo\u003c/code\u003e command with no follow up todoInformation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class EmptyTodoTextException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public EmptyTodoTextException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract DukeException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles errors related to invalid commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskDoesNotExistException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract DukeException class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles error when user tries to perform an operation on a task that does not exist in taskList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TaskDoesNotExistException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TaskDoesNotExistException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 12
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Represents a Duke \u003ccode\u003edeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected Date byDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Deadline class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003edeadline borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param by       A String for date-time in the format \u003ccode\u003eDD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Deadline(String taskName, String by) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.DEADLINE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.byDate \u003d formatter.parse(by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Deadline class"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    A String which represents the taskName"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003edeadline borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param by          A String for date-time in the format \u003ccode\u003eDD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Deadline(String taskName, String by, boolean isCompleted) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.DEADLINE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.byDate \u003d formatter.parse(by);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(by: \" + by;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Represents a Duke \u003ccode\u003eevent\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    Date date1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    Date date2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Event class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003eevent borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param at       A String represents two date-times"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 in the format \u003ccode\u003eDD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Event(String taskName, String at) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.EVENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] parts \u003d at.split(\" - \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date1 \u003d formatter.parse(parts[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date2 \u003d formatter.parse(parts[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(at: \" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Event class"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    A String which represents the taskName"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003eevent borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param at          A String represents two date-times"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    in the format \u003ccode\u003eDD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Event(String taskName, String at, boolean isCompleted) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.EVENT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] parts \u003d at.split(\" - \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date1 \u003d formatter.parse(parts[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date2 \u003d formatter.parse(parts[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(at: \" + at;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * An abstract class meant to be inherited by the types of Tasks that Duke accepts"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g., \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003eevent\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected TypeOfTask taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Task class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Task class"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    Information about the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskInformation is \"borrow books\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Task(String taskName, boolean isCompleted) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Converts task to String that will be scanned into preset task.text file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return A String representing the task in the specified format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String convertTaskToFileString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        char isCompleted \u003d this.isCompleted ? \u0027T\u0027 : \u0027F\u0027;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String taskType \u003d this.taskType.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String result \u003d taskType + \" | \" + isCompleted + \" | \" + this.taskName + \" \" + this.details;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return result.stripTrailing();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Mark task as completed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void markAsCompleted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Get name of task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return taskName in String format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Get details of task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return String representing extra details of task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Get entire task represented in a String"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return String representing a task instance"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        char symbol \u003d this.isCompleted ? \u0027âœ“\u0027 : \u0027âœ—\u0027;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String result \u003d \"[\" + taskType + \"][\" + symbol + \"] \" + taskName + \" \" + details;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return result.stripTrailing();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Represents a Duke \u003ccode\u003etodo\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Todo class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.TODO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Todo class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    A String which represents the taskName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Todo(String taskName, boolean isCompleted) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.TODO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 39
    }
  },
  {
    "path": "src/main/java/duke/task/TypeOfTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Enum that contains the various types of tasks accepted by Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g.,\u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e, \u003ccode\u003eevent\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public enum TypeOfTask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    TODO, DEADLINE, EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Enum represented in a String"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return String representing the enum"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String taskType \u003d super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return taskType.substring(0, 1) + taskType.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 20
    }
  },
  {
    "path": "src/test/java/CreateEventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.CreateEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateEventCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static String filePath \u003d \"C:\\\\Users\\\\jxken\\\\Desktop\\\\Github\\\\duke\\\\src\\\\test\\\\java\\\\dukeTest.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static TaskList tasks \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static UI ui \u003d new UI(tasks, storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void setUpStreamsAndEmptyFile() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void executeCreateEventCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String expectedSubString1 \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String expectedSubString2 \u003d \"[Event][âœ—] Project Meeting (at: 28/08/19 1600 - 28/08/19 1800)\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String expectedSubString3 \u003d \"Now you have 1 task in the list\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CreateEventCommand command \u003d new CreateEventCommand(\"Project Meeting /at 28/08/19 1600 - 28/08/19 1800\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"execute create event command test should pass, but it didn\u0027t \" + e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String actual \u003d outContent.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(actual.contains(expectedSubString1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(actual.contains(expectedSubString2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(actual.contains(expectedSubString3));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 69
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String FILE_PATH \u003d \"C:\\\\Users\\\\jxken\\\\Desktop\\\\Github\\\\duke\\\\src\\\\test\\\\java\\\\dukeTest.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Storage storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void setUpTaskListObject() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        tasks \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(new Todo(\"borrow books\"), false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(new Event(\"project meeting\", \"28/08/2019 1800 - 28/08/2019 2030\"), false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"Adding tasks, setup step should be successful. \" + e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void deleteTask_taskExists_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.deleteTask(1, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (TaskDoesNotExistException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"Task exists, this exception should not be thrown \" + e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(taskList.get(0).getTaskName(), \"project meeting\" );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void deleteTask_taskDoesNotExist_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.deleteTask(10, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (TaskDoesNotExistException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertEquals(\"Task not found\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 59
    }
  }
]
