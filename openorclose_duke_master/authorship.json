[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    archiveVersion \u003d \"0.1.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 21,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.PrintListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.task.AddDeadlineTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.task.AddEventTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.task.AddTodoTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import parser.CommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import parser.TaskParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import store.Store;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private CommandParser commandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private TaskParser taskParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Store store \u003d new Store(ui::error);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void main(String[] args) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.printWelcome();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.startRepl();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Duke(Ui ui, Store store) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.ui \u003d ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.store \u003d store;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    taskParser \u003d new TaskParser(ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    init();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Duke() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    taskParser \u003d new TaskParser(ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    init();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void init() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser \u003d new CommandParser(ui);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.add(new ByeCommand(ui::exit));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.add(new PrintListCommand(this::printList));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.add(new MarkAsDoneCommand(ui::error, this::findInListThenMarkAsDone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.add(new DeleteCommand(ui::error, this::findInListThenDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.add(new AddTodoTaskCommand(ui::error, this::addTaskToList));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.add(new AddEventTaskCommand(ui::error, this::addTaskToList));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.add(new AddDeadlineTaskCommand(ui::error, this::addTaskToList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    loadFromDiskToList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void printWelcome() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void startRepl() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    while (true) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      parseAndExecuteCommand(scanner.nextLine().trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void parseAndExecuteCommand(String command) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.parseAndExecuteCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    saveListToDisk();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void loadFromDiskToList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Scanner saveFileScanner \u003d store.retrieveDataAsScanner();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    while (saveFileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String serialized \u003d saveFileScanner.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      list.add(taskParser.fromSerial(serialized));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void saveListToDisk() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    store.saveDataIntoFile(list.stream().map(Task::serialise).collect(Collectors.joining(\"\\n\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  private void findInListThenMarkAsDone(int oneBasedIndex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    int itemIndex \u003d oneBasedIndex - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Task item \u003d list.get(itemIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    item.markAsDone();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(item.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void addTaskToList(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    list.add(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(task.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void findInListThenDelete(int oneBasedIndex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    int itemIndex \u003d oneBasedIndex - 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Task taskToDelete \u003d list.remove(itemIndex);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.println(taskToDelete.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    printNumberOfItemsInList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void printNumberOfItemsInList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ui.printf(\"Now you have %d task(s) in the list.\\n\", list.size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "  private void printList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    int length \u003d list.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      ui.println(\"Yay! You don\u0027t have any tasks!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else if (length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      ui.println(\"You have one task in your list:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      ui.println(\"1. \" + list.get(0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      ui.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      for (int itemIndex \u003d 0; itemIndex \u003c length; itemIndex +\u003d 1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        int oneBasedIndex \u003d itemIndex + 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ui.printf(\"%d. %s\\n\", oneBasedIndex, list.get(itemIndex));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 103,
      "-": 33
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Consumer\u003cString\u003e exitter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public ByeCommand(Consumer\u003cString\u003e exitter) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.exitter \u003d exitter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String name() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"bye\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void execute(String arguments) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    exitter.accept(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 22
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  String name();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void execute(String arguments);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 6
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import parser.ParserUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private ErrorOutputter errorOutputter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private final Consumer\u003cInteger\u003e deleter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public DeleteCommand(ErrorOutputter errorOutputter, Consumer\u003cInteger\u003e deleter) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.errorOutputter \u003d errorOutputter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.deleter \u003d deleter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String name() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void execute(String arguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ParserUtils.generateConsumerExpectingInteger(oneBasedIndex -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        deleter.accept(oneBasedIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        errorOutputter.accept("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            String.format(\"Opps! I could not delete item %d in your list as it does not exist.\\n\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                oneBasedIndex));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }, errorOutputter).accept(arguments);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 34
    }
  },
  {
    "path": "src/main/java/command/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import parser.ParserUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class MarkAsDoneCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private ErrorOutputter errorOutputter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private final Consumer\u003cInteger\u003e doneMarker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public MarkAsDoneCommand(ErrorOutputter errorOutputter, Consumer\u003cInteger\u003e doneMarker) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.errorOutputter \u003d errorOutputter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.doneMarker \u003d doneMarker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String name() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void execute(String arguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ParserUtils.generateConsumerExpectingInteger(oneBasedIndex -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        doneMarker.accept(oneBasedIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        errorOutputter.accept(String.format(\"Opps! I could not find item %d in your list.\\n\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            oneBasedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }, errorOutputter).accept(arguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 33
    }
  },
  {
    "path": "src/main/java/command/PrintListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class PrintListCommand implements Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private final Runnable listPrinter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public PrintListCommand(Runnable listPrinter) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.listPrinter \u003d listPrinter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String name() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void execute(String arguments) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    listPrinter.run();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 20
    }
  },
  {
    "path": "src/main/java/command/task/AddDeadlineTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class AddDeadlineTaskCommand extends AddTimedTaskCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public AddDeadlineTaskCommand(ErrorOutputter errorOutputter,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      Consumer\u003cTask\u003e taskAdder) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(errorOutputter, taskAdder, DeadlineTask::new);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  String separator() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return DeadlineTask.ARGUMENTS_SEPARATOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String name() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/main/java/command/task/AddEventTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class AddEventTaskCommand extends AddTimedTaskCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public AddEventTaskCommand(ErrorOutputter errorOutputter,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      Consumer\u003cTask\u003e taskAdder) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(errorOutputter, taskAdder, EventTask::new);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  String separator() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return EventTask.ARGUMENTS_SEPARATOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String name() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"event\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/main/java/command/task/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public abstract class AddTaskCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  protected final ErrorOutputter errorOutputter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private final Consumer\u003cTask\u003e taskAdder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  AddTaskCommand(ErrorOutputter errorOutputter, Consumer\u003cTask\u003e taskAdder) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.errorOutputter \u003d errorOutputter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.taskAdder \u003d taskAdder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  abstract Task generateTask(String arguments);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void execute(String arguments) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      errorOutputter.accept(\"Opps! I expected a description of your task.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      Task task \u003d generateTask(arguments);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (task !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        taskAdder.accept(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 31
    }
  },
  {
    "path": "src/main/java/command/task/AddTimedTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import parser.TaskParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "abstract class AddTimedTaskCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private final BiFunction\u003cString, LocalDateTime, Task\u003e constructor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  AddTimedTaskCommand(ErrorOutputter errorOutputter,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      Consumer\u003cTask\u003e taskAdder, BiFunction\u003cString, LocalDateTime, Task\u003e constructor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(errorOutputter, taskAdder);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.constructor \u003d constructor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  abstract String separator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  Task generateTask(String arguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return TaskParser.generateTimedTaskParser(separator(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        constructor, errorOutputter"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    ).apply(arguments);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 28
    }
  },
  {
    "path": "src/main/java/command/task/AddTodoTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package command.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class AddTodoTaskCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public AddTodoTaskCommand(ErrorOutputter errorOutputter,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      Consumer\u003cTask\u003e taskAdder) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(errorOutputter, taskAdder);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  Task generateTask(String arguments) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return new ToDoTask(arguments);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String name() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"todo\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/main/java/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Parser\u003cVoid\u003e parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public CommandParser(Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.parser \u003d new Parser\u003cVoid\u003e(ui);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void add(Command command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    addCommand(command.name(), command::execute);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void addCommand(String command, Consumer\u003cString\u003e evaluator) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addSubParser(command, string -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      evaluator.accept(string);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void parseAndExecuteCommand(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.parse(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 29
    }
  },
  {
    "path": "src/main/java/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static final DateTimeFormatter FORMAT \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      DateTimeFormatter.ofPattern(\"dd/MM/uuuu HHmm\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          .withResolverStyle("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              ResolverStyle.STRICT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          );"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static LocalDateTime stringToDate(String dateString) throws DateTimeParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return LocalDateTime.parse(dateString, DateParser.FORMAT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static String dateToString(LocalDateTime date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return date.format(DateParser.FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 23
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private HashMap\u003cString, Function\u003cString, T\u003e\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Parser(Ui ui) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void addSubParser(String name, Function\u003cString, T\u003e evaluator) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commands.put(name, evaluator);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public T parse(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String command \u003d trimmedInput.split(\" \")[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (commands.containsKey(command)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return commands.get(command).apply(trimmedInput.substring(command.length()).trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      ui.error(String.format(\"Opps! I did not understand what you meant by \u0027%s\u0027\\n\", trimmedInput));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 32
    }
  },
  {
    "path": "src/main/java/parser/ParserUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiConsumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ParserUtils {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static Consumer\u003cString\u003e generateConsumerExpectingInteger(Consumer\u003cInteger\u003e consumer, ErrorOutputter errorOutputter) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return integerString -\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        consumer.accept(Integer.parseInt(integerString));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        errorOutputter.accept(\"Opps! I expected an integer as the argument\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static \u003cR\u003e Function\u003cString, R\u003e generateFunctionSplittingAtFirstSpace("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiFunction\u003cString, String, R\u003e biFunction) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return spaceSeparatedString -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String[] arguments \u003d spaceSeparatedString.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return biFunction.apply(arguments[0], arguments[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static Consumer\u003cString\u003e generateConsumerToParseTwoArguments(String splitAt,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiConsumer\u003cString, String\u003e consumer, ErrorOutputter errorOutputter) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return argumentString -\u003e generateFunctionToParseTwoArguments(splitAt, (left, right) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      consumer.accept(left, right);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }, errorOutputter).apply(argumentString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static \u003cR\u003e Function\u003cString, R\u003e generateFunctionToParseTwoArguments(String splitAt,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiFunction\u003cString, String, R\u003e biFunction, ErrorOutputter errorOutputter) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return argumentString -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (!argumentString.contains(splitAt)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        errorOutputter.accept(String.format(\"Opps! I expected two arguments separated by \u0027%s\u0027.\\n\", splitAt));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      argumentString +\u003d \" \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String[] arguments \u003d argumentString.split(splitAt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      int length \u003d arguments.length;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (length \u003e 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String first \u003d arguments[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String last \u003d arguments[length - 1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String allButFirst \u003d argumentString.substring(first.length() + splitAt.length());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String allButLast \u003d argumentString"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .substring(0, argumentString.length() - last.length() - splitAt.length());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        errorOutputter.accept(String.format(\"Opps! I see %d \u0027%s\u0027s, and cannot be sure what you wanted. \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"For example, you could mean:\\n\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t%s\\n\\t%s\\n\\t%s\\n\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t---OR---\\n\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t%s\\n\\t%s\\n\\t%s\\n\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"Do not use \u0027%s\u0027 in your arguments to avoid this issue.\\n\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            length - 1, splitAt, first.trim(), splitAt, allButFirst.trim(), allButLast.trim(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            splitAt,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            last.trim(), splitAt));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String left \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String right \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (\"\".equals(left + right)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          errorOutputter.accept(String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the left and right of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else if (left.equals(\"\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          errorOutputter.accept(String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the left of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else if (right.equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          errorOutputter.accept(String.format("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the right of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          return biFunction.apply(left, right);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 85
    }
  },
  {
    "path": "src/main/java/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import command.task.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.DeadlineTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.EventTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import task.ToDoTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Parser\u003cTask\u003e parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public TaskParser(Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.parser \u003d new Parser\u003c\u003e(ui);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    addTaskSubParser(ToDoTask.TO_DO_SYMBOL, ToDoTask::new);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    addTaskSubParser(EventTask.EVENT_TASK_SYMBOL,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        TaskParser.generateTimedTaskParser(EventTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            EventTask::new, ui::error"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    addTaskSubParser(DeadlineTask.DEADLINE_TASK_SYMBOL,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        TaskParser.generateTimedTaskParser(DeadlineTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            DeadlineTask::new, ui::error));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void addTaskSubParser(char type, Function\u003cString, Task\u003e creator) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Function\u003cString, Task\u003e isDoneIntermediateParser \u003d ParserUtils"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        .generateFunctionSplittingAtFirstSpace((isDoneString, rest) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          boolean isDone \u003d Boolean.parseBoolean(isDoneString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          Task task \u003d creator.apply(rest);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          if (isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          return task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addSubParser(String.valueOf(type), isDoneIntermediateParser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Task fromSerial(String serial) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return parser.parse(serial);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static Function\u003cString, Task\u003e generateTimedTaskParser("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String separator,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiFunction\u003cString, LocalDateTime, Task\u003e timedTaskConstructor,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      ErrorOutputter errorOutputter) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return ParserUtils.generateFunctionToParseTwoArguments(separator, (description, dateString) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return timedTaskConstructor.apply(description, DateParser.stringToDate(dateString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        errorOutputter.accept(\"Opps! I expected a date in the format: DD/MM/YYYY HHmm\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"\\n\\t(e.g. 31/01/2019 2359)\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }, errorOutputter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 62
    }
  },
  {
    "path": "src/main/java/store/Store.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package store;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import type.ErrorOutputter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static final String DEFAULT_SAVE_FILE_PATH \u003d \"data.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private String filePath \u003d Store.DEFAULT_SAVE_FILE_PATH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private ErrorOutputter errorOutputter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Store() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Store(ErrorOutputter errorOutputter) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.errorOutputter \u003d errorOutputter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Store(String filePath, ErrorOutputter errorOutputter) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.errorOutputter \u003d errorOutputter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Scanner retrieveDataAsScanner() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return new Scanner(new File(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      saveDataIntoFile(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return retrieveDataAsScanner();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void saveDataIntoFile(String data) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      bufferedWriter.write(data);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      bufferedWriter.flush();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      bufferedWriter.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      errorOutputter.accept(\"Opps! Unable to save to file.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 49
    }
  },
  {
    "path": "src/main/java/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DeadlineTask extends TimedTask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final char DEADLINE_TASK_SYMBOL \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static final String SEPARATOR \u003d \"by\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final String ARGUMENTS_SEPARATOR \u003d \"/\" + SEPARATOR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public DeadlineTask(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description, by);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String separator() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return DeadlineTask.SEPARATOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public char symbol() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return DeadlineTask.DEADLINE_TASK_SYMBOL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/main/java/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class EventTask extends TimedTask {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static final String SEPARATOR \u003d \"at\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final String ARGUMENTS_SEPARATOR \u003d \"/\" + SEPARATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final char EVENT_TASK_SYMBOL \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public EventTask(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description, at);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String separator() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return EventTask.SEPARATOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public char symbol() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return EventTask.EVENT_TASK_SYMBOL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static char DONE_SYMBOL \u003d \u0027/\u0027; // tick"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static char NOT_DONE_SYMBOL \u003d \u0027X\u0027; //cross"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public abstract char symbol();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"[%c][%c] %s\", symbol(), getStatusIcon(), description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String serialise() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"%c %b %s\", symbol(), isDone, description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private char getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return isDone ? DONE_SYMBOL : NOT_DONE_SYMBOL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 32
    }
  },
  {
    "path": "src/main/java/task/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private LocalDateTime time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public TimedTask(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.time \u003d time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public abstract String separator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String serialise() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        \"%s /%s %s\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        super.serialise(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        separator(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DateParser.dateToString(time)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        .format(\"%s (:%s %s)\", super.toString(), separator(), DateParser.dateToString(time));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 32
    }
  },
  {
    "path": "src/main/java/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final char TO_DO_SYMBOL \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public ToDoTask(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public char symbol() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return ToDoTask.TO_DO_SYMBOL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 15
    }
  },
  {
    "path": "src/main/java/type/ErrorOutputter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package type;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public interface ErrorOutputter extends Consumer\u003cString\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 7
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void print(String string) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.print(string);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void println(String string) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(string);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void printf(String format, Object... args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.printf(format, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void error(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void exit(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import store.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testTodo() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke(ui, new StoreWrapper());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"todo work\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"1. [T][X] work\\n\", ui.getLastMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testEvent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke(ui, new StoreWrapper());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"event test /at 12/12/2012 1212\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"1. [E][X] test (:at 12/12/2012 1212)\\n\", ui.getLastMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testEventWrongArguments1() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke(ui, new StoreWrapper());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"event test /at abc\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"Opps! I expected a date in the format: DD/MM/YYYY HHmm\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        + \"\\t(e.g. 31/01/2019 2359)\", ui.getLastError());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testEventWrongArguments2() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke(ui, new StoreWrapper());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"event test /notat 123\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"Opps! I expected two arguments separated by \u0027/at\u0027.\\n\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ui.getLastError());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testDeadline() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke(ui, new StoreWrapper());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"deadline homework /by 12/12/2012 1212\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"1. [D][X] homework (:by 12/12/2012 1212)\\n\", ui.getLastMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testCommands() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke(ui, new StoreWrapper());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"Yay! You don\u0027t have any tasks!\\n\", ui.getLastMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testDeleteAndSaveAndLoadTasks() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Duke duke \u003d new Duke(ui, new Store(\"testing.txt\", ui::error));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"todo abc\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"event 123123 /at 12/12/2018 2000\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke \u003d new Duke(ui, new Store(\"testing.txt\", ui::error));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"2. [E][X] 123123 (:at 12/12/2018 2000)\\n\", ui.getLastMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"delete 1\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.parseAndExecuteCommand(\"list\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(\"1. [E][X] 123123 (:at 12/12/2018 2000)\\n\", ui.getLastMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertTrue(new File(\"testing.txt\").delete());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 81
    }
  },
  {
    "path": "src/test/java/StoreTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import store.Store;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class StoreTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static String testFile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static final String testData \u003d \"123123\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  static void initTestFile() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String path \u003d \"test\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    while (new File(path + \".txt\").exists()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      path +\u003d \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    StoreTest.testFile \u003d path + \".txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void testSaveAndRetrieveData() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    UiWrapper ui \u003d new UiWrapper();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Store store \u003d new Store(testFile, ui::error);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    store.saveDataIntoFile(testData);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(0, ui.getErrorsSize());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Scanner scanner \u003d store.retrieveDataAsScanner();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(0, ui.getErrorsSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    int lines \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      lines ++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (lines \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(testData, scanner.nextLine());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        scanner.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertEquals(1, lines);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    scanner.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @AfterAll"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  static void deleteTestFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    assertTrue(new File(testFile).delete());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 49
    }
  },
  {
    "path": "src/test/java/StoreWrapper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import store.Store;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class StoreWrapper extends Store {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void saveDataIntoFile(String data) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Scanner retrieveDataAsScanner() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return new Scanner(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 14
    }
  },
  {
    "path": "src/test/java/UiWrapper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class UiWrapper extends Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private ArrayList\u003cString\u003e printedMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private ArrayList\u003cString\u003e errorMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private boolean wasExitCalled \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void print(String string) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    printedMessages.add(string);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void println(String string) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    printedMessages.add(string + \"\\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void printf(String format, Object... args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    printedMessages.add(String.format(format, args));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void error(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    errorMessages.add(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void exit(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    wasExitCalled \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    printedMessages.add(message + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public int getMessagesSize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return printedMessages.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String getLastMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (printedMessages.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return printedMessages.get(printedMessages.size() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public int getErrorsSize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return errorMessages.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String getLastError() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (errorMessages.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return errorMessages.get(errorMessages.size() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public boolean wasExitCalled() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return wasExitCalled;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 56
    }
  }
]
