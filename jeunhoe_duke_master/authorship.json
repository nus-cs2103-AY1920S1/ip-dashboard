[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        attributes \u0027Class-Path\u0027: \u0027/libs/a.jar\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 33,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Duke** is created for simple and easy **management of tasks**, using text commands in the command line. It supports various tasks like **DoAfters, Deadlines, Events** and **ToDos** and tracks them by displaying a neat overview of all tasks in a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### Bye"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Exits** Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `bye`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Saves all current data and **exits** Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### DoAfter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Adds a **DoAfter** task to Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `doafter NAME_OF_DOAFTER /after DATE_TIME`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Add **DoAfter** task with *DATE_TIME* (format DD/MM/YYYY HH/MM) to Duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`doafter Feed Bruno /after 18/09/2019 1800`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### Done"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Marks a task as **done** in Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `done INDEX_OF_TASK`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Marks a task at index *INDEX_OF_TASK* as **done** in Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### Deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Adds a **Deadline** task to Duke."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `deadline NAME_OF_DEADLINE /by DATE_TIME`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Add **Deadline** with *DATE_TIME* (format DD/MM/YYYY HH/MM) to Duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`deadline CS2103 Post Lecture Quiz /by 19/09/2019 2359`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### Delete"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Deletes** a task from Duke."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `delete INDEX_OF_TASK`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Deletes** task at *INDEX_OF_TASK* in Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`delete 4`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### Event"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Adds an **Event** task to Duke."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `event NAME_OF_EVENT /at DATE_TIME`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Add **Event** with *DATE_TIME* (format DD/MM/YYYY HH/MM) to Duke."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`event Rachel\u0027s birthday /at 04/07/2019 0000`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### Find"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Finds** a task in Duke."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `find STRING`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Finds** all occurrences of *STRING* in tasks of Duke and prints them out."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`find CS2103`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### List"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Prints** out all tasks in Duke."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `list`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "**Prints** out all tasks in Duke."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "### ToDo"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Adds an **ToDo** task to Duke."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### Usage"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "#### `event NAME_OF_TODO`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Add **ToDo** to Duke."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "`todo Finish Kingdom Hearts 3 DLC`"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 103,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor that creates a DialogBox in Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param text String representation for label"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param img Image"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tassert(MainWindow.class.getResource(\"/view/DialogBox.fxml\") !\u003d null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tFXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tfxmlLoader.setController(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tfxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tfxmlLoader.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdialog.setText(text);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdialog.setMinSize(Label.USE_PREF_SIZE, Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdisplayPicture.setImage(img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate void flip() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tCollections.reverse(tmp);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tgetChildren().setAll(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsetAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Creates DialogBox that represents User input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param text String representation of user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param img Image of user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return DialogBox that represents user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tDialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdb.dialog.setBackground(new Background(new BackgroundFill(Color.valueOf(\"#DCF8C6\"), new CornerRadii(10),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tInsets.EMPTY)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn db;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Creates DialogBox that represents Duke\u0027s response."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param text String representation of Duke\u0027s response."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param img Image of Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return DialogBox that represents Duke\u0027s response."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tDialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdb.dialog.setBackground(new Background(new BackgroundFill(Color.valueOf(\"#ECE5DD\"), new CornerRadii(10),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tInsets.EMPTY)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdb.flip();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn db;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 93
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tApplication.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Overridden method in Application that launches application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param stage JavaFX stage to show after setting up."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tassert(Main.class.getResource(\"/view/MainWindow.fxml\") !\u003d null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tFXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tAnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tScene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstage.setScene(scene);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tfxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstage.setTitle(\"Duke: Task Manager\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 40
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tscrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t// Add welcome message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdialogContainer.getChildren().add("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tDialogBox.getDukeDialog(\"Hello! I\u0027m Duke\\nWhat can I do for you?\", dukeImage));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Sets Duke controller for MainWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param d Sets Duke to input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tduke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * If user input\u0027s \"bye\", ByeCommand will execute and window will close after 3 seconds."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString input \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tDialogBox user \u003d DialogBox.getUserDialog(input, userImage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tDialogBox duke \u003d DialogBox.getDukeDialog(response, dukeImage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdialogContainer.getChildren().addAll(user, duke);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tuserInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tTimer timer \u003d new Timer();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tTimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tpublic void run() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\t\tSystem.exit(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttimer.schedule(task, 3000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 76
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an AddCommand in Duke which adds Tasks to the TaskList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents the task to add."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tTask task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor for add command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param task Sets task to add as input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic AddCommand(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.task \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Executes add command. Adds task to TaskList and prints out action."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks   Adds task to tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of executed command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttasks.add(this.task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsb.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsb.append(String.format(\"  %s\\n\", this.task));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsb.append(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 43
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a command that handles requests in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Command() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Executes specified command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks   Performs actions on TaskList if required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of executed command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic abstract String execute(TaskList tasks, Storage storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a DeleteCommand which deletes Tasks from the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents position of Task to delete in TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate int position;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param position Sets position to delete as input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic DeleteCommand(int position) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.position \u003d position;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Executes delete command. Remove Task from TaskList at given position and prints out action."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks   Removes Task from TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of executed command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tTask deleted \u003d tasks.remove(position);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsb.append(String.format(\"Noted. I\u0027ve removed this task: %s\\n\", deleted));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsb.append(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Accessor for position in TaskList DeleteCommand will delete from."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return Returns position to delete from."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic int getPosition() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn position;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Returns true if DeleteCommand has same position as object. Used for testing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param object Object to compare equality with."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return Boolean value of whether current DeleteCommand equals input Object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic boolean equals(Object object) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn (object instanceof DeleteCommand) \u0026\u0026 (((DeleteCommand) object).getPosition() \u003d\u003d this.position);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 61
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a DoneCommand which sets Task to done in TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represent position of Task in TaskList to set to done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate int position;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of DoneCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param position Sets position to set as done as input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic DoneCommand(int position) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.position \u003d position;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Executes done command. Sets Task from TaskList at given position to done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks   Sets Task in TaskList to done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of executed command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tTask task \u003d tasks.markAsDone(this.position);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsb.append(\"  \" + task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents ExitCommand which causes Duke to close."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor for ExitCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic ExitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Executes ExitCommand. Saves current tasks to disk and says goodbye."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks   Retrieves Tasks from TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param storage Saves Tasks from TaskList to Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of executed command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstorage.saveList(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents FindCommand which searches tasks in Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents string occurrence that FindCommand searches for."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tString toFind;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of FindCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param toFind Sets string to search for as input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic FindCommand(String toFind) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.toFind \u003d toFind.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Executes FindCommand. Searches string occurrence in TaskList and returns results."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks   Performs actions on TaskList if required."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of executed command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tList\u003cTask\u003e searchingList \u003d tasks.getList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tfor (Task task : searchingList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tif (task.getName().contains(this.toFind)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tmatchingTasks.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (matchingTasks.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn (\"No matching tasks found.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tStringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tsb.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tfor (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tsb.append(String.format(\"  %d.%s\\n\", i + 1, matchingTasks.get(i)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 57
    }
  },
  {
    "path": "src/main/java/duke/command/PrintListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a PrintListCommand which prints all Tasks in the TaskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class PrintListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of PrintListCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic PrintListCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Execute print list command. Prints all Tasks in the TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks   Print the Tasks in TaskList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param storage Saves to Storage or loads from Storage if required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of executed command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tsb.append(\"There are currently no tasks in your list!\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tsb.append(\"Start adding by adding some tasks!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tsb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tfor (int i \u003d 1; i \u003c tasks.size() + 1; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tsb.append(String.format(\"  %d. %s\\n\", i, tasks.get(i)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Returns true if PrintCommand is of same instance as object. Used for testing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param object Object to compare equality with."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return Boolean value of whether current PrintCommand equals input Object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic boolean equals(Object object) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn (object instanceof PrintListCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 49
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic DukeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception when Task is created without input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class EmptyTaskDukeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic EmptyTaskDukeException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic EmptyTaskDukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidInputDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception when Task is created with invalid input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class InvalidInputDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic InvalidInputDukeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an exception when Task has incorrect input. Used when Deadline or Event has incorrect DateTime format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class InvalidTaskDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic InvalidTaskDukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/LoadingErrorDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents exception when failed to load saved tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class LoadingErrorDukeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic LoadingErrorDukeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.LoadingErrorDukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents the Duke bot. Allows for easy and organised management of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents exception handler of Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate ExceptionHandler exceptionHandler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents task list which stores all tasks given to Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents storage function of Duke that helps to load and save data to disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate static Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of Duke. Sets up user interface, storage and task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\texceptionHandler \u003d new ExceptionHandler();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstorage \u003d new Storage(\"src/data/list.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttasks \u003d new TaskList(storage.loadList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} catch (LoadingErrorDukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttasks \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Get Duke\u0027s response to user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param input String representation of user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of Duke\u0027s response to user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String getResponse(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tCommand command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn command.execute(tasks, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn exceptionHandler.showError(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/ExceptionHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidInputDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents the exception handler of Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ExceptionHandler {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of user interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic ExceptionHandler() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Prints error when exception caught."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param e Exception that was caught."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String showError(Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (e instanceof InvalidInputDukeException) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if (e instanceof EmptyTaskDukeException) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn String.format(\"OOPS!!! The description of a %s cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if (e instanceof InvalidTaskDukeException) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn String.format(\"OOPS!!! Invalid input! Make sure your %s has a description and /at, /by or /after.\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\t\te.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\treturn e.getMessage(); // for undeclared exceptions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 37
    }
  },
  {
    "path": "src/main/java/duke/logic/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.PrintListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidInputDukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.DoAfter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a Parser used to read user input in Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Parses input and returns a Command based on input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param fullCommand String of user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return Command based on user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws InvalidInputDukeException If parser does not understand user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws EmptyTaskDukeException    If user did not input task name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws InvalidTaskDukeException  If user did not input appropriate DateTime for Event and Deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic static Command parse(String fullCommand) throws InvalidInputDukeException, EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tScanner scanner \u003d new Scanner(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (scanner.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString toProcess \u003d scanner.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tswitch (toProcess) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"list\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\treturn new PrintListCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"bye\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\treturn new ExitCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"done\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\treturn new DoneCommand(scanner.nextInt());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"delete\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\treturn new DeleteCommand(scanner.nextInt());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"find\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\treturn new FindCommand(scanner.next());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"todo\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"event\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcase \"doafter\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\treturn createAddCommand(fullCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tthrow new InvalidInputDukeException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new InvalidInputDukeException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Create AddCommand from given String."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param fullCommand String of user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return AddCommand based on user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws EmptyTaskDukeException   If user did not input task name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws InvalidTaskDukeException If user did not input appropriate DateTime for Event and Deadline."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate static Command createAddCommand(String fullCommand) throws EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tTask taskToAdd \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString checkType[] \u003d Arrays.copyOf(fullCommand.split(\" \", 2), 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString typeOfTask \u003d checkType[0];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString theTask \u003d checkType[1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t// switch statement for todo, deadline, task, doafter"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tswitch (typeOfTask) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"todo\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttaskToAdd \u003d new ToDo(theTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"deadline\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString taskByWhen[];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tif (theTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\ttaskByWhen \u003d new String[]{null, null};"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\ttaskByWhen \u003d Arrays.copyOf(theTask.split(\" /by \", 2), 2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString deadlineTask \u003d taskByWhen[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString byWhen \u003d taskByWhen[1];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttaskToAdd \u003d new Deadline(deadlineTask, byWhen);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"event\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString taskAtTime[];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tif (theTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\ttaskAtTime \u003d new String[]{null, null};"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\ttaskAtTime \u003d Arrays.copyOf(theTask.split(\" /at \", 2), 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString eventTask \u003d taskAtTime[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString atTime \u003d taskAtTime[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttaskToAdd \u003d new Event(eventTask, atTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"doafter\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString taskAfter[];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tif (theTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\ttaskAfter \u003d new String[]{null, null};"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\ttaskAfter \u003d Arrays.copyOf(theTask.split(\" /after \", 2), 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString doAfterTask \u003d taskAfter[0];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString after \u003d taskAfter[1];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttaskToAdd \u003d new DoAfter(doAfterTask, after);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tdefault:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tassert (taskToAdd !\u003d null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn new AddCommand(taskToAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 122
    }
  },
  {
    "path": "src/main/java/duke/logic/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.LoadingErrorDukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.DoAfter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents Storage used to save/load data from Duke to disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents file path of storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of Storage. Save/load file to input path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param filePath File path to save/load file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Loads TaskList data from disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return TaskList loaded from disk."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws LoadingErrorDukeException If no file found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic List\u003cTask\u003e loadList() throws LoadingErrorDukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tList\u003cTask\u003e loadedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tFileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tBufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tString readerLine \u003d bufferedReader.readLine(); //initialise first line"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\twhile (readerLine !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tString[] readArray \u003d readerLine.split(\"\\\\s\\\\|\\\\s\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tTask task \u003d createTaskFromInput(readArray);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tloadedList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\treaderLine \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbufferedReader.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new LoadingErrorDukeException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} catch (IOException | EmptyTaskDukeException | InvalidTaskDukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn loadedList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Saves TaskList data from Duke to disk."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param tasks Takes Tasks from TaskList and saves to disk."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic void saveList(TaskList tasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tFile file \u003d new File(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tfile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tFileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tBufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\twhile (!tasks.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tTask task \u003d tasks.remove(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tString line \u003d generateLineFromTask(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tbufferedWriter.write(line);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tbufferedWriter.newLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbufferedWriter.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Abstraction used to create tasks from String in data."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param inputArray String from reader."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return Task created from String."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws InvalidTaskDukeException If input is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws EmptyTaskDukeException   If task is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate static Task createTaskFromInput(String[] inputArray) throws InvalidTaskDukeException, EmptyTaskDukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tTask createdTask \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tswitch (inputArray[0]) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"TD\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcreatedTask \u003d new ToDo(inputArray[2]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"DA\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcreatedTask \u003d new DoAfter(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"DL\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcreatedTask \u003d new Deadline(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase \"E\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tcreatedTask \u003d new Event(inputArray[2], inputArray[3]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (createdTask !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tif (inputArray[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tcreatedTask.setDone(true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t\tcreatedTask.setDone(false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn createdTask;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Abstraction used to generate String line from Task to save to disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param task Task from TaskList."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String output of Task for saving to disk."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate static String generateLineFromTask(Task task) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t// Determine type of Task and add to line"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (task instanceof ToDo) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"TD\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"DL\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if (task instanceof Event) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"E\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if (task instanceof DoAfter) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"DA\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t// Determine if done and add to line"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (task.isDone()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"1\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"0\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(task.getName());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t// Add DateTime"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (task instanceof Event) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tEvent event \u003d (Event) task;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(event.getAtTime());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tDeadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(deadline.getByWhen());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if (task instanceof DoAfter) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\" | \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tDoAfter doAfter \u003d (DoAfter) task;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(doAfter.getAfterWhen());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString lineToAdd \u003d stringBuilder.toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn lineToAdd;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 171
    }
  },
  {
    "path": "src/main/java/duke/logic/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a TaskList in Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * List of all tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Empty constructor of TaskList. Creates an empty list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Creates a TaskList from a List of Tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param list List of Tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.list \u003d list;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Get list from TaskList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return List containing Tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn list;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Adds Task to TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param task Task to add."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic void add(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.list.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Removes Task from TaskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param position Position to remove from."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return Removed Task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Task remove(int position) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tTask deleted \u003d list.remove(position - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn deleted;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Get Task from TaskList."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param position Position to retrieve from."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return Task retrieved."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Task get(int position) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn this.list.get(position - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Returns size of TaskList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return int value of size of TaskList."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic int size() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn list.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Returns true if TaskList is empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return boolean value of whether TaskList is empty."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic boolean isEmpty() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn list.isEmpty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Marks Task in TaskList (in given position) as done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param position Position of Task to mark as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Task markAsDone(int position) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tTask task \u003d this.get(position);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttask.done();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn task;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 100
    }
  },
  {
    "path": "src/main/java/duke/task/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents Date and Time of an Event or Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents day of DateTime."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate int day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents month of DateTime."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate int month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents year of DateTime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate int year;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents hour of DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate int hour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents minute of DateTime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate int minute;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Creates DateTime object with input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param day    Day of DateTime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param month  Month of DateTime."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param year   Year of DateTime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param hour   Hour of DateTime."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param minute Minute of DateTime"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic DateTime(int day, int month, int year, int hour, int minute) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.day \u003d day;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.month \u003d month;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.year \u003d year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.hour \u003d hour;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.minute \u003d minute;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Static method that creates a DateTime object with DateTime string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param dateTimeString Follows input of DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return DateTime object of specified date and time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic static DateTime create(String dateTimeString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString[] dateTime \u003d dateTimeString.split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tString[] date \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tint day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tint month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tint year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tint time \u003d Integer.parseInt(dateTime[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tint hour \u003d time / 100;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tint minute \u003d time % 100;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn new DateTime(day, month, year, hour, minute);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Returns string representation of DateTime."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of DateTime in DDth of MMMM, HH.MM am/pm."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(this.day);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (this.day \u003e\u003d 10 \u0026\u0026 this.day \u003c\u003d 20) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"th\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if ((this.day % 10) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"st\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if ((this.day % 10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"nd\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else if ((this.day % 10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"rd\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"th\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\" of \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tswitch (this.month) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 1:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"January\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 2:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"February\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 3:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"March\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 4:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"April\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 5:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"May\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 6:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"June\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 7:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"July\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 8:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"August\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 9:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"September\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 10:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"October\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 11:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"November\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tcase 12:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"December\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tbreak;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(String.format(\" %d, \", year));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif ((hour \u003d\u003d 0) || (hour \u003d\u003d 12)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"12\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tint hourMod \u003d hour % 12;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(hourMod);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(String.format(\".%02d\", minute));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (hour \u003e\u003d 12) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"pm\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tstringBuilder.append(\"am\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn stringBuilder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 148
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents due date (byWhen) of the Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate String byWhen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of Deadline object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param name   Name of Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param byWhen byWhen of Deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws EmptyTaskDukeException   If name is empty."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws InvalidTaskDukeException If byWhen input does not follow DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Deadline(String name, String byWhen) throws EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new EmptyTaskDukeException(\"deadline\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (byWhen \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new InvalidTaskDukeException(\"deadline\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.byWhen \u003d byWhen;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Accessor to get due date (byWhen) of Deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of due date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String getByWhen() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn byWhen;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Gives appropriate representation of Deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of Deadline. Includes type of Task, isDone, name of Task and byWhen."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder stringBuilder \u003d new StringBuilder(\"[DL]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(super.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\" (\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(DateTime.create(byWhen));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\")\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn stringBuilder.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 58
    }
  },
  {
    "path": "src/main/java/duke/task/DoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate String afterWhen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param name Sets name of Task to input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic DoAfter(String name, String afterWhen) throws EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new EmptyTaskDukeException(\"doafter\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (afterWhen \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new InvalidTaskDukeException(\"doafter\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.afterWhen \u003d afterWhen;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Accessor to get due date (afterWhen) of DoAfter."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String getAfterWhen() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn afterWhen;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder stringBuilder \u003d new StringBuilder(\"[DA]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(super.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\" (\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(DateTime.create(afterWhen));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\")\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn stringBuilder.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents date and time of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate String atTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of Event object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param name   Name of Event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param atTime atTime of Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws EmptyTaskDukeException   If name is empty."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws InvalidTaskDukeException If atTime input does not follow DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Event(String name, String atTime) throws EmptyTaskDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new EmptyTaskDukeException(\"event\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (atTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new InvalidTaskDukeException(\"event\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.atTime \u003d atTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Accessor to get date and time of Event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String getAtTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn atTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Gives appropriate representation of Event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of Event. Includes type of Task, isDone, name of Task and atTime."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder stringBuilder \u003d new StringBuilder(\"[E]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(super.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\" (\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(DateTime.create(atTime));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tstringBuilder.append(\")\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn stringBuilder.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a Task user inputs in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Represents the name of the Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Indicates whether Task is done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tprivate boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param name Sets name of Task to input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic Task(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Accessor method for the Task\u0027s name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Accessor to check if Task is done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic boolean isDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn this.isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Sets Task isDone to input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param done Sets isDone variable to input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic void setDone(boolean done) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tthis.isDone \u003d done;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Sets Task isDone to done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic void done() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tisDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Returns Gives appropriate representation of the Task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of Task. Includes isDone and name of Task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tStringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (isDone) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttoPrint.append(\"[+] \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\ttoPrint.append(\"[ ] \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\ttoPrint.append(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn toPrint.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 79
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " * Represents a ToDo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Constructor of ToDo object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @param name Name of ToDo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @throws EmptyTaskDukeException If name is empty."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic ToDo(String name) throws EmptyTaskDukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tsuper(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\tif (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t\tthrow new EmptyTaskDukeException(\"todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * Gives appropriate representation of ToDo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t * @return String representation of ToDo. Includes type of Task, isDone and name of Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t\treturn \"[TD]\" + super.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cInsets bottom\u003d\"6.0\" left\u003d\"6.0\" right\u003d\"6.0\" top\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"488.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"496.0\" layoutY\u003d\"756.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"97.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"7.0\" layoutY\u003d\"7.0\" prefHeight\u003d\"740.0\" prefWidth\u003d\"588.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"733.0\" prefWidth\u003d\"581.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import duke.logic.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import duke.command.PrintListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import duke.exception.InvalidInputDukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import duke.exception.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": " public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void parseTest() throws EmptyTaskDukeException, InvalidTaskDukeException, InvalidInputDukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(Parser.parse(\"list\"), new PrintListCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(Parser.parse(\"delete 1\"), new DeleteCommand(1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 21
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.exception.EmptyTaskDukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void toStringTest() throws EmptyTaskDukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Meet Rachel\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✗] Meet Rachel\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    public void doneTest() throws EmptyTaskDukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        ToDo todo \u003d new ToDo(\"Meet Rachel\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        todo.done();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✓] Meet Rachel\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.logic.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeunhoe"
        },
        "content": "       mainClassName \u003d \"seedu.duke.logic.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "jeunhoe": 2,
      "-": 168
    }
  }
]
