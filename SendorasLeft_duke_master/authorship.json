[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 38,
      "-": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "[![Build Status](https://travis-ci.com/SendorasLeft/duke.svg?branch\u003dmaster)](https://travis-ci.com/SendorasLeft/duke)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "The Duke Chat Assistant is for users who prefer a chat-assistant desktop-based app for managing their daily errands and pending tasks in lieu of traditional GUIs. This simple-to-use chat app combines both Command Line Interface (CLI) style commands with a friendly chat-style GUI whose responses aim to mimick natural conversations with a personal assistant. Read on to find out how you can get started!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  ![image goes here](Ui.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "2. Download the latest `.jar` for Duke [here](https://github.com/SendorasLeft/duke/releases)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "4. Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "5. Type a command message in the text box and press enter to send it to Duke"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   eg. type `list` to preview all tasks in your task list.  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "6. Here are some commands you can try:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    - `list`: list out tasks in the current list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    - `deadline Go to the moon /by 17/02/2050 1800`: adds a reminder to `Go to the moon` by 17th February 2050, 6pm."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    - `done 1`: marks the first task in your list as completed. Well done!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "7. Refer to Section 3, \"Features\" for full details of each command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### Command Format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- Each command must begin with a command word. See each command below for the list of associated command words."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- Command words are case-insensitive eg. `list`, `LIST`, and `LiSt` all activate the list command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by the user eg. `DESCRIPTION_OF_TASK` denotes that you should provide a short description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### 3.1 Adding a task: `todo`, `deadline`, and `event`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "You can instruct Duke to add three different types of tasks:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "#### 3.1.1 Todo "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Adds a task that has a description only.  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `todo DESCRIPTION_OF_TASK`  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `todo Buy rocket fuel from the supermarket`  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Expected Output: `[T][✗] Buy rocket fuel from the supermarket`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `todo Make sure the O-rings are up to scratch`  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    Expected Output: `[T][✗] Make sure the O-rings are up to scratch`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "#### 3.1.2 Deadline"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Adds a task that needs to be completed by a certain date.  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `deadline DESCRIPTION_OF_TASK /by dd/MM/YYYY HHmm`  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `deadline Assemble the astronaut team /by 08/08/2043 2359`  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** `[D][✗] Assemble the astronaut team (by: 08 Aug 2043, 11:59 PM)`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `deadline Make sure all personnel are actually on-board /by 17/02/2050 1000`  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** `[D][✗] Make sure all personnel are actually on-board (by: 17 Feb 2050, 10:00 AM)`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `deadline Go to the Moon /by 17/02/2050 1800`  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** `[D][✗] Go to the Moon (by: 17 Feb 2050, 06:00 PM)`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "#### 3.1.3 Event  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Add a task that needs to be done at a certain time.  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `event DESCRIPTION_OF_TASK /at dd/MM/YYYY HHmm`  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `event Launch the rocket /at 17/02/2050 1500`  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** `[E][✗] Launch the rocket (at: 17 Feb 2050, 03:00 PM)`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `event Hide the evidence and silence the reporters /at 17/02/2050 1830`  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** `[E][✗] Hide the evidence and silence the reporters (at: 17 Feb 2050, 06:30 PM)`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "       "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### 3.2 Listing out all tasks: `list`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Shows a list of all tasks.  "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `list`  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Expected Output:** List of all tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### 3.3 Marking tasks as done: `done`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Marks a task in the list as done using its index. You may use the `list` command to view all current tasks and their respective indexes. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `done INDEX_OF_TASK_IN_LIST`  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Expected Output:** Task will be marked as done, and a tick indicator will now be displayed beside the task.  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `done 2`  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** `[T][✓] Make sure the O-rings are up to scratch`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `done 5`  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** `[D][✓] Go to the Moon (by: 17 Feb 2050, 06:00 PM)`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### 3.4 Finding a task by description: `find`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Searches and displays a list of tasks in Duke whose description matches the supplied keyword. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - The search is case-insensitive. eg. `corpses` will match `CoRpSes`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - Only the description of the tasks are searched."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - As long as the keyword is present anywhere in the task description, it will be listed as a search result eg. `off` will match `takeoff failure`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `find KEYWORD`  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Expected Output:** List of results"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `find rocket`  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Outputs:** List of tasks matching the keyword `rocket`, or no results if there are no matches."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `find debris strike`  "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Outputs:** List of tasks matching the keyword `debris strike`, or no results if there are no matches."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `find 2003 columbia crash causes`  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Outputs:** List of tasks matching the keyword `2003 columbia crash causes`, or no results if there are no matches."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### 3.5 Deleting a task: `delete`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Deletes a task in the list by its index. You may use the `list` command to view all current tasks and their respective indexes.  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `delete INDEX_OF_TASK_IN_LIST`  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Expected Output:** Specified task removed from list. Tasks with indexes greater than INDEX_OF_TASK_IN_LIST will all be shifted up by one."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `delete 5`  "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** Task at index 5 removed from list if it exists."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `delete 3`  "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** Task at index 3 removed from list if it exists."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### 3.6 Loading and saving task lists: `load` and `save`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "These commands instruct Duke to save and load from different directories. Note that if you close Duke, it will always startup with the most recently used/saved/loaded task list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "#### 3.6.1 Specifying a new save location: `save`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Changes the save location of the current list, and then attempts a save. "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `save DIRECTORY_TO_SAVE_FILE`  "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Expected Output:** Save location of current task list changed to user-specified location."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `save case_studies/Wanderer_2050_crash.tmp`  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** Change save location of current list to `case_studies/Wanderer_2050_crash.tmp`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `save the lives of the astronauts! please, someone!`  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** Invalid save path. Duke will continue saving to the previous save path."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "#### 3.6.2 Loading a list from a save location: `load`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Loads an existing saved task list from a specified path on the disk. Note that if you close Duke, if will always start up with the most recently used/saved/loaded task list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `load DIRECTORY_TO_LOAD_FILE`  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Expected Output:**  Loads a previously saved task list from the hard disk, which replaces the current working one open in Duke."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `load case_studies/Columbia_2003_crash.tmp`  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** Task List in `case_studies/Columbia_2003_crash.tmp` loaded up to Duke, provided the file exists and is valid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "  - `load the world back to when the rocket launch hasn\u0027t occurred`  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    **Expected Output:** Invalid load path. Duke will continue operating with the current task list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "### 3.7 Exiting Duke: `bye`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Closes and exits the chat application. Alternatively, you may close the window by clicking the \u0027x\u0027 button on the top right corner.  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "Format: `bye`  "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Expected Output**: Duke greets goodbye, and exits after 1.5 seconds."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "## 4. FAQs"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Q:** How do i transfer my data to another computer?  "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**A:** Install the app in the other computer using the Quick Start guide given above. If you want to preserve the current data and state of the Duke program, transfer the /config folder over along with any saved task list files while maintaining the same folder structure."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**Q.** Duke can\u0027t save the list to the folder I want! How do I fix this?  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "**A.** Check the permissions of the folder that Duke is trying to save to. Ensure that write permissions are toggled on for that folder."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Add Todo tasks:** `todo DESCRIPTION_OF_TASK`  "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `todo Write eulogy for crew`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Add Deadline tasks:** `deadline DESCRIPTION_OF_TASK /by dd/MM/yyyy HHmm`  "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `deadline Finish investigative report /by 17/08/2050 0900`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Add Event tasks:** `event DESCRIPTION_OF_TASK /at dd/MM/yyyy HHmm`  "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `event Attend Wanderer 2050 investigative trial /at 18/08/2050 0900`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **List:** `list`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Mark as Done:** `done INDEX_OF_TASK_IN_LIST`  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `done 13`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Find:** `find KEYWORD`  "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `find public apology speech script`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Delete:** `delete INDEX_OF_TASK_IN_LIST`  "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `delete 14`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Save:** `save DIRECTORY_TO_SAVE_FILE`  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `save ./me.tmp`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Load:** `load DIRECTORY_TO_LOAD_FILE`  "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "eg. `load ./alcohol_list.tmp`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "- **Bye:** `bye`"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 179,
      "-": 18
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeShutDownException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * GUI Chat assistant that keep tracks of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // object attributes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a Duke object, which can be used"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * to start the chat assistant driver loop."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.taskList \u003d new TaskList(this.storage.loadFromDisk());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the current save path that Duke is saving its internal state to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return save path stored in the Storage object held by the Duke instance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getCurrentSavePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this.storage.getSavePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Executes user command and retrieves response, if applicable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param input user command to be executed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return response to be printed to user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getResponse(String input) throws DukeShutDownException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Command c \u003d Parser.parseForCommands(input); // send it off to be parsed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            c.initialize(this.storage, this.taskList, this.ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            response \u003d c.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            assert (response !\u003d null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (DukeShutDownException shutDownSignal) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw shutDownSignal; // throws signal to GUI to handle"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            response \u003d e.getMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 64,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.view.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            stage.setTitle(\"Duke: Personal Chat Assistant\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeShutDownException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that initiates shut down of the Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * system."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Throws a DukeShutDownException, which should be handled by the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * main Duke program as it sees fit. Duke does not initialize shutdown directly"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * since there may be housekeeping that needs to be fulfilled by the highest-level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * caller."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() throws DukeShutDownException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        throw new DukeShutDownException(ui.GOODBYE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 24
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Abstract class representing a template for Command sub-classes to implement"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and inherit from. Represents a command issued by the user to Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Passes in essential Duke util objects for the Commands to act on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param storage a Storage object with disk saving and loading capabilities"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param taskList a TaskList object representing list of tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param ui a Ui object for displaying output to screen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Command initialize(Storage storage, TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Executes actions that are specific to each Command sub-class. To be implemented"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * by sub-classes. As a general rule, initialize() should always be called"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * to update the relevant data in the Command sub-class object before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * any calls to execute() are made."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException for generic recoverable errors"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public abstract String execute() throws DukeException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command issued by the user to create a"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Deadline object. Inherits from the NewTaskCommand abstract class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see NewTaskCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DeadlineCommand extends NewTaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a DeadlineCommand object that can be executed to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * create a Deadline object and add it to the current TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param description description of Deadline object to be created"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param by DateTime object representing date and time to be associated with the Deadline object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public DeadlineCommand(String description, DateTime by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(new Deadline(description, by));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that deletes a specified task from"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * the stored list in Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a DeleteCommand that executes the deletion of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * specified by taskId."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param taskId index of the task to be deleted. Uses 1-indexing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public DeleteCommand(int taskId) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Deletes the Task object specified by the input taskId supplied during"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * initialization."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if taskIndex is out of bounds or refers to the index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *                       of a non-existent Task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Task task \u003d this.taskList.delete(taskId);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.storage.saveToDisk(this.taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + ui.indentMessage(task.toString())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + \"\\nNow you have \" + this.taskList.getSize() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 40
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that marks a task as done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Inherits from the Command abstract class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a DoneCommand object that executes the action of marking"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * a task with index taskId as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param taskId index of task to be marked as done. uses 1-indexing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Marks the specified task in the taskId attributed as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if taskId refers to a non-existent task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Task task \u003d this.taskList.at(taskId);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.storage.saveToDisk(this.taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + ui.indentMessage(task.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 41
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command issued by the user to create an"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Event object. Inherits from the NewTaskCommand abstract class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see NewTaskCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class EventCommand extends NewTaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"event\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns an EventCommand object that can be executed to"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * create an Event object and add it to the current TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param description description of Event object to be created"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param at DateTime object representing date and time to be associated with the Event object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public EventCommand(String description, DateTime at) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(new Event(description, at));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 27
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that searches the current TaskList with a keyword."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private String searchWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a FindCommand object that will attempt to search the current TaskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * when executed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param searchWord the keyword to be used for searching"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public FindCommand(String searchWord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.searchWord \u003d searchWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a list of all matching tasks. As long as the task description contains"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * a substring that matches the keyword, it will be counted as a positive result."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * The search is case-insensitive (ie. matches words irregardless of differences in case)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        TaskList results \u003d this.taskList.getTaskSubsetMatching(searchWord);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (results.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return \"I\u0027m sorry, I didn\u0027t find any tasks containing the phrase\\n\u0027\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + searchWord"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"\u0027 ...\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return \"Here are all the tasks in your list that matches the query \u0027\" + this.searchWord + \"\u0027:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + ui.indentMessage(results.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 45
    }
  },
  {
    "path": "src/main/java/duke/command/HelloCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that greets the user back"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * if they issue a greeting."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class HelloCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD_ONE \u003d \"hello\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD_TWO \u003d \"hi\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD_THREE \u003d \"hey\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Prints out a response when greeted by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return String containing a hello response."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this.ui.HELLO_RESPONSE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 21
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that lists out the contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * of the current task list. Inherits from the Command abstract"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Prints out a string representation of TaskList object to the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * screen for the user to view."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return \"Nice! You have no pending tasks in the current list!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return \"Here are the tasks in your current list:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + ui.indentMessage(taskList.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 27
    }
  },
  {
    "path": "src/main/java/duke/command/LoadCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that loads a new task list from a file path"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Upon execution, the command will attempt to load from the new file path. If successful,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * the new file location will automatically be used as the default saving path as well."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see SaveCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class LoadCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"load\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a LoadCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param filePath file path of the new location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public LoadCommand(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Attempts to load the new task list from the given filePath. Upon success, this command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * changes the save location to the new path as well (and notifies the user of this change)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Upon failure, it reverts back to the old save directory."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if loading was unsuccessful"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String previousPath \u003d this.storage.getSavePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // intuitively, users would want to save to same location that"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // the new list was loaded from instead of overwriting the current list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.storage.changeSavePath(this.filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            TaskList loadedList \u003d this.storage.loadFromDisk();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.taskList.replaceWith(loadedList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return \"Got it. I have changed the loading filepath from\\n\u0027\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + previousPath + \"\u0027\\nto\\n\u0027\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + this.filePath + \"\u0027\\n\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + (new ListCommand()).initialize(storage, taskList, ui).execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    // remind users that save location was also changed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"\\nNOTE: I will also update the save path to the same location.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"If you want to save to a different location, use the \u0027save\u0027 command!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (DukeException e) { // upon failure, revert back to old path"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.storage.changeSavePath(previousPath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hmm, I couldn\u0027t locate any saved lists in the following file path:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + Ui.INDENT + \"\u0027\" + this.filePath + \"\u0027\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"\\n\\nIn any case, I will continue to use the current file path:\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + Ui.INDENT + \"\u0027\" + previousPath + \"\u0027\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 65
    }
  },
  {
    "path": "src/main/java/duke/command/NewTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Abstract class that represents the creation and addition of a Task to the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * current task list. Implements the execute() method for all"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * sub-classes that inherits from it. Inherits from the Command abstract"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public abstract class NewTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a NewTaskCommand that takes in a Task object to be added to the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param task Task object to be added to the current list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public NewTaskCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds the specified task to the current TaskList object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if list could not be saved to the hard disk"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *                       after addition."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.taskList.add(this.task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.storage.saveToDisk(this.taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + ui.indentMessage(task.toString())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + this.taskList.getSize()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 42
    }
  },
  {
    "path": "src/main/java/duke/command/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command that changes the save file location."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Upon execution, will change the save file location then attempt to save to it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * If new path fails to be saved to,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"save\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a SaveCommand object that will attempt to change the current"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * save location when executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param filePath file path of the new location."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public SaveCommand(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Changes the current saving directory in the given Storage object for Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Upon failure, reverts back to the last working directory."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return result feedback of the command to be printed to the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if saving to new location fails"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String execute() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String previousPath \u003d this.storage.getSavePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            previousPath \u003d this.storage.changeSavePath(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.storage.saveToDisk(this.taskList); // attempt to save to new location"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return \"Got it. I\u0027ve saved and changed the current save file path from\\n\u0027\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + previousPath"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"\u0027\\nto\\n\u0027\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + this.filePath + \"\u0027\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (DukeException originalError) { // upon failure, revert back to last working path"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.storage.changeSavePath(previousPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // then continue to pass the exception upwards"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I\u0027m so sorry! I couldn\u0027t save to the following filepath:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + Ui.INDENT + \"\u0027\" + this.filePath + \"\u0027\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"\\n\\nI\u0027m reverting back to the previous file path used\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + Ui.INDENT + \"\u0027\" + previousPath + \"\u0027\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    originalError);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 59
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class representing a command issued by the user to create an"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Todo object. Inherits from the NewTaskCommand abstract class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see NewTaskCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TodoCommand extends NewTaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String KEYWORD \u003d \"todo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a TodoCommand object that can be executed to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * create a Todo object and add it to the current TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param description description of Todo object to be created"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(new Todo(description));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Exception class specific to Duke that represents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * recoverable errors encountered during Duke execution."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a DukeException object with an associated error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param errorMessage error message to be associated with exception"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a DukeException object with an error message and original cause."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param errorMessage error message to be associated with exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param cause the original cause of exception (eg. an internally thrown exception)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public DukeException(String errorMessage, Throwable cause) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(errorMessage, cause);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 26
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeShutDownException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An exception class that indicates that Duke is shutting"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * down. One example is when the command parser detects"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * that the user has issued the \"bye\" command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DukeShutDownException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a DukeShutDownException object with an associated"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param errorMessage message associated with the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public DukeShutDownException(String errorMessage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 18
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A sub-class of Task that adds a time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * by which the task must be completed by."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected DateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Basic constructor for the Deadline sub-class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Takes in a description and a task deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param description details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param by time by which task should be completed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Deadline(String description, DateTime by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a string representation of the Deadline object and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * its various details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return a string representation of the Deadline object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A sub-class of Task that adds a time/period of time"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * in which the task will take place at/during."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected DateTime at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /** Basic constructor for the Event sub-class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Takes in description of the task as well"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * as the time period at which it occurs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param description details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param at time period at which task occurs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Event(String description, DateTime at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a string representation of the Event object and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * its various details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return a string representation of the Event object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 33
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An abstract class that represents a human task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and keeps track of its completion status."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * This is the basic Task template that all Task objects"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * must adhere to."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Basic constructor for the Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * class that only takes in one string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * for description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param description description/name of Task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a ticked icon (completed) or a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * crossed icon (uncompleted), depending on the completion"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * status of the Task object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return string icon depicting a ticked or crossed box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return (isDone"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                ? \"\\u2713\"   // return tick symbol"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                : \"\\u2718\"); // return x symbol"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Marks a Task object as completed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a String representation of the Task object, along with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * its completion status."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return String representation of Task object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + this.getStatusIcon()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + \"] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 64
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.lang.IndexOutOfBoundsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class that encapsulates a list of Tasks. Contains various methods"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * to manipulate the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see Todo"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private List\u003cTask\u003e tasks; // List of all tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a TaskList object with an empty task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a TaskList object initialized with Task objects found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * in a List of Task objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param tasks Existing List object containing Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a TaskList object initialized with Task objects found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * in a TaskList object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param taskList Existing TaskList object containing Task objects."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.tasks \u003d taskList.tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Deletes the task corresponding to the given taskIndex from the stored list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * in the TaskList object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param taskIndex index of task to be deleted. Uses 1-indexing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if index is invalid or refers to a non-existent task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Task delete(int taskIndex) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            taskIndex--; // convert to zero-indexing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return this.tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hey! There\u0027s no such task!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the task corresponding to the given taskIndex from the stored list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * in the TaskList object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param taskIndex index of task to be deleted. Uses 1-indexing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return Task object corresponding to taskIndex"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if index is invalid or refers to a non-existent task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Task at(int taskIndex) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            taskIndex--; // convert to zero-indexing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return this.tasks.get(taskIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hey! There\u0027s no such task!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Adds a task to the list stored in the TaskList object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param task Task object to be added to list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the current number of Task objects in the TaskList object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return integer representing the number of Tasks in the TaskList object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a TaskList containing subset of Task objects matching"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * the provided searchWord. This method is case-insensitive."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param searchWord String to search for"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return TaskList containing Tasks that match searchWord"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TaskList getTaskSubsetMatching(String searchWord) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        List\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.tasks.forEach((task) -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            if (task.getDescription().toLowerCase()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    .contains(searchWord.toLowerCase())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                resultList.add(task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return new TaskList(resultList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Replaces the current list of tasks in the TaskList object with"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * a list of tasks from another TaskList object. Note that this"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * is implemented as a shallow copy operation (internally, only the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * references are copied over)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param newList the TaskList object to be copied over to this object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void replaceWith(TaskList newList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.tasks \u003d newList.tasks;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a string representation of the TaskList object. The output will"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * be formatted with one Task on each line, prepended by their respective"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * indexes (1-indexed)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return String representation of the TaskList object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            sb.append(String.format(\"%3d. \", i++));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            sb.append(task);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 148
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A simple sub-class of Task in which there is"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * no given time period or deadline by which"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * it should be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Basic constructor of the Todo sub-class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Takes in description of the task only."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param description details of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a string representation of the Todo object and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * its various details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return a string representation of the Todo object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 29
    }
  },
  {
    "path": "src/main/java/duke/util/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * A class wrapper around java.util.Date and java.text.SimpleDataFormat"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * to enable Duke to freely parse input strings and switch between formats"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * for standardized screen output."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DateTime implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Date dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a DateTime object whose parameters are initialized by parsing through"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * an input String with format \"dd/MM/yy HHmm\". Parsing is done through"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * java.text.SimpleDateFormat. Upon success, returns a DateTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * object. More templates will be added in the future to increase"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * the versatility of the parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param input String to be parsed into date and time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return java.util.Date object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if this method fails to parse the input String"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static DateTime parseString(String input) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            Date dateTime \u003d format.parse(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new DateTime(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t decipher the date and time\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \" that you gave me...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"Please write it in \u003cdd/mm/yyyy HHmm\u003e format for me to\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"\\nunderstand!\", e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // private constructor called by the static parser method DateTime.parseString()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // returns a DateTime object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private DateTime(Date dateTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (dateTime !\u003d null); // static method always return a valid datetime"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the date and time in a standardized format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * of \"dd MMM yyyy\", eg. 17 FEB 1996."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return string representation of DateTime object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd MMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return format.format(this.dateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 60
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.HelloCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.LoadCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.SaveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class that encapsulates various parsing methods to parse"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * input Strings and return the appropriate Command Objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see duke.command.Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * @see DateTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a Command object that was parsed from the user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param input String containing full user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return Command objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if a generic recoverable runtime error is detected"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see Command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static Command parseForCommands(String input) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String[] parameters \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String command \u003d parameters[0].toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case HelloCommand.KEYWORD_ONE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case HelloCommand.KEYWORD_TWO:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case HelloCommand.KEYWORD_THREE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new HelloCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case ListCommand.KEYWORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case ByeCommand.KEYWORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case DoneCommand.KEYWORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseDoneCommand(parameters);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case DeleteCommand.KEYWORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseDeleteCommand(parameters);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case TodoCommand.KEYWORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseTodoCommand(parameters);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case EventCommand.KEYWORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseEventCommand(parameters);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case DeadlineCommand.KEYWORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseDeadlineCommand(parameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case FindCommand.KEYWORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseFindCommand(parameters);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case LoadCommand.KEYWORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseLoadCommand(parameters);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        case SaveCommand.KEYWORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return Parser.parseSaveCommand(parameters);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"At my current stage, I have no idea what that means.\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"\\nMaybe one day I\u0027ll know :(\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a DoneCommand object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static DoneCommand parseDoneCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"done\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(parameters[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new DoneCommand(taskIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I\u0027m not psychic! You need\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \" to tell me the ID of the task\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"you\u0027re done with!\", e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"You need to provide me \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"with a valid task index!\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"(That means integer numbers only!)\", e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a DeleteCommand object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static DeleteCommand parseDeleteCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"delete\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(parameters[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I\u0027m not psychic! You need\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \" to tell me the ID of the task\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"you want to delete!\", e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"You need to provide me \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"with a valid task index!\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"(That means integer numbers only!)\", e);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a TodoCommand object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static TodoCommand parseTodoCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"todo\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new TodoCommand(parameters[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hey! You need to give me a description\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \" for a todo task!\", e);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a EventCommand object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static EventCommand parseEventCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"event\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            String[] deadlineParams \u003d parameters[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            DateTime at \u003d DateTime.parseString(deadlineParams[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new EventCommand(deadlineParams[0], at);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hey! You need to give me both description\\nAND time\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \" to create an event task!\", e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a DeadlineCommand object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static DeadlineCommand parseDeadlineCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"deadline\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            String[] deadlineParams \u003d parameters[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            DateTime by \u003d DateTime.parseString(deadlineParams[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new DeadlineCommand(deadlineParams[0], by);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hey! You need to give me both description\\nAND time\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \" to create a deadline task!\", e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a FindCommand object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static FindCommand parseFindCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"find\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new FindCommand(parameters[1]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I\u0027m not psychic! You need to give me a search word to look for!\", e);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a LoadCommand object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static LoadCommand parseLoadCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"load\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new LoadCommand(parameters[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hey! You need to give me a file path to work with!\", e);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // parses the arguments for remaining parameters to construct a SaveCommand object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static SaveCommand parseSaveCommand(String[] parameters) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (parameters[0].equals(\"save\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            return new SaveCommand(parameters[1]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"Hey! You need to give me a file path to work with!\", e);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 168
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class that handles all methods related to the loading and saving of task lists"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * to the hard disk for persistent storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // CLASS ATTRIBUTES"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // path to a config file which contains a path to the task list that duke should startup with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String CONFIG_PATH \u003d \"./config/config.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // the default path to be used if no config file is found"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final String DEFAULT_SAVE_PATH \u003d \"./saved_lists/default.tmp\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // OBJECT ATTRIBUTES"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a Storage object. Uses the saved path in CONFIG_PATH for loading a TaskList that was last used,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * or the default path in DEFAULT_SAVE_PATH if no such config file was previously"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // if a config file containing a last-used startup path is present, use it"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(CONFIG_PATH));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            String listFilePath \u003d reader.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.file \u003d new File(listFilePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            // else, use the default recommended path for loading and saving lists"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.file \u003d new File(Storage.DEFAULT_SAVE_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a TaskList saved in the stored directory. The filePath"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * is taken to be the default filePath specified by Storage.DEFAULT_SAVE_PATH,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * or a user specified one upon initialization of the Storage object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * If unsuccessful, throws an exception."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return TaskList object loaded from disk, if successful."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if loading fails."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public TaskList loadFromDisk() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        TaskList list;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(this.file);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            list \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ois.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.updateStartupConfig();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I\u0027m so sorry! I had trouble sync-ing the task list\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \" to the disk!\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"Any changes might not be saved ):\", e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, I couldn\u0027t decipher the saved list at:\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + this.file.getPath() + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"It seems to be missing or corrupted...\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"I will have to start a new list!\", e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Serializes and saves the current TaskList object to the hard disk."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Filepath used is the one provided during initialization, or the default"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * filepath found in Storage.DEFAULT_SAVE_PATH if not supplied. Throws an exception"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * upon failure"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param list TaskList object to be saved."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if saving was unsuccessful."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void saveToDisk(TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(this.file, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            oos.writeObject(list);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.updateStartupConfig();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I\u0027m so sorry! I had trouble saving the task list\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"to the following path:\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + this.file.getPath() + \"\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"Any changes might not be saved ):\", e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Updates the duke config file with the last altered/used save path location. Upon the next"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * startup, duke will read from the config file to automatically load the task list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * that was being used most recently."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @throws DukeException if unable to create/write to config file (eg. due to permissions)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see Storage#saveToDisk(TaskList)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see Storage#loadFromDisk()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void updateStartupConfig() throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            File config \u003d new File(CONFIG_PATH);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            config.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(config));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            writer.write(this.file.getPath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            writer.newLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t change my config file in \u0027/config/config.txt\u0027!\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                    + \"Did you restrict the write permissions to my own file?!\", e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns the save path location of the current TaskList object on the disk."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return String representation of the saved file path"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String getSavePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (this.file !\u003d null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return this.file.getPath();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Changes the file that the current TaskList object is to be serialized to on disk."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Note that the actual saving of the TaskList object does not take place here, and will"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * be left to the implementation of the various data manipulation Command sub-classes."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param newPath the new save path to be saved to"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return the previous save path of the current TaskList object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see duke.command.SaveCommand"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @see duke.command.LoadCommand"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String changeSavePath(String newPath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assert (this.file !\u003d null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String previousPath \u003d this.file.getPath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.file \u003d new File(newPath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return previousPath;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 155
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * Class that handles all Duke Ui elements, which includes formatting output"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and printing them to the screen."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // Class attributes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String INDENT \u003d \"      \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String HELLO \u003d \" ___        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"|  _ \\\\ _  _| | ___ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"| | | | | | | | / / _  \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"| |_| | |_| |  \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"|___/\\\\_,_|_|\\\\_\\\\__|\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"Hello! I\u0027m Duke. What can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String GOODBYE  \u003d \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"Hang on while I close this window for you...\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String LOADING_ERROR \u003d \"I couldn\u0027t find a saved task list...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            + \"Let me start up a brand new list!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static final String HELLO_RESPONSE \u003d \"Hello to you too!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // Object attributes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a Ui object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Prints a formatted String to the screen. This method first calls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * indentMessage() to indent all lines within the output."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param message String containing message to be displayed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void displayMessage(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        System.out.print(this.indentMessage(message));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Prints a line with default indents to the screen. Used to demarcate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Duke output from user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a String padded with default indentation. This method"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * looks for all newlines within the String and pads the default indentation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * of 4 spaces to the front."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param s String to be formatted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return String formatted with indentation."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String indentMessage(String s) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String[] lines \u003d s.split(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder indentedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            indentedOutput.append(INDENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            indentedOutput.append(line);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            indentedOutput.append(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return indentedOutput.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Returns a String padded with user-specified indentation. This method"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * looks for all newlines within the String and pre-pads each line with"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * (4 + extraIdent) amount of spaces."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param s String to be formatted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param extraIndent additional number of spaces to be added after"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *                    the default indent"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return formatted String"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public String indentMessage(String s, int extraIndent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String[] lines \u003d s.split(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder indentedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        sb.append(INDENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (int i \u003d 0; i \u003c extraIndent; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String indent \u003d sb.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            indentedOutput.append(indent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            indentedOutput.append(line);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            indentedOutput.append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return indentedOutput.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Prints out a formatted saved list loading error message."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.displayMessage(LOADING_ERROR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 109
    }
  },
  {
    "path": "src/main/java/duke/view/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Generates a chat entry suitable for placing user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param text String to be displayed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param img profile image of the user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return DialogBox object representing a chat entry"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        db.setStyle(\"-fx-background-color:linear-gradient( from 0% 0% to 85% 85%, lavenderblush, white);\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Generates a chat entry suitable for placing duke responses."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * It is a flipped version of the user dialog."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param text String to be displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @param img profile image of Duke"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * @return DialogBox object representing a chat entry"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        db.setStyle(\"-fx-background-color:linear-gradient( from 0% 0% to 85% 85%, white, azure);\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 79
    }
  },
  {
    "path": "src/main/java/duke/view/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeShutDownException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * JavaFX Controller for MainWindow. Provides the layout for the MainWindow,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " * and defines the behaviour for on-screen GUI elements via fxml."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private static final int SHUTDOWN_DELAY \u003d 1750;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Label bottomStatusBar;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Initializes the main window elements and displays the greeting message from Duke."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.HELLO, dukeImage));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.duke \u003d d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.updateBottomStatus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.publishUserInput(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.publishDukeResponse(response);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } catch (DukeShutDownException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.publishDukeResponse(Ui.GOODBYE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.closeWindowAndExit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            this.updateBottomStatus();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // update bottom status bar to display current save location of task list in Duke"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void updateBottomStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.bottomStatusBar.setText(\"Current Save Location:  \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                + this.duke.getCurrentSavePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // closes duke gracefully. should only be called when a shutdown signal."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // is received from the ByeCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void closeWindowAndExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                Thread.sleep(SHUTDOWN_DELAY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // publishes Duke response to the chat window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void publishDukeResponse(String response) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    // publishes user response to the chat window."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private void publishUserInput(String input) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 103
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003cFont name\u003d\"Avenir Book\" size\u003d\"11.5\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cInsets bottom\u003d\"15\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 22
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"712.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.view.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"658.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"33.0\" prefWidth\u003d\"520.0\" style\u003d\"-fx-focus-color: #66E4AD #66E4AD;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"524.0\" layoutY\u003d\"658.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #7A52FF#7A52FF; -fx-border-color: white; -fx-border-radius: 2; -fx-background-insets: 2.5;\" text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cFont name\u003d\"Avenir Next Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"658.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"585.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "      \u003cLabel fx:id\u003d\"bottomStatusBar\" text\u003d\"./saved_lists/\" AnchorPane.bottomAnchor\u003d\"38.0\" AnchorPane.leftAnchor\u003d\"8.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            \u003cFont name\u003d\"Avenir Book\" size\u003d\"9.5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 28
    }
  },
  {
    "path": "src/test/java/duke/Dummy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class Dummy {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 12
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.util.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void initialize() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.event \u003d new Event(\"Fly to the moon\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                DateTime.parseString(\"11/11/3019 0000\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toString_methodCall_formattedOutput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(\"[E][✘] Fly to the moon (at: 11 Nov 3019, 12:00 AM)\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                this.event.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void markAsDone_methodCall_formattedOutput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.event.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(\"[E][✓] Fly to the moon (at: 11 Nov 3019, 12:00 AM)\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                this.event.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 32
    }
  },
  {
    "path": "src/test/java/duke/util/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parseString_invalidDateFormat_raiseException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "            DateTime.parseString(\"Not a valid date.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        });"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void parseString_compliantDateFormat_noException() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.dateTime \u003d DateTime.parseString(\"11/11/3019 0000\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    public void toString_methodCall_formattedOutput() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        this.dateTime \u003d DateTime.parseString(\"11/11/3019 0000\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "        assertEquals(\"11 Nov 3019, 12:00 AM\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "                this.dateTime.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SendorasLeft"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SendorasLeft": 31
    }
  }
]
