[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "IceBear Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for IceBear][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 2,
      "-": 37
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveBaseName \u003d \"Ice Bear Event Tracker\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveVersion \u003d \"v0.1\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 46,
      "-": 16
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Add different types of tasks for Ice Bear to keep track of in a Task List."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Mark the tasks as done, delete them, and undo actions as you please!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "## Adding Tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "There are different types of tasks you can ask Ice Bear to keep track of."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "   "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "They are Events, Deadlines, and To Do tasks!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "### Add a Deadline Task - `deadline \u003cdescription\u003e /by \u003cDate\u003e \u003cTime\u003e`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "One of the tasks that Ice Bear can keep track of are Deadline Tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`deadline Shop for Groceries /by 23/11/2019 1430`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Got it. Ice Bear has added this task:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "### Add an Event Task - `event \u003cdescription\u003e /at \u003cDate\u003e \u003cTime\u003e`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Another type of task that Ice Bear can keep track of are Event Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`event Chloe\u0027s Birthday Party /at 9/8/2019 1700`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Got it. Ice Bear has added this task:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "### Add a Todo Task - `todo \u003cdescription\u003e`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "The last type of task that Ice Bear can keep track of are Todo Tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`todo Clean up the fridge`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Got it. Ice Bear has added this task:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "## View and Edit the List of Tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Now that tasks have been added to the list, "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "let\u0027s have a look at them, and see how we can make changes to our task list!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "### View the List of Tasks - `list`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "This command allows you to view the task list as a whole."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Each task is assigned a number based on its position in the list. "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "These numbers are used to perform other list commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of outcome: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  3. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "### Deleting Tasks - `delete \u003ctask ID\u003e`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "This command allows you to delete tasks from the task list, based on its index (1-based)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "This index can be obtained from the result when you type the `list` command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "After the deletion of a task, all tasks"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of usage: `delete 1`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  3. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Ice Bear has removed this task:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "###Mark as Done - `done \u003cTask ID\u003e`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Ice Bear allows you to keep track of how much you have achieved in the task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "This means you can mark a task as done, and this status is viewable in the task list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of usage: `delete 1`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Okay. Ice Bear marked this task as done:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  [E][✓] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [E][✓] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "###Undo a Command - `undo`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "If you have made a change that you did not intend to make, "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "this command will enable you to undo that change. Furthermore, previous actions"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "can also be undone using this command."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  3. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Ice Bear has removed this task:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Ice bear has successfully undone the previous action."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  3. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "___"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "##Find a Task"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Ice Bear also allows you to search for tasks in the list based on their name."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [D][✘] Shop for Groceries (by: 23rd of November 2019, 2:30pm)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  2. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  3. [T][✘] Clean up the fridge"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "`find Chloe`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Ice Bear has found these matching tasks in the list:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "  1. [E][✘] Chloe\u0027s Birthday Party (at: 9th of August 2019, 5:00pm)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 174,
      "-": 19
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing a Deadline Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class DeadlineTask extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public DeadlineTask(String details, Calendar deadline) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details, deadline);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String toFileString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"D\" + \" | \" + done + \" | \" + details + \" | \" + fileDateFormat.format(date.getTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateFormat.format(date.getTime()) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 22
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Circle myCircle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static Image userImage \u003d new Image(DialogBox.class.getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static Image dukeImage \u003d new Image(DialogBox.class.getResourceAsStream(\"/images/DaIceBear.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        fillCircle(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void fillCircle(Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        myCircle.setStroke(Color.valueOf(\"#0e18dd\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        myCircle.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return new DialogBox(text, userImage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Obtains the Dialog Box to display the message from Duke to the User."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param text The message to be displayed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A Dialog Box that shows Duke talking to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static DialogBox getDukeDialog(String text) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, dukeImage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 74
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing an Event task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class EventTask extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public EventTask(String details, Calendar date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details, date);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String toFileString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"E\" + \" | \" + done + \" | \" + details + \" | \" + fileDateFormat.format(date.getTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateFormat.format(date.getTime()) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 22
    }
  },
  {
    "path": "src/main/java/IceBear.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Creates a Duke window that displays the conversation between the user and Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class IceBear {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * The Constructor to make a Duke object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param filepath The path to the save file duke.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public IceBear(String filepath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            this.parser \u003d new Parser(new TaskList(new Storage(filepath), ui), ui);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected Ui getUi() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Perform the command and gives a response."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        parser.parse(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return ui.getResponse();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 32
    }
  },
  {
    "path": "src/main/java/IceBearException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Exception handled by the program that provides a custom error message."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class IceBearException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public IceBearException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 8
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static final String FILE_DELIMITER \u003d \"\\\\\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static final String PATH_TO_SAVEFILE \u003d FILE_DELIMITER + \"icebear.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static final String filepath \u003d System.getProperty(\"user.dir\") + PATH_TO_SAVEFILE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private IceBear iceBear \u003d new IceBear(filepath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setIceBear(iceBear);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().showWelcomeMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private IceBear iceBear;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaIceBear.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static final long BYE_DELAY \u003d 1000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void setIceBear(IceBear d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        iceBear \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String response \u003d iceBear.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                DialogBox.getUserDialog(input),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                DialogBox.getDukeDialog(response)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            exitApp();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Delays the program from exiting to show the bye message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void exitApp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        new Timer().schedule(new TimerTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            public void run () { Platform.exit(); }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }, BYE_DELAY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays the welcome message when the app is launched."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void showWelcomeMessage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String welcomeMessage \u003d iceBear.getUi().welcomeMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                DialogBox.getDukeDialog(welcomeMessage)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 77
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Takes in user input and processes it to check whether it is valid."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * If valid, it will perform the specified command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String[] validTaskTypes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * The constructor of the Parser object. This mainly processes the input of the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskList The task list of the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public Parser(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.validTaskTypes \u003d new String[] {\"deadline\", \"event\", \"todo\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Processes the user input and performs an action based on it, if valid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The user\u0027s input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void parse(String command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseByeCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (command.equals(\"undo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseUndoCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (commandArray[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseFindCommand(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (commandArray[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseDoneCommand(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (commandArray[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseDeleteCommand(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (isValidTaskType(commandArray[0])) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseToDoCommand(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                throw new IceBearException(\"Ice Bear does not know what that means.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            ui.printException(e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the bye command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseByeCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.byeMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the list command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseListCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.printList(taskList.getListItems());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the undo command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if there is nothing left to undo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseUndoCommand() throws IceBearException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.undo();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the find command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if no keywords were specified by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseFindCommand(String command) throws IceBearException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Please provide a keyword \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"for Ice Bear to filter the list of tasks with!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.find(command.replaceFirst(\"find \", \"\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the done command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the id was not specified or is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseDoneCommand(String command) throws IceBearException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Ice Bear needs to know which task ID to set as done!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (!commandArray[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The ID of the task must be an integer!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int id \u003d Integer.parseInt(commandArray[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.markAsDone(id);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the delete command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the id was not specified or is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseDeleteCommand(String command) throws IceBearException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Ice Bear needs to know which task ID to delete!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (!commandArray[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The ID of the task must be an integer!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int id \u003d Integer.parseInt(commandArray[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.delete(id);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the to do command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if there was no description provided."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseToDoCommand(String command) throws IceBearException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.addTask(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Check against the list of valid Task types to see if the command is valid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskType the first argument of the command input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return True if the first argument of the command input is valid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public boolean isValidTaskType(String taskType) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (String s : validTaskTypes) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (taskType.equals(s)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 152
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private LinkedList\u003cString\u003e previousSaves;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Constructor of the Storage object. This object mainly reads and write information"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * to the save file in the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param filepath The file path of the save file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public Storage(String filepath) throws IceBearException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            this.file \u003d new File(filepath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Error creating new save file. Your changes won\u0027t be saved!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.previousSaves \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Reads the save file and produces the saved list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return An ArrayList of the saved list of tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Error occurs if the file path is invalid or the file is corrupted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IceBearException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ArrayList\u003cTask\u003e listItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            while (br.ready()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                String item \u003d br.readLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                Task newTask \u003d Task.createFromFile(item);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                sb.append(item).append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                listItems.add(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            previousSaves.add(sb.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return listItems;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) { // this should not occur as the file is hard-coded."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Error occurred while loading file, \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"the file path is invalid:\" + \"\\n\" + e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Error occurred while loading file, \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"the file seems to be corrupted.\" + \"\\n\" + e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Stores a new task in the save file in a specified format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param item The String representation of the task specifically to be stored in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Occurs if the file cannot be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void addNew(String item) throws IceBearException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            FileWriter fw \u003d new FileWriter(new File(filepath), true); // append mode: true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.write(item + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            String s \u003d previousSaves.getLast();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            this.previousSaves.add(s + item + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Error occurred while adding new task! + \\n\" + e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Updates the description of a task in the save file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param list The entire list of tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Occurs if the file cannot be found."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void updateSaveFile(ArrayList\u003cTask\u003e list) throws IceBearException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        StringBuilder newFileContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newFileContent.append(task.toFileString()).append(\"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String save \u003d newFileContent.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        update(save);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.previousSaves.add(save);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Stores the file content without saving."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param newFileContent the new file content."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Occurs if the file cannot be found."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void update(String newFileContent) throws IceBearException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.write(newFileContent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Error while updating task in save file: \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"File not found!\\n\" + e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Undoes the previous action of the user by loading the previous state of the task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return The last known state of the task list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown when there is nothing to undo."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public ArrayList\u003cTask\u003e undo() throws IceBearException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (this.previousSaves.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"There is nothing to undo!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.previousSaves.removeLast();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String save \u003d this.previousSaves.getLast();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ArrayList\u003cTask\u003e listItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (String item : save.split(\"\\n\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (item.equals(\"\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task newTask \u003d Task.createFromFile(item);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            listItems.add(newTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        update(save);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return listItems;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 137
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing a Task in the TaskList."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected Task(String details) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Indicate that the task is done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void setDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Creates the type of task to be added to the list based on user\u0027s command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The entire line of command input by the user into the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A Task object that follows the specifications of the input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected static Task create(String command) throws IceBearException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String taskType \u003d commandArray[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        command \u003d command.replaceFirst(taskType + \" \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return createEventTask(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return createDeadlineTask(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return createToDoTask(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to create an Event task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command the original command by the user without the first parameter."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return An event task, if the command is valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static EventTask createEventTask(String command) throws IceBearException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" /at \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String details \u003d commandArray[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Invalid command format! Proper usage: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"\u0027event \u003cdetails\u003e /at \u003ctiming\u003e\u0027\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return new EventTask(commandArray[0], TimedTask.parseDateTime(commandArray[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to create a Deadline task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command the original command by the user without the first parameter."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A deadline task, if the command is valid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static DeadlineTask createDeadlineTask(String command) throws IceBearException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" /by \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String details \u003d commandArray[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Invalid command format! Proper usage: \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"\u0027deadline \u003cdetails\u003e /by \u003ctiming\u003e\u0027\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return new DeadlineTask(commandArray[0], TimedTask.parseDateTime(commandArray[1]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to create a to do task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command the original command by the user without the first parameter."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A to do task, if the command is valid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static ToDoTask createToDoTask(String command) throws IceBearException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (command.equals(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return new ToDoTask(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Creates the type of task to be added to the list based on the line in the save file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param item The entire line of command input by the user into the program."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A Task object according to the line in the save file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the line does not follow the format for some reason."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected static Task createFromFile(String item) throws IceBearException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] args \u003d item.split(\" \\\\| \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        assert args.length \u003e 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String taskType \u003d args[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        boolean isAlreadyDone \u003d Integer.parseInt(args[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assert args.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask \u003d new DeadlineTask(args[2], TimedTask.parseDateTime(args[3]));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assert args.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask \u003d new EventTask(args[2], TimedTask.parseDateTime(args[3]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assert args.length \u003d\u003d 3;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask \u003d new ToDoTask(args[2]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (isAlreadyDone) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask.setDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * String representation of the Task object that can be processed by the program."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A String that can be written to the save file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected abstract String toFileString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * String representing the Task object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return String representation of the Task object."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        char statusIcon \u003d isDone ? (char) 0x2713 : (char) 0x2718;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[\" + statusIcon + \"] \" + details;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 141
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * An object representing the list of tasks,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * that reads, writes, and updates task information to the hard disk."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private ArrayList\u003cTask\u003e listItems;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    TaskList(Storage storage, Ui ui) throws IceBearException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.listItems \u003d storage.load();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected ArrayList\u003cTask\u003e getListItems() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return listItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Adds a task to the list based on the given command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The command given by the user to be processed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown during the creation of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *     the Task object if the command is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void addTask(String command) throws IceBearException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task newTask \u003d Task.create(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        storage.addNew(newTask.toFileString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        listItems.add(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListAdd(newTask.toString(), listItems.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Mark a task in the list as done based on its ID."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param id the ID of the task that is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the ID input is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void markAsDone(int id) throws IceBearException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (id \u003e listItems.size() || id \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The ID that you have entered is not a valid task ID.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task task \u003d listItems.get(id - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        storage.updateSaveFile(listItems);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListDone(task.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Delete a task in the list based on its ID."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param id the ID of the task that is to be deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown if the ID input is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void delete(int id) throws IceBearException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (id \u003e listItems.size() || id \u003c\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"The ID that you have entered is not a valid task ID.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task task \u003d listItems.remove(id - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        storage.updateSaveFile(listItems);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListDelete(task.toString(), listItems.size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Searches the list for tasks that match the user specified keyword."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param keyword The keyword specified by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void find(String keyword) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ArrayList\u003cTask\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (Task task : listItems) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (task.details.contains(keyword)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                matchList.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.printMatchList(matchList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Undoes the last action made by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Exception thrown when there is nothing to undo."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void undo() throws IceBearException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.listItems \u003d storage.undo();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListUndo();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 91
    }
  },
  {
    "path": "src/main/java/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Represents a task with a date/time attached to it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    Calendar date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    SimpleDateFormat dateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    SimpleDateFormat fileDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Constructor for the TimedTask object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param details The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param date The Calendar object representing the date attached to the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected TimedTask(String details, Calendar date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String suffix \u003d getDaySuffix(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.dateFormat \u003d new SimpleDateFormat(\"d\u0027\" + suffix + \" of\u0027 MMMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        DateFormatSymbols symbols \u003d new DateFormatSymbols(Locale.getDefault());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        symbols.setAmPmStrings(new String[] { \"am\", \"pm\" });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.dateFormat.setDateFormatSymbols(symbols);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.fileDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy kkmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Takes the Calendar object and gets the suffix for the day of the month."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * A day ending with the number 2 should have the suffix \"nd\" to make the word \"2nd\"."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param date The Calendar object of the TimedTask."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return The suffix of the day in the Calendar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String getDaySuffix(Calendar date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int suffixConstant \u003d date.get(Calendar.DAY_OF_MONTH) % 10;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return suffixConstant \u003d\u003d 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                ? \"st\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                : suffixConstant \u003d\u003d 2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                ? \"nd\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                : suffixConstant \u003d\u003d 3"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                ? \"rd\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                : \"th\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Converts the user inputted date/time to a Calendar object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param input the user\u0027s input of the date and time, specified by DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A Calendar object representing the date and time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws IceBearException Thrown when the date or its format is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static Calendar parseDateTime(String input) throws IceBearException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        // Input Validation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] inputArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (inputArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Invalid date/time format!\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"Please follow the format: \u003cDD/MM/YYYY\u003e\u003cSpace\u003e\u003c24hr Time Format\u003e\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        // Date Input Validation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String date \u003d inputArr[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String dateRegex \u003d \"^(\\\\d{1,2})/(\\\\d{1,2})/(\\\\d{4})\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!date.matches(dateRegex)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Invalid date format!\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"Please follow the appropriate Date format: DD/MM/YYYY\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] dateArr \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int day \u003d Integer.parseInt(dateArr[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int month \u003d Integer.parseInt(dateArr[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int year \u003d Integer.parseInt(dateArr[2]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!isValidDate(day, month, year)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Please input a valid Date!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        // Time Input Validation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!inputArr[1].matches(\"\\\\d{4}\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Please follow the 24h Time format: HHMM\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int hour \u003d Integer.parseInt(inputArr[1].substring(0, 2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int minute \u003d Integer.parseInt(inputArr[1].substring(2, 4));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!isValidTime(hour, minute)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new IceBearException(\"Please input a valid Time!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return new Calendar"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .Builder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .setDate(year, month - 1, day)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .setTimeOfDay(hour, minute, 0)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to check if the date provided is valid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param day The number representing the day of the month."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param month The number representing the month."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param year The number representing the year."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return True if the date provided is an actual date in the calendar."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static boolean isValidDate(int day, int month, int year) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (month \u003c 1 || month \u003e 12 || day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (day \u003e 29) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (!((year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || year % 400 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                // year is not a leap year"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                if (day \u003d\u003d 29) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function that checks if the time provided is valid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param hour The hour given in the 24h format."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param minute The minute as given in the 24h format."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return True if the time provided is valid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static boolean isValidTime(int hour, int minute) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 23 \u0026\u0026 minute \u003e\u003d 0 \u0026\u0026 minute \u003c 60;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 136
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing an To Do Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public ToDoTask(String details) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String toFileString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"T\" + \" | \" + done + \" | \" + details;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * This object\u0027s role is to produce messages to be displayed by the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private boolean isEmptyResponse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void setResponse(String response) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        isEmptyResponse \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        assert !isEmptyResponse : \"Cannot return empty response.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Constructor for the Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.isEmptyResponse \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays the welcome message when the user starts the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String welcomeMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"What can Ice Bear do for you today?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Generic response template for displaying an error."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param e The error message to be displayed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void printException(IceBearException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Oops! \" + e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Prints the whole list of items in the order as stored by the program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listItems The list of all the items in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void printList(ArrayList\u003cTask\u003e listItems) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (listItems.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(\"You currently have no tasks!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d listItems.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                sb.append(\"\\n  \")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(i)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(listItems.get(i - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(sb.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Prints the list of items stored by the program that matched the keyword given by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listItems The list of matched items in the task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void printMatchList(ArrayList\u003cTask\u003e listItems) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (listItems.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(\"Ice Bear did not find any matching tasks.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    \"Ice Bear has found these matching tasks in your list:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d listItems.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                sb.append(\"\\n  \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(i)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(listItems.get(i - 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(sb.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message to say goodbye to the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void byeMessage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Ice Bear hopes to see you again soon!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message when a task has been added to the task list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskString The String representation of the added task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listSize The new size of the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListAdd(String taskString, int listSize) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String taskSingular \u003d listSize \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Got it. Ice Bear has added this task: \\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"  \" + taskString + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"Now you have \" + listSize + \" \" + taskSingular + \" in the list.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message when a task in the task list has been set as Done."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskString The String representation of the modified task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListDone(String taskString) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Okay. Ice Bear marked this task as done: \\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"  \" + taskString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message when a task in the task list has been deleted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskString The String representation of the deleted task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listSize The new size of the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListDelete(String taskString, int listSize) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Ice Bear has removed this task:\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"  \" + taskString + \"\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"Now you have \" + listSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message stating that Duke has successfully undone the previous action of the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListUndo() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Ice Bear has successfully undone the previous action.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 133
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" style\u003d\"-fx-padding: 10; -fx-border-color: black;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" style\u003d\"-fx-padding: 10; -fx-background-color: #0e18dd;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \u003cFont name\u003d\"Eras Demi ITC\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "      \u003cCircle fx:id\u003d\"myCircle\" fill\u003d\"DODGERBLUE\" radius\u003d\"50.0\" stroke\u003d\"#0e18dd00\" strokeType\u003d\"INSIDE\" style\u003d\"-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 10, 0, 0, 0);\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "      \u003c/Circle\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 24
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter a command here to interact with Ice Bear!\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \u003cFont name\u003d\"Eras Demi ITC\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \u003cFont name\u003d\"Eras Light ITC\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hvalue\u003d\"1.0\" pannable\u003d\"true\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #7fefff; -fx-border-insets: 5; -fx-border-width: 3; fx-border-style: dashed;\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 26
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    Storage storage \u003d new Storage("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \"D:/Marcus Folder/SCHOOL STUFF/YEAR 2/CS2103T/duke/data/duke.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * The Duke save file has to be cleared before starting any test,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * to ensure that the assertions are accurate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void clearDukeSaveFileBeforeTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * The duke save file has to be cleared after all the tests to clean up the save file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static void clearDukeSaveFileAfterTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Storage storage \u003d new Storage("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    \"D:/Marcus Folder/SCHOOL STUFF/YEAR 2/CS2103T/duke/data/duke.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void updateSaveFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.add(Task.create(\"todo abc\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.add(Task.create(\"event abc /at 1/1/1997 2335\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.get(0).setDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.remove(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void addToSaveFile() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"event abc /at 1/1/1997 2335\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.addNew(t.toFileString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t.toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"event abcd /at 1/2/1997 2335\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.addNew(t2.toFileString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t2.toString(), storage.load().get(1).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 82
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingGoodTodoTask() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            // test case 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"todo abc\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t.toString(), \"[T]\" + \"[\" + (char) 0x2718 + \"] \" + \"abc\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            // test case 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            t.setDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t.toString(), \"[T]\" + \"[\" + (char) 0x2713 + \"] \" + \"abc\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"Exception Occurred.\\n\" + e.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingGoodEventTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"event hello /at 01/01/2011 1500\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[E]\" + \"[\" + (char) 0x2718 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (at: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            t.setDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[E]\" + \"[\" + (char) 0x2713 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (at: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"Exception Occurred.\\n\" + e.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingFailEventTask() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.create(\"event hello /at 01/012011 1500\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"1st Exception was not thrown\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"event /at 01/01/2011 1500\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"2nd Exception was not thrown\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.create(\"event hello /at 01/13/2011 1500\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"3rd Exception was not thrown\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t4 \u003d Task.create(\"event hello /at 32/01/2011 1500\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"4th Exception was not thrown\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t5 \u003d Task.create(\"event hello /at 31/02/2011 1500\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"5th Exception was not thrown\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t6 \u003d Task.create(\"event hello /at 01/13/2011 1500\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"6th Exception was not thrown\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t7 \u003d Task.create(\"event hello /at 01/12/211 1500\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"7th Exception was not thrown\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingGoodDeadlineTask() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"deadline hello /by 01/01/2011 1500\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[D]\" + \"[\" + (char) 0x2718 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (by: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            t.setDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[D]\" + \"[\" + (char) 0x2713 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (by: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"Exception Occurred.\\n\" + e.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingFailDeadlineTask() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.create(\"deadline hello /by 01/012011 1500\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"1st Exception was not thrown\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"deadline /by 01/01/2011 1500\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"2nd Exception was not thrown\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.create(\"deadline hello /by 01/13/2011 1500\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"3rd Exception was not thrown\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t4 \u003d Task.create(\"deadline hello /by 32/01/2011 1500\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"4th Exception was not thrown\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t5 \u003d Task.create(\"deadline hello /by 31/02/2011 1500\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"5th Exception was not thrown\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t6 \u003d Task.create(\"deadline hello /by 01/13/2011 1500\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"6th Exception was not thrown\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t7 \u003d Task.create(\"deadline hello /by 01/12/211 1500\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"7th Exception was not thrown\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void readingFromFile() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.createFromFile(\"T | 0 | join sports club\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[T][\" + (char) 0x2718 + \"] join sports club\", t1.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.createFromFile(\"T | 1 | join sports club\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[T][\" + (char) 0x2713 + \"] join sports club\", t2.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.createFromFile(\"D | 0 | don\u0027t die | 22/01/2019 2234\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[D][\" + (char) 0x2718"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"] don\u0027t die (by: 22nd of January 2019, 10:34pm)\", t3.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t4 \u003d Task.createFromFile(\"E | 1 | don\u0027t die | 22/11/2019 2234\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[E][\" + (char) 0x2713"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"] don\u0027t die (at: 22nd of November 2019, 10:34pm)\", t4.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void writingToFile() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.create(\"event hello /at 01/01/2011 1500\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"E | 0 | hello | 1/1/2011 1500\", t1.toFileString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"deadline hello /by 01/01/2011 1500\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"D | 0 | hello | 1/1/2011 1500\", t2.toFileString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.create(\"todo hello\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"T | 0 | hello\", t3.toFileString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IceBearException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 180
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "java -classpath ..\\bin IceBear \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.IceBear`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "       mainClassName \u003d \"seedu.duke.IceBear\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "│     └─seedu/duke/IceBear.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 3,
      "-": 167
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `IceBear` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class IceBear extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Application.launch(IceBear.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 3,
      "-": 107
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for IceBear"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "In this tutorial, we will be creating a GUI for IceBear from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "![Mockup for IceBear](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "![IceBear\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class IceBear extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "![IceBear\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        stage.setTitle(\"IceBear\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "![IceBear\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 8,
      "-": 150
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "For IceBear, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and IceBear\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class IceBear extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing IceBear\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    return \"IceBear heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and IceBear’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "You have successfully implemented a fully functional GUI for IceBear!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 7,
      "-": 236
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Let\u0027s return to IceBear and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "As part of the effort to separate the code handling IceBear\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private IceBear duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void setDuke(IceBear d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing IceBear\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `IceBear` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * A GUI for IceBear using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private IceBear duke \u003d new IceBear();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 8,
      "-": 286
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\IceBear.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "   java -classpath ..\\bin IceBear \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/IceBear.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "   java -classpath ../bin IceBear \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 4,
      "-": 70
    }
  }
]
