[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "checkstyle{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "run{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "version \u00270.1.0\u0027"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 42
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final DukeDateTime byDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.byDate \u003d new DukeDateTime(by);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses the query as a Deadline Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in A query from the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A Deadline task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Task parse(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String delimiter \u003d \"/by \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(delimiter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String description \u003d in.next().trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(\"\\\\z\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The end date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String by \u003d in.next().substring(delimiter.length()).trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Deadline(description, by);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getDataBaseFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"D | %d | %s | %s |\\r\\n\", (isDone ? 1 : 0), description, byDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + byDate + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 44
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String MESSAGE_PADDING  \u003d \"     \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String MESSAGE_BOUNDARY \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String MESSAGE_SAD_FACE \u003d \"\\u2639\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Class Variables"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructor for the class Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //#region [Print Response Helper Functions]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints a single response."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param responseHeader A message to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private void printResponse(String responseHeader) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(responseHeader);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints a response and list the given tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param responseHeader A message to the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param listOfTasks The list of tasks to be displayed to the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private void printResponse(String responseHeader, List\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(responseHeader);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (listOfTasks !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            int indexOfTask \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            for (Task currentTask : listOfTasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                indexOfTask +\u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                System.out.print(String.format(\"%d.\", indexOfTask));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                System.out.println(currentTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints a single response and list a specified task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param responseHeader A message to the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param refTask The task to be displayed to the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param displayNumOfTasks Display number of task(s) in task list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private void printResponseSingleTask(String responseHeader, Task refTask, boolean displayNumOfTasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(responseHeader);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(\"  \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(refTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (displayNumOfTasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    \"Now you have %d task%s in the list.\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    this.taskList.size(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    (this.taskList.size() \u003e 1) ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //#endregion [Print Response Helper Functions]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Marks a specified task as done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in The query to process."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return The task that was marked as done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //#region [Business Logic]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Task markTaskAsDone(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNextInt()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task reference number needs to be an integer\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        int taskIndexRef \u003d in.nextInt();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (in.hasNext()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Too many arguments for the \u0027mark as done\u0027 command\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (0 \u003c taskIndexRef \u0026\u0026 taskIndexRef \u003c\u003d this.taskList.size()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Task taskRef \u003d this.taskList.get(taskIndexRef - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            taskRef.markAsDone();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return taskRef;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new DukeInvalidCommandException(\"No such task was found\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Deletes the specified task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in The query to process."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return The task that was deleted."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //#region [Business Logic]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Task deleteTask(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNextInt()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Task reference number needs to be an integer\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        int taskIndexRef \u003d in.nextInt();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (in.hasNext()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeIllegalArgumentException(\"Too many arguments for the \u0027delete task\u0027 command\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (0 \u003c taskIndexRef \u0026\u0026 taskIndexRef \u003c\u003d this.taskList.size()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Task taskRef \u003d this.taskList.get(taskIndexRef - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.taskList.remove(taskIndexRef - 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return taskRef;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        throw new DukeInvalidCommandException(\"No such task was found\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Executes the user\u0027s query and finds the appropriate response."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param query A query from the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean representing whether Duke should continue the chat."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private boolean giveResponse(String query) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        boolean shouldContinueChat \u003d true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Scanner in \u003d new Scanner(query);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Task newTask \u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!in.hasNext()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new DukeException(\"Query should not be empty\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            //Try to parse User\u0027s query"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            String command \u003d in.next();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                newTask \u003d ToDo.parse(in);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                newTask \u003d Deadline.parse(in);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                newTask \u003d Event.parse(in);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                printResponse(\"Here are the tasks in your list:\", this.taskList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Task completedTask \u003d markTaskAsDone(in);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                printResponseSingleTask(\"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    completedTask, false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Task deletedTask \u003d deleteTask(in);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                printResponseSingleTask(\"Noted. I\u0027ve removed this task:\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    deletedTask, true);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                shouldContinueChat \u003d false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                printResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new DukeInvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            //Info user that an error occurred"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            printResponse(MESSAGE_SAD_FACE + \" OOPS!!! \" + ex.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            //Clean up"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //If a new Task is created, handle it here"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            taskList.add(newTask);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            printResponseSingleTask(\"Got it. I\u0027ve added this task:\", newTask, true);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return shouldContinueChat;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //#endregion [Business Logic]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * To run Duke\u0027s program."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void spin() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        boolean continueChat;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        FileReaderWriter.tryReadFromDataBase(this.taskList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Scanner myScanner \u003d new Scanner(System.in);  // Create a Scanner object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        printResponse(\"Hello! I\u0027m Duke\\n\" + MESSAGE_PADDING + \"What can I do for you?\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            //Get query from user"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            String userQuery \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            //Find and give Response"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            continueChat \u003d giveResponse(userQuery);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } while (continueChat);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        myScanner.close();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        FileReaderWriter.tryWriteToFile(this.taskList);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Duke myObj \u003d new Duke();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        myObj.spin();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 249,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeDateTime {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String DATETIMEFORMAT \u003d \"dd/M/yy HHmm\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String PRINTDATETIMEFORMAT \u003d \"dd MMM yyyy hh:mm a\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private String dateTimeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Date localDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private SimpleDateFormat localDateFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private SimpleDateFormat localDatePrintFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * A Wrapper class for DateTime Object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param dateTimeString the date time object to parse"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.dateTimeString \u003d dateTimeString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.localDateFormatter \u003d new SimpleDateFormat(DATETIMEFORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.localDatePrintFormatter \u003d new SimpleDateFormat(PRINTDATETIMEFORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.localDateTime \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.localDateTime \u003d this.localDateFormatter.parse(dateTimeString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (ParseException ex2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                this.localDateTime \u003d this.localDatePrintFormatter.parse(dateTimeString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } catch (ParseException ex1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                this.localDateTime \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Determine whether the object is a valid DateTime Object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean determining whether the object is a valid DateTime Object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isValidDateTimeObject() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.localDateTime !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Get the DateTime Object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return a DateTime Object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Date getLocalDateTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.localDateTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (isValidDateTimeObject()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return localDatePrintFormatter.format(localDateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return this.dateTimeString;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 62
    }
  },
  {
    "path": "src/main/java/DukeEmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeEmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeEmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 5
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 5
    }
  },
  {
    "path": "src/main/java/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeIllegalArgumentException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 5
    }
  },
  {
    "path": "src/main/java/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeInvalidCommandException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final DukeDateTime at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.at \u003d new DukeDateTime(at);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses the query as a Event Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in A query from the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A Event task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Task parse(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String delimiter \u003d \"/at \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(delimiter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String description \u003d in.next().trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(\"\\\\z\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The duration of a event cannot be empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String at \u003d in.next().substring(delimiter.length()).trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Event(description, at);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getDataBaseFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"E | %d | %s | %s |\\r\\n\", (isDone ? 1 : 0), description, at);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 44
    }
  },
  {
    "path": "src/main/java/FileReaderWriter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class FileReaderWriter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String DataBaseLocation \u003d System.getProperty(\"user.dir\") + \"/data/duke.csv\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String CsvDelimiter \u003d \"\\\\s\\\\|\\\\s\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Try to load the list of task from the database File."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param myTaskList The destination which the list of Task from the database will be loaded to."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean indicating whether the list of task were sucessfully loaded from the database."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static boolean tryReadFromDataBase(List\u003cTask\u003e myTaskList) throws NullPointerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        boolean successfullyLoadedDb \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (myTaskList \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new NullPointerException(\"myTaskList should not be Null\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        myTaskList.clear();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            File db \u003d new File(DataBaseLocation);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Scanner in \u003d new Scanner(db);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            in.useDelimiter(CsvDelimiter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            while (in.hasNextLine() \u0026\u0026 in.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                String taskType \u003d in.next().trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (taskType.equals(\"END\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    successfullyLoadedDb \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Task newTask \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                boolean markDone \u003d (in.nextInt() !\u003d 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                String description \u003d in.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                case \"T\": //Todo Task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                case \"D\": //Deadline Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    newTask \u003d new Deadline(description, in.next());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                case \"E\": //Event Task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    newTask \u003d new Event(description, in.next());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                case \"\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    //Ignore Blank line"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    throw new IllegalStateException(\"Unexpected value: \" + taskType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    if (markDone) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    myTaskList.add(newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(\"[Info]: Successfully loaded DB File\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(\"[Warning]: Could find DB File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (IllegalStateException ex) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(\"[Warning]: DB File is corrupt. \" + ex.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(\"[Warning]: DB File is corrupt. \" + ex.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!successfullyLoadedDb) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            myTaskList.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return successfullyLoadedDb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Try to save the given list of task to the database file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param taskList the list of tasks to be saved."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean indicating whether the list of task were sucessfully saved to the database."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static boolean tryWriteToFile(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            File directory \u003d new File(DataBaseLocation).getParentFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!directory.exists()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                directory.mkdir();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(DataBaseLocation));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            for (Task myTask : taskList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                writer.write(myTask.getDataBaseFormat());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            writer.write(\"END\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(\"[Info]: Saved DB File successfully\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(\"[Warning]: Could Write DB File\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 120
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public abstract String getDataBaseFormat();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 24
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses the query as a ToDo Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in A query from the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A ToDo task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Task parse(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(\"\\\\z\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new ToDo(in.next().trim());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getDataBaseFormat() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"T | %d | %s |\\r\\n\", (isDone ? 1 : 0), description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 32
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✘] read book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 1 task in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     1.[T][✘] read book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✓] read book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✘] join sports club"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✓] join sports club"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✘] borrow book"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     1.[T][✓] read book"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     4.[T][✓] join sports club"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     5.[T][✘] borrow book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 77
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.txt"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "diff ACTUAL.txt EXPECTED.txt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 34
    }
  },
  {
    "path": "text-ui-test/test.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#Find bash file location"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "SCRIPTPATH\u003d\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#Check if test files are available"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ -f FILENAME ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"Could not find any test files in: ${SCRIPTPATH}\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#Run test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "for f in $SCRIPTPATH/*.in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "do"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   if [ -f ${f%.in}.out ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   then"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      echo \"Running: $(basename $f)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      java -classpath ../bin Duke \u003c $f \u003e $(basename ${f%.in}).actual"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      # compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      diff -u $(basename ${f%.in}).actual ${f%.in}.out"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "          echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "          echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      fi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      echo \"Could not find output file for $(basename $f)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "done"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 49
    }
  }
]
