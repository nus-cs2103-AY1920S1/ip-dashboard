[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\tid \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\tid \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tid \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "version \u00270.2.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\ttoolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tarchiveBaseName.set(\"duke\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tarchiveVersion.set(\"0.2.0\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tarchiveClassifier.set(null)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tarchiveAppendix.set(null)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tstandardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tversion \u003d \"11.0.2\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tmodules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tString javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\ttestImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "test {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\tuseJUnitPlatform()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 53,
      "-": 13
    }
  },
  {
    "path": "data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "D | 1 | return book | 12/12/2019 1700"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "E | 1 | meeting | 12/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "T | 0 | buy bread"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "T | 0 | read book"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Welcome from Duke User Guide. Here, you will find how to use Duke Application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "- [What is Duke?](#what-is-duke)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [Image of Duke](#image-of-duke)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "- [Commands](#commands)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`list` - Lists down all the task](#list---lists-down-all-the-task)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`todo \u003cDescription\u003e` - to add a todo task](#todo-description---to-add-a-todo-task)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`deadline \u003cDescription\u003e /by \u003cDate in DD/MM/YYYY\u003e \u003cTime in HHMM\u003e`- to add a deadline](#deadline-description-by-date-in-ddmmyyyy-time-in-hhmm--to-add-a-deadline)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`event \u003cDescription\u003e\u0027 /at \u003cDate in DD/MM/YYYY\u003e \u003cTime in HHMM\u003e` - to add an event](#event-description-at-date-in-ddmmyyyy-time-in-hhmm---to-add-an-event)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`delete \u003cTask Number\u003e` - to delete a task](#delete-task-number---to-delete-a-task)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`done \u003cTask Number\u003e` - to mark a task as done](#done-task-number---to-mark-a-task-as-done)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`undo` - to undo previous actions](#undo---to-undo-previous-actions)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`find \u003ckeyword\u003e` - to list down tasks with particular keyword](#find-keyword---to-list-down-tasks-with-particular-keyword)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    - [`bye` - to exit Duke](#bye---to-exit-duke)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "## What is Duke?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " **Duke** is a friendly chatbot application which allow you to manage your daily tasks by keeping track of them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### Image of Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "![Image of Duke](Ui.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `list` - Lists down all the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will list down all the task being tracked by Duke"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "1. [T][] read book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `todo \u003cDescription\u003e` - to add a todo task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will add a task without any time attribute into the list of tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`todo buy bread`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    [T][ ] buy bread"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Now you have \u003cNumber of Tasks\u003e in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `deadline \u003cDescription\u003e /by \u003cDate in DD/MM/YYYY\u003e \u003cTime in HHMM\u003e`- to add a deadline"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will add a task with a deadline into the list of tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`deadline return book /by 25/09/2019 1500`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    [D][ ] return book (by: 25/09/2019, Wed, 3:00PM)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Now you have \u003cNumber of Tasks\u003e in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `event \u003cDescription\u003e\u0027 /at \u003cDate in DD/MM/YYYY\u003e \u003cTime in HHMM\u003e` - to add an event"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will add an event with a time attribute into the list of tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`event meeting /at 30/09/2019 1400`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    [E][ ] meeting (at: 30/09/2019, Wed, 2:00PM)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Now you have \u003cNumber of Tasks\u003e in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `delete \u003cTask Number\u003e` - to delete a task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will delete an event located at a particular index number."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    [T][ ] buy bread"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Now you have \u003cNumber of Tasks\u003e in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `done \u003cTask Number\u003e` - to mark a task as done"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will mark a task / deadline / event located at a particular index number."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    [D][O] return book (by: 25/09/2019, Wed, 3:00PM)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `undo` - to undo previous actions"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will undo your previous done actions such as deleting, adding, marking as done."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "You have just undid your previous action!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "1. [T][ ] buy bread"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "2. [D][ ] return book (by: 25/09/2019, Wed, 3:00PM)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "3. [E][ ] meeting (at: 30/09/2019, Wed, 2:00PM)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `find \u003ckeyword\u003e` - to list down tasks with particular keyword"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will list down all the tasks with contains keyword in their description."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "1. [D][ ] return book (by: 25/09/2019, Wed, 3:00PM)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "### `bye` - to exit Duke"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "This command will close the duke application."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 176,
      "-": 13
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns dialog box which includes user image and input text."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param text text to be displayed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param img image to be displayed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return dialog box which includes user image and input text."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns dialog box which includes duke image and response text."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param text text to be displayed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param img image to be displayed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return dialog box which includes duke image and response text."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 71
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private List\u003cTaskList\u003e historicalTaskLists;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Duke Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws FileNotFoundException while input text file cannot be found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException while input text file cannot be created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            storage \u003d new Storage(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            ui.showWelcomeScreen();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            historicalTaskLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Ui.printErrorMessage(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Runs Duke Program for Console."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Command newCommand \u003d Parser.retrieveCommandFromString(sc.nextLine());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                newCommand.executeCommand(taskList, storage, ui, historicalTaskLists);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                if (newCommand instanceof ExitCommand) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                ui.printErrorMessage(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Command command \u003d Parser.retrieveCommandFromString(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return command.executeCommand(taskList, storage, ui, historicalTaskLists);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 70,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 11
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            stage.setX(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            stage.setY(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            duke \u003d new Duke();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 43
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(GuiResponse.WELCOMEMESSAGE, dukeImage));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                DialogBox.getUserDialog(\"\\n\" + input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (response.equals(\"\\nBye. Hope to see you again soon!\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 57
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for adding tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for AddCommand Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.newTask \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of adding task into the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList the list of tasks to be added to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage the storage to store inside hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui the ui for user interaction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert newTask !\u003d null : \"A new task being added should not be a null object.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "      "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        TaskList record \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        record.replaceAll(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        historicalTaskLists.add(record);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return GuiResponse.getAddedAcknowledgement(newTask, taskList.getSize());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 52
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Abstract Command Class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Abstract method to execute respective command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when Duke error occurs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when IO error occurs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public abstract String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws DukeException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 27
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for delete tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for DeleteCommand Object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index the index of the task to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes deletion of task from task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when index is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (index \u003e\u003d taskList.getSize() || index \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new InvalidIndexException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        TaskList record \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        record.replaceAll(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        historicalTaskLists.add(record);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Task deletedTask \u003d taskList.deleteAt(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert deletedTask !\u003d null : \"A task which has been deleted cannot be a null object.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return GuiResponse.getRemovedAcknowledgement(deletedTask, taskList.getSize());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 58
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for changing status of task to completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for DoneCommand Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task whose status will be changed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of changing the status of task to be completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when index is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (index \u003e\u003d taskList.getSize() || index \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new InvalidIndexException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        TaskList record \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        record.replaceAll(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        historicalTaskLists.add(record);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "      "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.replace(index, taskList.getAtIndex(index).changeToCompletedStatus());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return GuiResponse.getDoneAcknowledgement(taskList.getAtIndex(index));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 57
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for exiting the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of exiting Duke program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return GuiResponse.GOODBYEMESSAGE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 32
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for looking for match cases in the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for FindCommand Object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param keyword to search for inside the task list later on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of looking for keyword matches inside the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        TaskList tempTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert (!keyword.equals(\"\")) : \"Search keyword should not be an empty string.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Task t \u003d taskList.getAtIndex(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                tempTaskList.add(t);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return GuiResponse.getFoundTaskListInString(tempTaskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 50
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for view the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of displaying task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws FileNotFoundException when textfile cannot be found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws UnsupportedEncodingException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws FileNotFoundException, UnsupportedEncodingException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (historicalTaskLists.size() \u003e 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            taskList.replaceAll(historicalTaskLists.remove(historicalTaskLists.size() - 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return GuiResponse.getSuccessfulUndoAcknowledgement(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return GuiResponse.getUnableToUndoMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ViewListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.GuiResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for view the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ViewListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of displaying task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param historicalTaskLists storage for previous version of Task List for undo"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String executeCommand(TaskList taskList, Storage storage, Ui ui, List\u003cTaskList\u003e historicalTaskLists) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert taskList !\u003d null : \"A Task List which is going to be displayed should not be a null object.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert taskList !\u003d null : \"A Task List which is going to be displayed should not be a null object.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return GuiResponse.getTaskListInString(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 32
    }
  },
  {
    "path": "src/main/java/duke/component/GuiResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * A class to provide GUI response messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class GuiResponse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String WELCOMEMESSAGE \u003d \"\\nHello! I\u0027m Duke\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static final String GOODBYEMESSAGE \u003d \"\\nBye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns acknowledgement of certain task is changed to status of \u0027completed\u0027 to task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task whose status is being changed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getDoneAcknowledgement(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\" + \"\\n\\t\" + task.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns acknowledgement of certain task is added to the task list and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * number of items in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task being added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskCount number of tasks in the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getAddedAcknowledgement(Task task, int taskCount) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\nNow you have \" + taskCount + \" tasks in the list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns acknowledgement of certain task is deleted from the task list and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * number of items in the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task to be printed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskCount number of tasks in the task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getRemovedAcknowledgement(Task task, int taskCount) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t\" + task.toString()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + taskCount"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \" tasks in the list.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns a certain task list with Duke format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList to be printed on display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getTaskListInString(TaskList taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"Here are the tasks in your list:\" + \"\\n\" + taskList.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns a certain task list with match cases in Duke format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList to be printed on display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getFoundTaskListInString(TaskList taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"\\nHere are the matching tasks in your list:\" + \"\\n\" + taskList.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns unsuccessful undo operation message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getUnableToUndoMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"\\nSorry! Unable to undo anymore. :(\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns an acknowledgment that undo is successful."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList the task list to be printed after successful undo"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String getSuccessfulUndoAcknowledgement(TaskList taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"You have just undid your previous action!\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\nHere are the tasks in your list:\" + \"\\n\" + taskList.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 78
    }
  },
  {
    "path": "src/main/java/duke/component/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.UndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.ViewListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.NotEnoughArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for translating and interpreting the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns data and time form input String."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param inputs input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return date and time from input String"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static LocalDateTime getDateAndTimeFromString(String inputs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] time \u003d inputs.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] dateInString \u003d time[0].split(\"\\\\/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        LocalDateTime dateAndTime \u003d LocalDateTime.of(Integer.parseInt(dateInString[2]),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(dateInString[1]),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(dateInString[0]),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(time[1]) / 100,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(time[1]) % 100);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Return array of string containing name as first element and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * time as second element retrieved from unknown array of strings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param inputs input string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return array of string containing name as first element and time as second element"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String[] breakDownIntoNameAndTime(String[] inputs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert inputs.length \u003e 0 : \"The length of the input array of strings must be greater than 0\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] result \u003d {\"\", \"\"};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (index \u003c inputs.length \u0026\u0026 !(inputs[index].charAt(0) \u003d\u003d \u0027/\u0027)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result[0] \u003d result[0] + inputs[index] + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        //Skip the /at or /by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (index \u003c inputs.length) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result[1] \u003d result[1] + inputs[index] + \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns an array of sub-strings separated by certain string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param separator to be used for separating string into array of sub-strings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return array of sub-strings separated by separator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String[] breakDownString(String input, String separator) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert separator !\u003d null : \"A separator which is going to be used cannot be a null object\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return input.split(separator);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns respective command from user input after translating and interpretation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param input input string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return respective duke command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when encounters invalid inputs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static Command retrieveCommandFromString(String input) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] inputs \u003d Parser.breakDownString(input, \" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] time;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (inputs[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new ViewListCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new DukeException(\"The task Number cannot be empty.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            for (int i \u003d 1; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                name \u003d name + inputs[i] + \" \";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            name \u003d name.substring(0, name.length() - 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Todo newTask \u003d new Todo(name);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new AddCommand(newTask);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"deadline\") || inputs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            String inputType \u003d inputs[0];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                if (inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new NotEnoughArgumentException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new NotEnoughArgumentException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            inputs \u003d Parser.breakDownIntoNameAndTime(inputs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs[1].equals(\"\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                if (inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new NotEnoughArgumentException(\"The end time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new NotEnoughArgumentException(\"The time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            name \u003d inputs[0].substring(0, inputs[0].length() - 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            LocalDateTime dateAndTime \u003d Parser.getDateAndTimeFromString("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                                            inputs[1].substring(0, inputs[1].length() - 1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                newTask \u003d new Deadline(name, dateAndTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                newTask \u003d new Event(name, dateAndTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new AddCommand(newTask);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new NotEnoughArgumentException(\"The task Number cannot be empty.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new NotEnoughArgumentException(\"The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new FindCommand(inputs[1]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"undo\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 172
    }
  },
  {
    "path": "src/main/java/duke/component/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for storing and retrieving tasks from hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private String directoryPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private File inputFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private File directory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for storage object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param currentWorkingDirectoryPath path to the current working directory of the program"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Storage(String currentWorkingDirectoryPath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert currentWorkingDirectoryPath !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                : \"The path to the current working directory cannot be a null object.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.directoryPath \u003d currentWorkingDirectoryPath + \"/data\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.filePath \u003d currentWorkingDirectoryPath + \"/data/Duke.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.directory \u003d new File(directoryPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.inputFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Loads tasks from storage at hard disk into the program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return list of tasks loaded with task from hard disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws FileNotFoundException when input file cannot be found."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException           when fails to create new file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!this.directory.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            this.directory.mkdir();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (!this.inputFile.exists()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            this.inputFile.createNewFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Scanner txtSC \u003d new Scanner(inputFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (txtSC.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            String[] historicalInputs \u003d Parser.breakDownString(txtSC.nextLine(), \"\\\\|\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            boolean isCompleted;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Task oldTask \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (historicalInputs[1].charAt(1) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                isCompleted \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                isCompleted \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            switch (historicalInputs[0].charAt(0)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                oldTask \u003d new Todo(historicalInputs[2].substring(1), isCompleted);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String[] time \u003d historicalInputs[3].substring(1).split(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                oldTask \u003d new Deadline("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        historicalInputs[2].substring(1, historicalInputs[2].length() - 1),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        Parser.getDateAndTimeFromString(historicalInputs[3].substring(1)),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        isCompleted);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                oldTask \u003d new Event("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        historicalInputs[2].substring(1, historicalInputs[2].length() - 1),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        Parser.getDateAndTimeFromString(historicalInputs[3].substring(1)),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        isCompleted);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            assert oldTask !\u003d null : \"Old tasks from files should not be null at this point\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            taskList.add(oldTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        txtSC.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Saves tasks from the program into hard disk."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks to be stored into hard disk."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws FileNotFoundException        when input file cannot be found."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws UnsupportedEncodingException when encoding error occurs."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void save(TaskList taskList) throws FileNotFoundException, UnsupportedEncodingException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        PrintWriter fileWriter \u003d new PrintWriter(filePath, \"UTF-8\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            fileWriter.println(taskList.getAtIndex(i).toIndicationInsideFile());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 117
    }
  },
  {
    "path": "src/main/java/duke/component/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for temporary storage of tasks in the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for empty TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for TaskList object loaded with tasks from hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Adds new task into the current task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param newTask is the new task to be added."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assert newTask !\u003d null : \"A new task to be added cannot be a null object\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Deletes task located at the certain index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task to be deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when index is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task deleteAt(int index) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (index \u003e\u003d taskList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new DukeException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return this.taskList.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Fetches task located at the certain index without deleting it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task to be fetched."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the fetched task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task getAtIndex(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the size of the teas list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Replaces the task located at certain index with new task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task to be replaced."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param newTask new task which replaces."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void replace(int index, Task newTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.taskList.set(index, newTask.changeToCompletedStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Removes all the tasks in the current list and adds all the tasks from the input task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param newTaskList the task list whose tasks are to be appended."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void replaceAll(TaskList newTaskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (Task t : newTaskList.taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            this.taskList.add(t);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user-readable form of task list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user-readable form of task list in String."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result \u003d result + \"\\n\" + (i + 1) + \". \" + taskList.get(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 100
    }
  },
  {
    "path": "src/main/java/duke/component/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for User interaction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Displays initial welcome screen of the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void showWelcomeScreen() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String logo \u003d \"____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\" \" + logo + \"\\n\\t Hello! I\u0027m Duke\" + \"\\n\" + \"\\t What can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Displays (terminating/Good bye)ending screen of the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void showGoodByeScreen() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints acknowledgement of certain task is changed to status of \u0027completed\u0027 to task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task whose status is being changed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printDoneAcknowledgement(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Nice! I\u0027ve marked this task as done:\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t   \" + task.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints acknowledgement of certain task is added to the task list and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * number of items in the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task being added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskCount number of tasks in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printAddedAcknowledgement(Task task, int taskCount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Got it. I\u0027ve added this task: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t   \" + task.toString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints acknowledgement of certain task is deleted from the task list and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * number of items in the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task to be printed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskCount number of tasks in the task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printRemovedAcknowledgement(Task task, int taskCount) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Noted. I\u0027ve removed this task:\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t   \" + task.toString()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Now you have \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + taskCount"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints message of the certain exceptions."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param e exceptions to be printed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (e instanceof FileNotFoundException) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            printErrorWithFormat(\"Error: Input Text File not Found! Program Exiting...\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (e instanceof UnsupportedEncodingException) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            printErrorWithFormat(\"Error: Unable to write to file! Program Exiting...\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            printErrorWithFormat(e.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints a certain message with Duke format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param message message to be printed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void displayWithFormat(String message) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t \" + message);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints a certain error message with Duke format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param errorMessage error message to be printed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printErrorWithFormat(String errorMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println(\"\\t \" + errorMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints a certain task list with Duke format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList to be printed on display."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.print(\"\\t____________________________________________________________\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(taskList.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Printst a certain task list with match cases in Duke format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList to be printed on display."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printFoundTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.print(\"\\t____________________________________________________________\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(taskList.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 129
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Exception Class for Duke error."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for DukeException Object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param message Message of the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user-readable form of error."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user-readable form of error in String format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"OOPS!!! \" + getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Exception Class for Duke error."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for InvalidCommandException Object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param message Message of the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user-readable form of error."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user-readable form of error in String format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"OOPS!!! \" + getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Exception Class for Duke error."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for InvalidIndexException Object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param message Message of the error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user-readable form of error."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user-readable form of error in String format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"OOPS!!! \" + getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/NotEnoughArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Exception Class for Duke error."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class NotEnoughArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for NotEnoughArgumentException Object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param message Message of the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public NotEnoughArgumentException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user-readable form of error."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user-readable form of error in String format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"OOPS!!! \" + getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 24
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private LocalDateTime deadLine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Deadline object with default done status."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param deadLine the deadline in date and time format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline(String description, LocalDateTime deadLine) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Deadline object with certain done status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param deadLine the deadline in date and time format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline(String description, LocalDateTime deadLine, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of the deadline to \u0027completed\u0027."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new deadline object with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline changeToCompletedStatus() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Deadline(super.description, this.deadLine, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user readable form of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user readable form of the task in String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy, E, h:mm a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[D][O]\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[D][ ]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + description + \" (by: \" + deadLine.format(formatter) + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"D | \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description + \" | \" + deadLine.format(formatter) + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + (deadLine.getHour() * 100 + deadLine.getMinute());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Event Object with default done status."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param time the time of the event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Event Object with certain done status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param time  the time of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param isDone the status of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event(String description, LocalDateTime time, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of the event to \u0027completed\u0027."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new event object with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event changeToCompletedStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Event(super.description, this.time, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user readable form of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user readable form of the task in String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy, E, h:mm a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[E][O]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[E][ ]\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + description + \" (at: \" + time.format(formatter) + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"E | \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description + \" | \" + time.format(formatter)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \" \" + (time.getHour() * 100 + time.getMinute());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 77
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Task object with default done status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Task object with certain done status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param isDone status of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the boolean status of a task if it is completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the boolean status of a task if it is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of a task to \u0027completed\u0027 by returning new object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new task with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task changeToCompletedStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"T | \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Todo object with default done status."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Todo object with certain done status."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of the Todo to \u0027completed\u0027."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new Todo object with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo changeToCompletedStatus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Todo(super.description, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user readable form of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user readable form of the task in String."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[T][O]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[T][ ]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"T | \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 61
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: rgba(0, 0, 0, 100);\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cImage url\u003d\"@../images/DaDuke.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cDropShadow color\u003d\"WHITE\" height\u003d\"168.76\" radius\u003d\"82.6875\" width\u003d\"163.99\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003cInsets left\u003d\"35.0\" right\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 34
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"700.0\" prefWidth\u003d\"700.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"660.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"625.0\" AnchorPane.bottomAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"625.0\" layoutY\u003d\"660.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"75.0\" style\u003d\"-fx-background-color: #090a0c,        linear-gradient(#38424b 0%, #1f2429 20%, #191d22 100%),        linear-gradient(#20262b, #191d22),        radial-gradient(center 50% 0%, radius 100%, rgba(114,131,148,0.9), rgba(255,255,255,0));; -fx-background-radius: 5,4,3,5;; -fx-background-insets: 0,1,2,0; -fx-text-fill: linear-gradient(white, #d0d0d0);; -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 5, 0.0 , 0 , 1 );; -fx-font-size: 12; -fx-padding: 10 20 10 20;\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"660.0\" prefWidth\u003d\"700.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"660.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: rgba(0, 0, 0, 100);\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Test Class for Duke Class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(1, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 13
    }
  },
  {
    "path": "src/test/java/duke/component/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Test Class for testing TaskList class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private  TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests add method of TaskList class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void addTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(1, taskList.getSize());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests deleteAt method of TaskList class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException if index is out of bound"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void deleteAtTest() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Task deletedTask \u003d taskList.deleteAt(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"read book\", deletedTask.getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getAtIndex method of TaskList class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getAtIndexTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"read book\", taskList.getAtIndex(0).getDescription());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getSize method of TaskList class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getSizeTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Deadline(\"return book\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(2, taskList.getSize());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests replace method of TaskList class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void replaceTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.replace(0, new Todo(\"buy break\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"buy break\", taskList.getAtIndex(0).getDescription());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Test ToString method of TaskList class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expected \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        expected \u003d expected + \"\\n\\t 1. \" + taskList.getAtIndex(0).toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expected, taskList.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 87
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Test class for testing Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getCompletedStatus method of Task class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getCompletedStatusTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(false, task.isCompleted());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"read book\", true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(true, task.isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests changeToCompletedStatus method of Task class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void changeToCompletedStatusTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d (new Task(\"read book\")).changeToCompletedStatus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(true, task.isCompleted());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getDescription method of Task class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getDescriptionTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"buy bread\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"buy bread\", task.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests toIndicationInsideFile method of Task class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void toIndicationInsideFileTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"buy bread\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expected \u003d \"T | 0 | buy bread\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expected, task.toIndicationInsideFile());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 52
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 21
    }
  }
]
