[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 28,
      "-": 15
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new DialogBox object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param text The text to display in the DialogBox."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param img The image to display as the profile picture within the DialogBox."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Flips the view of the DialogBox."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a DialogBox from the point of view of the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param text The text to display in the DialogBox."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param img The image to display as the profile picture within the DialogBox."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a DialogBox from the point of view of Duke."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param text The text to display in the DialogBox."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param img The image to display as the profile picture within the DialogBox."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 80
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Duke class. Creates a new Ui, TaskList and Storage object, then runs the main method of the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the Ui object used to display messages to the user. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the Storage object used to read/write from file. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the TaskList object used to add/delete tasks. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    // Solution below adapted from https://github.com/nexolute/duke/blob/master/src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initializes the Duke object by setting the Ui, Storage and TaskList objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param mainWindow the MainWindow of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void initialize(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ui \u003d new Ui(mainWindow);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ui.printIntro();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Requests a response from Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param input The input string from the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void getResponse(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String[] userInput \u003d Parser.parseUserInput(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String command \u003d userInput[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String[] params \u003d Arrays.copyOfRange(userInput, 1, userInput.length);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printGoodbye();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.list());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    index \u003d Integer.valueOf(params[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    throw new DukeException(\"You need to specify a task ID to mark as done.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.markAsDone(index));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    index \u003d Integer.valueOf(params[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    throw new DukeException(\"You need to specify a task ID to delete.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.delete(index));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.createToDo(params));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.createDeadline(params));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.createEvent(params));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ui.printToUser(taskList.findEvent(params));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException | InterruptedException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            ui.printErrToUser(e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 90,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Starts the MainWindow view."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param stage The stage for the MainWndow."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.Dialog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class MainWindow extends Stage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        duke.initialize(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates the two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        duke.getResponse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    // Solution below adapted from https://github.com/nexolute/duke/blob/master/src/main/java/duke/MainWindow.java"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printAsUser(String s) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(s, userImage));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printAsDuke(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(s, dukeImage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 61
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parses the user inputs."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Splits the user input into a string array by spaces, one word per index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param input The string representing the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return The string array of words split by spaces."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static String[] parseUserInput(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return input.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Joins a string array back into a single string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param strings The string array to be joined."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string of the combined words in the string array."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String joinStrings(String[] strings) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c strings.length; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (i \u003d\u003d strings.length - 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(strings[i]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(strings[i]).append(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Combines strings from a string array, and splits the combined string into two arrays with a provided"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * identifier as the delimiter."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The string array to be split."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param identifier The identifier to serve as the delimited."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string array, with the first string being the words before the delimiter, and the second string being"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     *      the words after the delimiter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    static String[] splitByIdentifier(String[] params, String identifier) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        int split \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c params.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (params[i].equals(identifier)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                split \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String taskDesc \u003d joinStrings(Arrays.copyOfRange(params, 0, split));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String taskDue \u003d joinStrings(Arrays.copyOfRange(params, split + 1, params.length));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new String[]{taskDesc, taskDue};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 53
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Storage class. Handles the reading/writing of data to disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the location of the file to be read/written to. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the format by which the Date/Time should be read/written as. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Storage object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param fileName The location of the file to be read/written to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Loads previously-saved tasks from the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return An ArrayList containing the tasks previously stored."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    ArrayList\u003cTask\u003e loadFromFile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String current;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String[] params;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                current \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                params \u003d current.split(\"\\\\|\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                Status status \u003d (params[1].equals(\"0\") ? Status.INCOMPLETE : Status.COMPLETE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                switch (params[0]) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.add(new ToDo(status, params[2]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.add(new Deadline(status, params[2], LocalDateTime.parse(params[3], formatter)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.add(new Event(status, params[2], LocalDateTime.parse(params[3], formatter)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new ArrayList\u003cTask\u003e(100);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Saves the tasks to file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskList The ArrayList of tasks to be written to file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws IOException If it fails to write the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void saveToFile(ArrayList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        FileWriter fw \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d taskList.get(i);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(current.toSaveString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(current.toSaveString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        fw.write(s.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 109
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * TaskList class. Manages all input, output and display related commands affecting the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Header line for list operation. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String tasklist_header \u003d \"\\t Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Done message. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String done_message \u003d \"\\t Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Task added successfully message. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String task_added_message \u003d \"\\t Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Task deleted successfully message. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String delete_message \u003d \"\\t Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String matching_message \u003d \"\\tHere are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the ArrayList of tasks. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the storage object used to read/write to file. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the DateTimeFormatter object used to specify the format of date/time objects when printed. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new TaskList object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param storage The storage object previously created to read/write from file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList \u003d storage.loadFromFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Lists all tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string containing the list of tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If no tasks are available."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String list() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"There are no tasks to display.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder(tasklist_header);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            s.append(\"\\t \").append(i + 1).append(\".\").append(taskList.get(i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param index The index number of the task to be marked done (starting from 1)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string with the confirmation message that the task was successfully deleted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the task at index does not currently exist."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String markAsDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"No such task with that ID.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        boolean status \u003d current.markAsComplete();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!status) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"Action already marked as done!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d done_message + \"\\t   \" + current;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Deletes a task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param index The index number of the task to be marked done (starting from 1)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string with the confirmation message that the task was successfully deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the task at index does not currently exist."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d taskList.remove(index - 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"No such task with that ID.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d delete_message + \"\\t   \" + current;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new ToDo task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters (description) for the ToDo task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string with the confirmation that the task was successfully added."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the description is empty."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String createToDo(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String task \u003d Parser.joinStrings(params);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (task.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current \u003d new ToDo(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList.add(current);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d task_added_message + \"\\t   \" + current + totalNoOfTasks();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Deadline task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters (description, due by date) for the Deadline task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string with the confirmation that the task was successfully added."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the description or due by date is empty or in the wrong format."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String createDeadline(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (Parser.joinStrings(params).isEmpty()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description and due date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String[] details \u003d Parser.splitByIdentifier(params, \"/by\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (details[0].isEmpty() \u0026\u0026 details[1].isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date, denoted by /by\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (details[0].isEmpty() \u0026\u0026 !details[1].isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d new Deadline(details[0], LocalDateTime.parse(details[1], formatter));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date in the format dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList.add(current);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d task_added_message + \"\\t   \" + current + totalNoOfTasks();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Event task."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params The parameters (description, due by date) for the Event task."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string with the confirmation that the task was successfully added."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If the description or due by date is empty or in the wrong format."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String createEvent(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (Parser.joinStrings(params).isEmpty()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description and due date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String[] details \u003d Parser.splitByIdentifier(params, \"/at\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (details[0].isEmpty() \u0026\u0026 details[1].isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date, denoted by /at\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (details[0].isEmpty() \u0026\u0026 !details[1].isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Task current;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            current \u003d new Event(details[0], LocalDateTime.parse(details[1], formatter));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You need to specify a due date in the format dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        taskList.add(current);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String s \u003d task_added_message + \"\\t   \" + current + totalNoOfTasks();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        save();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Finds all the tasks matching a certain keyword."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param params A string array of the keyword(s) to search for"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string representing all the tasks matching the keyword"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws DukeException If no search keyword is provided."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String findEvent(String[] params) throws DukeException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String searchKey \u003d Parser.joinStrings(params);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (searchKey.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new DukeException(\"You must specify a keyword to search by.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder(matching_message);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (taskList.get(i).toString().contains(searchKey)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                s.append(\"\\t \").append(i + 1).append(\".\").append(taskList.get(i));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints a string with the total number of tasks currently stored."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the total number tasks currently stored."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private String totalNoOfTasks() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        int noOfTasks \u003d taskList.size();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"\\t Now you have \" + (noOfTasks) + (noOfTasks \u003d\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\\n\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Tells the Storage object to save the tasks to file."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private void save() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            storage.saveToFile(taskList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            System.err.println(\"Error writing task to disk. Your changes were not saved. Check your file permissions?\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 216
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Ui class. Stores the strings used for greetings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Intro message. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String intro \u003d \"\\t Hello! I\u0027m Duke\\n\\t What can I do for you?\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Goodbye message. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String goodbye \u003d \"\\t Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the MainWindow object. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initialises Ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param mainWindow The application\u0027s MainWindow object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Ui(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns the intro string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printIntro() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsDuke(intro);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints the goodbye mesage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printGoodbye() throws InterruptedException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsDuke(goodbye);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints a message to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param s The string to be printed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printToUser(String s) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsDuke(s);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Prints an error message to the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param e The exception to be printed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void printErrToUser(Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        mainWindow.printAsDuke(e.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 52
    }
  },
  {
    "path": "src/main/java/duke/command/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Provides a custom DukeException objects describing exceptions arising from Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the description of the error. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    String error;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new DukeException."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param error The string describing the error."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the error."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the error."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"\\t ☹ OOPS!!! \" + error + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 27
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Deadline class. Provides a framework for new Deadline objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the date and time of the deadline. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the formatter by which the date and time is printed. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Deadline object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param deadline The due date and time of the deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Deadline(String taskName, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Deadline object with its done status pre-determined."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the deadline object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the deadline task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param deadline The due date and time of the deadline task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Deadline(Status status, String taskName, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(status, taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the deadline task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the deadline task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(formatter) + \")\" + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"D|\" + (super.completed \u003d\u003d Status.INCOMPLETE ? \"0\" : \"1\") + \"|\" + taskName + \"|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                + deadline.format(formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 54
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Event class. Provides a framework for new Event objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the date and time of the deadline. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the formatter by which the date and time is printed. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Event object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the Event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param time The due date and time of the Event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Event(String taskName, LocalDateTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new Event object with its done status pre-determined."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the Event object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the Event task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param time The due date and time of the Event task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Event(Status status, String taskName, LocalDateTime time) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(status, taskName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the Event task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the Event task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + time.format(formatter) + \")\" + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"E|\" + (super.completed \u003d\u003d Status.INCOMPLETE ? \"0\" : \"1\") + \"|\" + taskName + \"|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                + time.format(formatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Status.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * An enumeration to describe the status of a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    INCOMPLETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    COMPLETE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 9
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Task class. Provides a framework for new Task objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the status of the task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Status completed;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /** Stores the name of the task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Task(String taskName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.completed \u003d Status.INCOMPLETE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new task object with the status predefined."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Task(Status status, String taskName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.completed \u003d status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return Returns a boolean describing if the task has successfully been marked done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public boolean markAsComplete() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (this.completed \u003d\u003d Status.INCOMPLETE) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            completed \u003d Status.COMPLETE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[\" + (this.completed \u003d\u003d Status.COMPLETE ? \"✓\" : \"✗\") + \"] \" + taskName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public abstract String toSaveString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 61
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * ToDO class. Provides a ToDo for new Deadline objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new ToDo object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public ToDo(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Creates a new ToDo object with predefined status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param status The status of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public ToDo(Status status, String taskName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(status, taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string describing the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string describing the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"[T]\" + super.toString() + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns a string in the format to be saved to disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return A string in the format to be saved to disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return \"T|\" + (super.completed \u003d\u003d Status.INCOMPLETE ? \"0\" : \"1\") + \"|\" + taskName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 42
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/Insets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 22
    }
  },
  {
    "path": "src/test/java/duke/command/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void joinStrings_normalInput_joinedString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assertEquals(\"read book\", Parser.joinStrings(new String[]{\"read\", \"book\"}));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void splitByIdentifier_normalInput_splitString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        assertArrayEquals(new String[]{\"return book\", \"02/12/2019 1800\"},"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                Parser.splitByIdentifier(new String[]{\"return book\", \"/by\", \"02/12/2019 1800\"}, \"/by\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 21
    }
  },
  {
    "path": "src/test/java/duke/command/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    TaskList taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createTodo_normalInput_createdSuccessfully() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t   [T][✗] read book\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t Now you have 2 tasks in the list.\\n\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createToDo(new String[] {\"read book\"}));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createTodo_wrongInput_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t   [T][✗] read book\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t Now you have 2 tasks in the list.\\n\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createToDo(new String[]{}));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t ☹ OOPS!!! The description of a todo cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createDeadline_normalInput_createdSuccessfully() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t   [D][✗] return book (by: 02/12/2019 1800)\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t Now you have 3 tasks in the list.\\n\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createDeadline(new String[] {\"return book\", \"/by\", \"02/12/2019 1800\"}));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createDeadline_wrongInput_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t   [D][✗] return book (by: 02/12/2019 1800)\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t Now you have 3 tasks in the list.\\n\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createDeadline(new String[]{}));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t ☹ OOPS!!! The description and due date of a deadline cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createEvent_normalInput_createdSuccessfully() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t   [E][✗] project meeting (at: 06/08/2019 1400)\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t Now you have 1 task in the list.\\n\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createEvent(new String[] {\"project meeting\", \"/at\", \"06/08/2019 1400\"}));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void createEvent_wrongInput_exceptionThrown() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t   [E][✗] project meeting (at: 06/08/2019 1400)\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"\\t Now you have 1 task in the list.\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    taskList.createEvent(new String[]{}));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            assertEquals(\"\\t ☹ OOPS!!! The description and due date \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    + \"of an event cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 90
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "deadline return book /by 02/12/2019 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "event project meeting /at 06/08/2019 1400"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "deadline return book /by 09/09/2019 1200"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "event project meeting /at 07/09/2019 1400"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 14
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 34
    }
  }
]
