[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "//Publishes an executable jar to ./build/libs/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "run {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 28,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Main class of Duke application - a personal assistant chat bot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * @author Ng Jun Hao"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private UserInterface ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String DEFAULT_STORAGE_FILEPATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Constructor for instantiating a Duke session."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param filePath Path to storage file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui \u003d new UserInterface();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            ui.showExceptionMessage(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            ui.exitProgram();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Runs the Duke session upon instantiation of Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        boolean isTerminated \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        while (!isTerminated) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                String inputLine \u003d ui.readLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                ui.echo(inputLine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                Command command \u003d Parser.parse(inputLine);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                isTerminated \u003d command.isTerminated();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                ui.showExceptionMessage(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Main entry point of the application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        new Duke(DEFAULT_STORAGE_FILEPATH).run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 64,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Generic exception used by Duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a exception with a message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param message description of the exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 16
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Adds a task to storage file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a command to add a given task to the storage file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Executes addition of a task on user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param ui user interface displaying the successful addition of a task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storage local storage of data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void execute(TaskList taskList, UserInterface ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        storage.save(task.getSimplifiedRepresentation());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showAddition(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showTaskSize(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 39
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return false by default."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean isTerminated() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param ui user interface displaying the effects of the execution of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storage local storage of data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public abstract void execute(TaskList taskList, UserInterface ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.common.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Deletes a task from the storage file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a command to delete a given task using an index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param index index of the task to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Executes deletion of a task on user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param ui user interface displaying the successful deletion of a task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storage local storage of data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void execute(TaskList taskList, UserInterface ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_TASK_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Task task \u003d taskList.delete(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        storage.save(taskList.getSimplifiedTaskRepresentations());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showDeletion(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showTaskSize(taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.common.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Marks a task in the storage file as done using an index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a command to mark a given task as done using an index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param index index of the task to be marked as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Executes marking of a task as done on user interface."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param ui user interface displaying the successful marking of a task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storage local storage of data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void execute(TaskList taskList, UserInterface ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_TASK_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Task task \u003d taskList.markDone(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        storage.save(taskList.getSimplifiedTaskRepresentations());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showMarkDone(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 43
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Executes exit program on user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param ui user interface displaying program exiting."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storage local storage of data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void execute(TaskList taskList, UserInterface ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.exitProgram();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return true as program has terminated upon program exiting."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean isTerminated() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 33
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Finds all tasks in the task list that matches given keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a command to find tasks that matches this keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param keyword keyword that is used to find tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Executes finding of matching tasks on user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param ui user interface displaying all tasks that matches this keyword."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storage local storage of data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void execute(TaskList taskList, UserInterface ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showTaskList(taskList.getTaskNamesIfMatch(this.keyword));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 36
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Lists all tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Executes listing of task list on user interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param ui user interface listing all tasks in task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storage local storage of data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void execute(TaskList taskList, UserInterface ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ui.showTaskList(taskList.getTaskNames());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 24
    }
  },
  {
    "path": "src/main/java/duke/common/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Contains messages displayed to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke\\n%1$sWhat can I do for you?\\n%2$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_DELETED \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_MARK_DONE \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_SHOW_TASK_LIST \u003d \"Here are the%1$s tasks in your list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_SHOW_TASK_SIZE \u003d \"Now you have %1$s tasks in the list.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_INVALID_TODO_FORMAT \u003d \"The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINE_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            \"Deadlines must have /by and cannot be empty. E.g. deadline return book /by 2/12/2019 1800\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            \"Events must have /at and cannot be empty. E.g. event project meeting /at 2/12/2019 1800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_INDEX \u003d \"Invalid task number. Task numbers follow 1-based indexing.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD_FORMAT \u003d \"Invalid keyword. Specify keyword to search for tasks.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_ERROR_MISSING_STORAGE_FILE \u003d \"%1$sMissing storage file: %2$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_ERROR_CREATING_STORAGE_FILE \u003d \"Unable to create new file %1$s. %2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_STORAGE_FILE_CREATED \u003d \"%1$sCreated new empty storage file: %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_ERROR_READING_FROM_FILE \u003d \"Error when reading file\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date. Follow d/M/yyyy HHmm format. E.g. 2/12/2019 1800\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 28
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.common.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param inputLine entire text input entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return the command based on user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws DukeException if invalid command is entered by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static Command parse(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        String command \u003d getCommandFrom(inputLine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new DoneCommand(getIndexFrom(inputLine));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new AddCommand(createTodoFrom(inputLine));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new AddCommand(createDeadlineFrom(inputLine));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new AddCommand(createEventFrom(inputLine));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new DeleteCommand(getIndexFrom(inputLine));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new FindCommand(getKeywordFrom(inputLine));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static String getCommandFrom(String inputLine) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return inputLine.strip().split(\" \")[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static int getIndexFrom(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return Integer.parseInt(inputLine.strip().split(\" \")[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_TASK_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static Todo createTodoFrom(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        String todoDescription \u003d inputLine.substring(\"todo\".length()).strip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (todoDescription.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_TODO_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return new Todo(todoDescription);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static Deadline createDeadlineFrom(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String[] deadlinePart \u003d inputLine.substring(\"deadline\".length()).split(\"/by\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String deadlineDescription \u003d deadlinePart[0].strip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            if (deadlineDescription.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                throw new DukeException(Message.MESSAGE_INVALID_DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            LocalDateTime by \u003d LocalDateTime.parse(deadlinePart[1].strip(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new Deadline(deadlineDescription, by);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (java.time.format.DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException((Message.MESSAGE_INVALID_DATE_FORMAT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static Event createEventFrom(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String[] eventPart \u003d inputLine.substring(\"event\".length()).split(\"/at\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String eventDescription \u003d eventPart[0].strip();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            if (eventDescription.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                throw new DukeException(Message.MESSAGE_INVALID_EVENT_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            LocalDateTime at \u003d LocalDateTime.parse(eventPart[1].strip(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new Event(eventDescription, at);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_EVENT_FORMAT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (java.time.format.DateTimeParseException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException((Message.MESSAGE_INVALID_DATE_FORMAT));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static String getKeywordFrom(String inputLine) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        String keyword \u003d inputLine.substring(\"find\".length()).strip();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(Message.MESSAGE_INVALID_KEYWORD_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 116
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static duke.common.Message.MESSAGE_ERROR_CREATING_STORAGE_FILE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static duke.common.Message.MESSAGE_ERROR_MISSING_STORAGE_FILE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static duke.common.Message.MESSAGE_ERROR_READING_FROM_FILE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static duke.common.Message.MESSAGE_STORAGE_FILE_CREATED;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Represents local storage of data from Duke application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Constructor of data storage at a given file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param filePath path of storage file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Loads the Duke application data from this storage file if file exists."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Otherwise, create the missing file using the given file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return the list of tasks being loaded from storage file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws DukeException if missing file is unable to be created and/or there were errors reading data from file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            List\u003cString\u003e storageLines \u003d readFrom(this.filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            for (String storageLine : storageLines) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                if (storageLine.strip().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                tasks.add(createTaskFrom(storageLine));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            createFileIfMissing(this.filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Reads data from this storage file. Reads maximum one task per line."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param filePath path of storage file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return list of lines being read."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws FileNotFoundException if specified file is missing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private List\u003cString\u003e readFrom(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        List\u003cString\u003e storageLines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        while(scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            storageLines.add(scanner.nextLine());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return storageLines;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates task from reading and parsing the lines in the storage file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param storageLine lines in the storage file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws DukeException if there were errors reading data from file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Task createTaskFrom(String storageLine) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String[] taskPart \u003d storageLine.strip().split(\"\\\\|\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String typeOfTask \u003d taskPart[0].strip();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String doneStatus \u003d taskPart[1].strip();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            String description \u003d taskPart[2].strip();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            switch (typeOfTask) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                task \u003d new Todo(description);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                LocalDateTime by \u003d LocalDateTime.parse(taskPart[3].strip(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                task \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                LocalDateTime at \u003d LocalDateTime.parse(taskPart[3].strip(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                task \u003d new Event(description, at);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                throw new DukeException(MESSAGE_ERROR_READING_FROM_FILE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            task.setDone(doneStatus.equals(\"1\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(MESSAGE_ERROR_READING_FROM_FILE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates the file using the given file path if file is missing."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param filePath path of the file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws DukeException if there were errors when creating the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static void createFileIfMissing(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        final File storageFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (storageFile.exists()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        System.out.println(String.format(MESSAGE_ERROR_MISSING_STORAGE_FILE, UserInterface.LINE_PREFIX, filePath));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            storageFile.createNewFile();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            System.out.println(String.format(MESSAGE_STORAGE_FILE_CREATED, UserInterface.LINE_PREFIX,filePath));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(String.format(MESSAGE_ERROR_CREATING_STORAGE_FILE, filePath, ioe.getMessage()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Saves the list of simplified task representations to the storage file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param simplifiedTaskRepresentations list of simplified task representations."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws DukeException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void save(List\u003cString\u003e simplifiedTaskRepresentations) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            for (String simplifiedTaskRepresentation : simplifiedTaskRepresentations) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                fileWriter.write(simplifiedTaskRepresentation + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(MESSAGE_ERROR_MISSING_STORAGE_FILE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Saves the simplified task representation to the storage file."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param simplifiedTaskRepresentation simplified task representation."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @throws DukeException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void save(String simplifiedTaskRepresentation) throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            fileWriter.write(simplifiedTaskRepresentation + \"\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            throw new DukeException(MESSAGE_ERROR_MISSING_STORAGE_FILE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 172
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Represents a deadline which is a task needed to be done by a given date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *  Constructs a deadline by a given date and time with a description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param description description of deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param by date and time of deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns a simplified summary of this deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return simplified string representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String getSimplifiedRepresentation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return \"D | \" + (super.isDone ? 1 : 0) + \" | \" + super.taskName + \" | \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                + DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\").format(this.by);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns an expressive string representation of this deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return expressive string representation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + (this.by.getDayOfMonth() % 10 \u003d\u003d 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                ? DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, h.mma\").format(this.by)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                : this.by.getDayOfMonth() % 10 \u003d\u003d 2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    ? DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, h.mma\").format(this.by)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    : this.by.getDayOfMonth() % 10 \u003d\u003d 3"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                        ? DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, h.mma\").format(this.by)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                        : DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, h.mma\").format(this.by)) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Represents an event at a given date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Constructs an event at a given date and time with a description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param description description of event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param at date and time of event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns a simplified summary of this event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return simplified string representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String getSimplifiedRepresentation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return \"E | \" + (super.isDone ? 1 : 0) + \" | \" + super.taskName + \" | \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                + DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\").format(this.at);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns an expressive string representation of this event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return expressive string representation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + (this.at.getDayOfMonth() % 10 \u003d\u003d 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                ? DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, h.mma\").format(this.at)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                : this.at.getDayOfMonth() % 10 \u003d\u003d 2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    ? DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, h.mma\").format(this.at)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    : this.at.getDayOfMonth() % 10 \u003d\u003d 3"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                        ? DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, h.mma\").format(this.at)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                        : DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, h.mma\").format(this.at)) + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 48
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Represents a task which can be described with a name and a done status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Task can take the form of a to-do, deadline or event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Constructs an undone task which can be described with a name."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskName name of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return the name of this task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Sets this task to the given done status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param doneStatus true if done, otherwise false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void setDone(boolean doneStatus) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.isDone \u003d doneStatus;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns a simplified summary of this task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return simplified string representation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public abstract String getSimplifiedRepresentation();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns a string representation of this task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return string representation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return (isDone ? \"[\\u2713] \" : \"[\\u2718] \") + this.taskName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 52
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * A list of tasks, possibly to-dos, deadlines and events."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Constructs an empty task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Constructs a task list with the given list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return size of this task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Adds the given task to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Marks the task of the given index as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param index index of the task marked done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return the task of the given index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Task markDone(int index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Task task \u003d this.tasks.get(index - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Deletes the task of the given index from the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param index index of the task deleted."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return the task being deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Task task \u003d this.tasks.get(index - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.tasks.remove(index - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return a list of task names and descriptions of all tasks in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public List\u003cString\u003e getTaskNames() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        List\u003cString\u003e taskNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            taskNames.add((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return taskNames;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param keyword keyword that is used for finding tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return a list of task names and descriptions of tasks that contain this \u003ccode\u003ekeyword\u003c/code\u003e."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public List\u003cString\u003e getTaskNamesIfMatch(String keyword) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        List\u003cString\u003e taskNamesThatMatch \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            if (tasks.get(i).getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                taskNamesThatMatch.add((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return taskNamesThatMatch;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return a list of simplified summaries of all tasks in the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public List\u003cString\u003e getSimplifiedTaskRepresentations() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        List\u003cString\u003e simplifiedTaskRepresentations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            simplifiedTaskRepresentations.add(task.getSimplifiedRepresentation());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return simplifiedTaskRepresentations;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 102
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Represents a to-do without date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Constructs a to-do with a description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param description description of to-do."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns a simplified summary of this to-do."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return simplified string representation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String getSimplifiedRepresentation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return \"T | \" + (super.isDone ? 1 : 0) + \" | \" + super.taskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns a string representation of this to-do."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return string representation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 34
    }
  },
  {
    "path": "src/main/java/duke/ui/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.common.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Text User Interface of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final Scanner SCANNER \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String LINE_PREFIX \u003d \"     \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Reads the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @return entire text input entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        String nextLine \u003d SCANNER.nextLine().strip();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return nextLine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Echos the user input back to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param inputLine"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void echo(String inputLine) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        System.out.println(inputLine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the given input line to the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param inputLine given input line to be shown."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showToUser(String inputLine) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        System.out.println(LINE_PREFIX + inputLine);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows a horizontal line to the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(LINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the welcome message to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(String.format(Message.MESSAGE_WELCOME, LINE_PREFIX, LINE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows goodbye message to the user before exiting application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void exitProgram() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(Message.MESSAGE_BYE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the successful addition of a task to the user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param task task that was added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showAddition(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(Message.MESSAGE_ADDED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(\" \" + task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the successful deletion of a task to the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param task task that was deleted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showDeletion(Task task) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(Message.MESSAGE_DELETED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(\" \" + task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the list of task descriptions to the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskNames names of the tasks."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showTaskList(List\u003cString\u003e taskNames) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(String.format(Message.MESSAGE_SHOW_TASK_LIST, \" matching\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        for (String taskName : taskNames) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            showToUser(taskName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the task being successfully marked done to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param task task that was marked done."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showMarkDone(Task task) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(Message.MESSAGE_MARK_DONE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(\" \" + task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the size of the task list to the user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showTaskSize(TaskList taskList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(String.format(Message.MESSAGE_SHOW_TASK_SIZE, taskList.size()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the exception message to the user."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param message exception message."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void showExceptionMessage(String message) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        showToUser(\"☹ OOPS!!! \" + message);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 131
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 13
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void parse_userEnterInput_exceptionNotThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\"event project meeting /at 2/12/2019 1800\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\"event project meeting /at 2/2/2019 1800\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\" event   project meeting     /at         2/2/2019 1800   \"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\"done 1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\"list !@#$\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\"bye  \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\"     bye 0.0.0\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Parser.parse(\"bye !@#$\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void parse_userEnterInput_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"  \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"event  /at 2/12/2019 1800\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"event project meeting /at \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"event project meeting 2/12/2019 1800\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"event project meeting /at 02/12/0000 1800\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"event project meeting /at 2/12/2019 9999\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"done @#$%\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parse(\"!@# delete 1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 35
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void testDeadlineToString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                LocalDateTime.parse(\"2/12/2019 1800\", DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(deadline.toString(), \"[D][✘] return book (by: 2nd of December 2019, 6.00PM)\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 21
    }
  }
]
