[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 28,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        dialog.setMinSize(Label.USE_PREF_SIZE, Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 62
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.ExceptionHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.IncorrectDukeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.InvalidDukeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.VoidDukeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import misc.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import misc.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import misc.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ExceptionHandler exceptionHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        exceptionHandler \u003d new ExceptionHandler();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskList \u003d new TaskList(storage.readSaveFile(), storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String dukeResponse;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            dukeResponse \u003d parser.parseInstruction(input, taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return dukeResponse;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            errorMessage \u003d exceptionHandler.showParseDateTimeError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (VoidDukeCommand e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            errorMessage \u003d exceptionHandler.showVoidDukeCommandError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (IncorrectDukeCommand e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            errorMessage \u003d exceptionHandler.showDukeCommandEvaluationError(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (InvalidDukeCommand e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            errorMessage \u003d exceptionHandler.showUnknownDukeCommandError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            errorMessage \u003d exceptionHandler.showDukeIoError();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            errorMessage \u003d exceptionHandler.showDukeError(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 59,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            stage.setMinWidth(580);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            stage.setMinHeight(380);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 37
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        displayNewDukeDialogGui(input, response);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            closeDukeGui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void closeDukeGui() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }, 1500);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void displayNewDukeDialogGui(String input, String response) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 76
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " *  Represents a general exception that is not caught by any of the other exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 12
    }
  },
  {
    "path": "src/main/java/exception/ExceptionHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Represents an Exception Handler that can display to user the respective error messages when required."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Used by Duke to handle exceptions thrown in the Main program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class ExceptionHandler {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays an error that indicates to the user that an incorrect format for Date/Time has been given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String showParseDateTimeError() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d \"Unable to parse Date \u0026 Time of task!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"Please follow the following format for Date \u0026 Time:\\n\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"- Date: \u0027dd/mm/yy\u0027 e.g. 10/02/19 (10 Feb 2019)\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"- Time: \u0027hhmm\u0027 (24-hr format) e.g. 0730 (07:30AM)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays an error that indicates to the user that a valid DukeCommand input has been given, "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * but Duke has trouble evaluating it due to abnormal input somewhere in the command given."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param e The IncorrectDukeCommand to display the error message of."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String showDukeCommandEvaluationError(IncorrectDukeCommand e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d \"Looks like the above Duke Command has failed. That\u0027s because...\\n\" + e.getMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays an error that indicates to the user that an invalid DukeCommand has been given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String showUnknownDukeCommandError() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d \"I\u0027m sorry, but I don\u0027t know what that means...\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays an error that indicates to the user that no input was given when prompted for one."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String showVoidDukeCommandError() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d  \"I can\u0027t do anything if you don\u0027t tell me what to do...\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays an error that indicates to the user that an error occurred with file saving/loading."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * This error should not appear unless the user created a directory with an identical name and path"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * as the file that is saved to keep track of user\u0027s tasks when the program exits."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String showDukeIoError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d  \"File could not be read/saved.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return errorMessage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays a general DukeException that is not caught by any of the above to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String showDukeError(DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 67
    }
  },
  {
    "path": "src/main/java/exception/IncorrectDukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Represents an exception that reflects a valid input command but with unrecognizable contents."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class IncorrectDukeCommand extends IllegalArgumentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public IncorrectDukeCommand(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 12
    }
  },
  {
    "path": "src/main/java/exception/InvalidDukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Represents an exception that indicates to user that the input command does not exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class InvalidDukeCommand extends IllegalArgumentException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 8
    }
  },
  {
    "path": "src/main/java/exception/VoidDukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Represents an exception that indicates to user that no input is detected."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class VoidDukeCommand extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public VoidDukeCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(\"I can\u0027t do anything if you don\u0027t tell me what to do...\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 14
    }
  },
  {
    "path": "src/main/java/misc/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.IncorrectDukeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.InvalidDukeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.VoidDukeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Represents a Parser object that converts a form a data input into another so that the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * program can function."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Writes Tasks as Strings that are saved into a local save file. The parsed String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * contains information about the task\u0027s completion status, Task type and Date/Time (if any)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param task The Task to be parsed into a String and saved into a local save file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return The parsed String of the Task\u0027s details, null if task is of unknown type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    String writeTaskAsText(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        int isDoneStatus \u003d task.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return String.format(\"T : %d : %s\", isDoneStatus, task.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return String.format(\"D : %d : %s : %s\", isDoneStatus, task.description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    ((Deadline)task).unformattedDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return String.format(\"E : %d : %s : %s\", isDoneStatus, task.description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    ((Event)task).unformattedDateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Reads Strings (from a local save file) as Tasks. These tasks retain information of"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * all user tasks when the program last exits."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param stringTask The String to be parsed into a Task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return A Task in the user\u0027s task list when the program last exits. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    Task readTextAsTask(String stringTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String[] taskContents \u003d stringTask.split(\" : \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String taskTag \u003d taskContents[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        boolean isDone \u003d taskContents[1].equals(\"1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String taskDetails \u003d taskContents[2];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String dateTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Task outputTask;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        switch (taskTag) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            outputTask \u003d new ToDo(taskDetails, isDone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            dateTime \u003d taskContents[3];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            outputTask \u003d new Deadline(taskDetails, dateTime, isDone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            dateTime \u003d taskContents[3];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            outputTask \u003d new Event(taskDetails, dateTime, isDone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            outputTask \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return outputTask;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Parses an input String into a Date/Time format that can be easily deciphered."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param stringDate The String to be parsed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param taskType The type of Task for the String to be parsed into."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return A clearer String representation of the Date/Time."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws DateTimeParseException if the String cannot be parsed into a Date/Time format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String convertStringToTime(String stringDate, String taskType) throws DateTimeParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String convertedTime;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            convertedTime \u003d formatDeadline(stringDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String[] dateTime \u003d splitDateTime(stringDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String eventDate \u003d dateTime[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String eventTime \u003d dateTime[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String dateOutput \u003d formatDeadlineDate(eventDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            checkEventStartEndExists(eventTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String[] timeStartEnd \u003d eventTime.split(\"-\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String startTime \u003d timeStartEnd[0];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String endTime \u003d timeStartEnd[1];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            convertedTime \u003d formatDeadlineTime(dateOutput, startTime, endTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            convertedTime \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return convertedTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String formatDeadlineTime(String dateOutput, String startTime, String endTime) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        DateTimeFormatter eventTimeInputFormatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        DateTimeFormatter eventTimeOutputFormatter \u003d DateTimeFormatter.ofPattern(\"hh:mma\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        LocalTime startTimeLdt \u003d LocalTime.parse(startTime, eventTimeInputFormatter);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        LocalTime endTimeLdt \u003d LocalTime.parse(endTime, eventTimeInputFormatter);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String startTimeOutput \u003d startTimeLdt.format(eventTimeOutputFormatter);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String endTimeOutput \u003d endTimeLdt.format(eventTimeOutputFormatter);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return String.format(\"%s %s to %s\", dateOutput, startTimeOutput, endTimeOutput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void checkEventStartEndExists(String eventTime) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (!eventTime.contains(\"-\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String errorMessage \u003d \"You seem to be missing the Start/End time of your event!\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    + \"Please follow this format for an Event: \u0027dd/mm/yy hhmm-hhmm\u0027\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new IncorrectDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String formatDeadlineDate(String eventDate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        DateTimeFormatter eventDateInputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        DateTimeFormatter eventDateOutputFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        LocalDate eventDateLdt \u003d LocalDate.parse(eventDate, eventDateInputFormatter);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return eventDateLdt.format(eventDateOutputFormatter);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String[] splitDateTime(String stringDate) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String[] dateTime \u003d stringDate.split(\" \");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (dateTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new IncorrectDukeCommand(\"The Date or Time is missing!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String formatDeadline(String stringDate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        DateTimeFormatter deadlineInputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        LocalDateTime deadlineDateTime \u003d LocalDateTime.parse(stringDate, deadlineInputFormatter);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        DateTimeFormatter deadlineOutputFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy hh:mma\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return deadlineDateTime.format(deadlineOutputFormatter);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Parses user input instruction into a command that Duke can act on."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param instruction The user instruction to be parsed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param taskList The TaskList object that stores all of user\u0027s tasks."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return A corresponding String to indicate to user that the instruction has been executed successfully."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws VoidDukeCommand if there is no user input."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IncorrectDukeCommand if the input command exists, but Duke cannot understand parts of it."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws InvalidDukeCommand if the input command does not exist."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IOException if local save file cannot be updated to reflect changes."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws DukeException if an exception is thrown but not caught by any of the other exceptions."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String parseInstruction(String instruction, TaskList taskList) throws VoidDukeCommand,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            IncorrectDukeCommand, InvalidDukeCommand, IOException, DukeException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Scanner userInput \u003d new Scanner(instruction);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            command \u003d userInput.next();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            userInput.close();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new VoidDukeCommand();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskList.temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"The command \\\"list\\\" should not have anything after!\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        + \"Please remove any additional characters!\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return taskList.listAllTasks(\"list\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"The command \\\"bye\\\" should not have anything after!\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        + \"Do you really intend to quit?\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                userInput.close();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return Ui.exit();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNextInt()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                int taskNumberDone \u003d userInput.nextInt();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return taskMarkedDoneMessage(taskList, taskNumberDone);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"You need to tell me which task to mark as done!\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNextInt()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                int taskNumberDelete \u003d userInput.nextInt();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return taskDeletedMessage(taskList, taskNumberDelete);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"You need to tell me which task to delete!\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                String keyword \u003d userInput.nextLine().strip();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return taskList.find(keyword);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"I need a keyword to look for matching tasks!\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskList.temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                String details \u003d userInput.nextLine().strip();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                return taskList.makeNewTask(details, null, \"todo\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"The description of a todo cannot be empty!\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskList.temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (instruction.contains(\" by \")) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String[] contentDateTime \u003d userInput.nextLine().strip().split(\" by \");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    if (contentDateTime.length \u003d\u003d 0 || contentDateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        errorMessage \u003d \"You are missing the details/date\u0026time of your Deadline!\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else if (contentDateTime[0].isBlank()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        errorMessage \u003d \"The details of your deadline cannot be empty!\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else if (contentDateTime[1].isBlank()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        errorMessage \u003d \"The date/time of your deadline cannot be empty!\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String taskDescription \u003d contentDateTime[0].strip();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String dateTime \u003d contentDateTime[1].strip();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        return taskList.makeNewTask(taskDescription, dateTime, \"deadline\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    errorMessage \u003d \"Sorry but I can\u0027t seem to detect the due date of the deadline!\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"The description of a Deadline cannot be empty!\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskList.temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            if (userInput.hasNext()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (instruction.contains(\" at \")) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    String[] contentDateTime \u003d userInput.nextLine().strip().split(\" at \");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    if (contentDateTime.length \u003d\u003d 0 || contentDateTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        errorMessage \u003d \"You are missing the details/date\u0026time of your Event!\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else if (contentDateTime[0].isBlank()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        errorMessage \u003d \"The details of your Event cannot be empty!\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else if (contentDateTime[1].isBlank()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        errorMessage \u003d \"The date/time of your Event cannot be empty!\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String taskDescription \u003d contentDateTime[0].strip();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        String dateTime \u003d contentDateTime[1].strip();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                        return taskList.makeNewTask(taskDescription, dateTime, \"event\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    errorMessage \u003d \"Sorry but I can\u0027t seem to detect the Date \u0026 Time of the event!\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                errorMessage \u003d \"The description of an Event cannot be empty!\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            userInput.close();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new InvalidDukeCommand();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (errorMessage !\u003d null) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            userInput.close();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new IncorrectDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        userInput.close();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String taskDeletedMessage(TaskList taskList, int taskNumberDelete) throws IOException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskList.temporarySearchList !\u003d null) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return taskList.delete(taskNumberDelete, true);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return taskList.delete(taskNumberDelete, false);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String taskMarkedDoneMessage(TaskList taskList, int taskNumberDone) throws DukeException, IOException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskList.temporarySearchList !\u003d null) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return taskList.markTaskAsDone(taskNumberDone, true);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return taskList.markTaskAsDone(taskNumberDone, false);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 330
    }
  },
  {
    "path": "src/main/java/misc/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Represents a Storage object that loads or saves user tasks upon program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * start up or exit."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Saves and updates user tasks by adding on to a local save file when a new task is added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * A new local save file is created if it does not already exists."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param task The Task to be saved."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IOException if the task cannot be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public void addToLocalSave(Task task) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String saveFileName \u003d filePath + File.separator + \"duketasks.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(saveFileName, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(fileWriter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        printWriter.println(parser.writeTaskAsText(task));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Saves and updates user tasks by overwriting all contents on a local save file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * This occurs when an existing task is deleted from the user task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param listOfTasks The ArrayList that contains all of user tasks to be saved."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IOException if any of the tasks cannot be saved."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public void overwriteLocalSave(ArrayList\u003cTask\u003e listOfTasks) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String saveFileName \u003d filePath + File.separator + \"duketasks.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(saveFileName, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(fileWriter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            printWriter.println(parser.writeTaskAsText(task));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Reads from an existing save file to retrieve the user tasks that remained after the "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * program last exitted."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return an ArrayList of leftover tasks from last session."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IOException if any of the task cannot be read."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public ArrayList\u003cTask\u003e readSaveFile() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String saveFileName \u003d filePath + File.separator + \"duketasks.txt\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        File saveFile \u003d new File(saveFileName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ArrayList\u003cTask\u003e listOfExistingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (saveFile.exists()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            Scanner sc \u003d new Scanner(saveFile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            readTasksIntoTaskList(listOfExistingTasks, sc, parser);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return listOfExistingTasks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void readTasksIntoTaskList(ArrayList\u003cTask\u003e listOfExistingTasks, Scanner sc, Parser parser) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String stringTask \u003d sc.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            Task task \u003d parser.readTextAsTask(stringTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            listOfExistingTasks.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 91
    }
  },
  {
    "path": "src/main/java/misc/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Creates a User Interface that interacts with and displays information to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays the Duke Logo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return a String representation of Duke Logo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String showDukeLogo() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String dukeLogo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return dukeLogo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays a welcome message to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public static String welcome() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String welcomeMessage \u003d \"Hello! I\u0027m Duke!\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return welcomeMessage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays a welcomeBack message to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * This occurs if there are existing tasks in a local save file from last session."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public static String welcomeBack() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String welcomeMessage \u003d \"Hello! Welcome back!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + \"Carrying off from where you left behind the last time...\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return welcomeMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Displays a goodbye message to the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    static String exit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return \"Bye! Hope to see you again soon! ;)\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 47
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import misc.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Creates a task that needs to be done before a specific date/time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String unformattedDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String formattedDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    Deadline(String desc, String dateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        unformattedDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        formattedDateTime \u003d parser.convertStringToTime(dateTime, \"deadline\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Constructs a Deadline task with its description, deadline and completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * This constructor is used only when a Deadline task is read from a local save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param desc The description of the deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param dateTime The due date of the deadline, consists of a single date and time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param isDone The completion status of the Deadline task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Deadline(String desc, String dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        unformattedDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        formattedDateTime \u003d parser.convertStringToTime(dateTime, \"deadline\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(), description, formattedDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (o instanceof Deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            Deadline otherDeadline \u003d (Deadline)o;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            boolean isDescEqual \u003d description.equals(otherDeadline.description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            boolean isDateTimeEqual \u003d unformattedDateTime.equals(otherDeadline.unformattedDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return isDescEqual \u0026\u0026 isDateTimeEqual;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 56
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import misc.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Creates a task that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String unformattedDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String formattedDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    Event(String desc, String dateTime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        unformattedDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        this.formattedDateTime \u003d parser.convertStringToTime(dateTime, \"event\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Constructs a Event task with its description, deadline and completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * This constructor is used only when a Event task is read from a local save file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param desc The description of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param dateTime The event period. Consists of a single date but with start time and end time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param isDone The completion status of the Event task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public Event(String desc, String dateTime, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        unformattedDateTime \u003d dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        this.formattedDateTime \u003d parser.convertStringToTime(dateTime, \"event\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description, formattedDateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (o instanceof Event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            Event otherEvent \u003d (Event) o;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            boolean isDescEqual \u003d description.equals(otherEvent.description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            boolean isDateTimeEqual \u003d unformattedDateTime.equals(otherEvent.unformattedDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return isDescEqual \u0026\u0026 isDateTimeEqual;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 55
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * The abstract class that is a parent of Deadline, Event and ToDo tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    Task(String desc) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        description \u003d desc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    Task(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        description \u003d desc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2717\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 26
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.IncorrectDukeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import misc.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import misc.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Represents a TaskList object that can add, delete, list and mark tasks as done upon user request."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public ArrayList\u003cTask\u003e temporarySearchList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Constructs a TaskList with an empty ArrayList of tasks and Storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param storage The storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Constructs a TaskList with the specified ArrayList of tasks and Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param tasks The ArrayList of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Indicates if there are existing tasks in the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @return A boolean."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public boolean hasTask() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return tasks.size() !\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Marks a task to be done upon user request."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param taskNumber The position of the task to be marked \"done\" in the ArrayList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param useTempSearchList A boolean that determines if a task is to be marked done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     *     off the original or search result list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws DukeException if the task has already been marked done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IOException if the completion status of the task cannot be updated in a local save file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String markTaskAsDone(int taskNumber, boolean useTempSearchList) throws DukeException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ArrayList\u003cTask\u003e taskListToUse \u003d defineTaskList(useTempSearchList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d checkInvalidTaskNumber(taskNumber, taskListToUse);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        handleInvalidTaskNumberError(errorMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        handleTaskAlreadyMarkedDoneError(taskNumber, taskListToUse);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return markTaskDoneSuccess(taskNumber, taskListToUse);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String markTaskDoneSuccess(int taskNumber, ArrayList\u003cTask\u003e taskListToUse) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        taskListToUse.get(taskNumber - 1).isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        storage.overwriteLocalSave(tasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskListToUse \u003d\u003d temporarySearchList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return (\"Nice! I\u0027ve marked this task as done:\\n\" + taskListToUse.get(taskNumber - 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void handleTaskAlreadyMarkedDoneError(int taskNumber, ArrayList\u003cTask\u003e taskListToUse) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskListToUse.get(taskNumber - 1).isDone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String errorMessage \u003d \"Task has already been marked done!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void handleInvalidTaskNumberError(String errorMessage) throws IncorrectDukeCommand {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (errorMessage !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new IncorrectDukeCommand(errorMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String checkInvalidTaskNumber(int taskNumber, ArrayList\u003cTask\u003e taskListToUse) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return \"Number cannot be negative!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (taskListToUse.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return \"You don\u0027t have any tasks yet!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (taskNumber \u003e taskListToUse.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return \"You don\u0027t have that many tasks!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ArrayList\u003cTask\u003e defineTaskList(boolean useTempSearchList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return useTempSearchList ? temporarySearchList : tasks;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Lists all tasks upon user request."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param type A boolean that determines if tasks are listed from the original or search result list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws DukeException if there are no task to list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String listAllTasks(String type) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        handleEmptyTaskListError();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ArrayList\u003cTask\u003e taskListToUse;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (type.equals(\"list\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskListToUse \u003d tasks;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            output.append(\"Here are the tasks in your list:\\n\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (type.equals(\"find\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            taskListToUse \u003d temporarySearchList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            output.append(\"Here are the matching tasks in your list:\\n\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListToUse.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            output.append(String.format(\"%d. %s\\n\", i + 1, taskListToUse.get(i)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void handleEmptyTaskListError() throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            String errorMessage \u003d \"There are no task(s) to list!\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Creates a new task with its description and Date/Time (if any)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param description The description of the task to be created."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param dateTime The Date/Time of the task (if any) to be created."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param taskType The type of the task (e.g. Todo, Event etc)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IOException if task created cannot be saved to a local save file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String makeNewTask(String description, String dateTime, String taskType) throws IOException, DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            task \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            task \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            task \u003d new ToDo(description);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            task \u003d null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        handleTaskAlreadyExistsError(task);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return taskAddSuccess(task);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String taskAddSuccess(Task task) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        storage.addToLocalSave(task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        output.append(\"Got it! I\u0027ve added this task for you \\uD83D\\uDE09\\n\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        output.append(String.format(\"%s\\n\\n\", task));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        output.append(String.format(\"Now you have %d task(s) in your list.\\n\", tasks.size()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void handleTaskAlreadyExistsError(Task task) throws DukeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (tasks.contains(task)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new DukeException(\"Task already exists!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Deletes a task upon user request."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param taskNumber The position of the task in the ArrayList to be deleted."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param useTempSearchList A boolean that determines if a task is deleted from a search result list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IOException if a local save file cannot be overwritten to reflect changes in user tasks."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws IncorrectDukeCommand if the task number given does not fall within the correct range."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String delete(int taskNumber, boolean useTempSearchList) throws IOException, IncorrectDukeCommand {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ArrayList\u003cTask\u003e taskListToUse \u003d defineTaskList(useTempSearchList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String errorMessage \u003d checkInvalidTaskNumber(taskNumber, taskListToUse);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        handleInvalidTaskNumberError(errorMessage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return taskDeleteSuccess(taskNumber, taskListToUse);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private String taskDeleteSuccess(int taskNumber, ArrayList\u003cTask\u003e taskListToUse) throws IOException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Task removedTask \u003d taskListToUse.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (taskListToUse \u003d\u003d temporarySearchList) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            tasks.remove(removedTask);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        storage.overwriteLocalSave(tasks);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        temporarySearchList \u003d null;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return (\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + removedTask + \"\\n\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                + String.format(\"Now you have %d task(s) in your list.\", tasks.size()));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * Searches matching tasks with user specified keyword."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @param keyword The keyword to search for in all tasks."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     * @throws DukeException if the original task list is empty or there are no search results."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String find(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        handleEmptyTaskListError();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ArrayList\u003cTask\u003e tempList \u003d getMatchingTasks(keyword);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        handleEmptySearchListError(tempList);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        temporarySearchList \u003d tempList;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return listAllTasks(\"find\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private void handleEmptySearchListError(ArrayList\u003cTask\u003e tempList) throws DukeException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (tempList.isEmpty()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            throw new DukeException(\"There isn\u0027t a task that can be found with that keyword!\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ArrayList\u003cTask\u003e getMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (keyword.equalsIgnoreCase(\"todos\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return searchBy(\"todo\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (keyword.equalsIgnoreCase(\"deadlines\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return searchBy(\"deadline\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (keyword.equalsIgnoreCase(\"events\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return searchBy(\"event\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return searchBy(keyword);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    private ArrayList\u003cTask\u003e searchBy(String s) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        switch (s) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (t instanceof ToDo) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    output.add(t);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    output.add(t);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (t instanceof Event) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    output.add(t);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                if (t.toString().contains(s)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                    output.add(t);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 292
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " * Creates a task without any date/time attached to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    ToDo(String desc) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public ToDo(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else if (o instanceof ToDo) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            ToDo otherToDo \u003d (ToDo) o;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return description.equals(otherToDo.description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"220.0\" minWidth\u003d\"300.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"356.0\" prefWidth\u003d\"598.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                  \u003cInsets bottom\u003d\"41.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void testConvertTaskToText() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Event doneEvent \u003d new Event(\"project\", \"10/12/19 1000-1400\", true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Event undoneEvent \u003d new Event(\"project\", \"10/12/19 1000-1400\", false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Deadline doneDeadline \u003d new Deadline(\"homework\", \"10/12/19 2359\", true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Deadline undoneDeadline \u003d new Deadline(\"homework\", \"24/07/19 1000\", false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ToDo doneToDo \u003d new ToDo(\"join club\", true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        ToDo undoneToDo \u003d new ToDo(\"join club\", false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"E : 1 : project : 10/12/19 1000-1400\", parser.writeTaskAsText(doneEvent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"E : 0 : project : 10/12/19 1000-1400\", parser.writeTaskAsText(undoneEvent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"D : 1 : homework : 10/12/19 2359\", parser.writeTaskAsText(doneDeadline));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"D : 0 : homework : 24/07/19 1000\", parser.writeTaskAsText(undoneDeadline));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"T : 1 : join club\", parser.writeTaskAsText(doneToDo));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"T : 0 : join club\", parser.writeTaskAsText(undoneToDo));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void testConvertStringToTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String dateTimeEvent1 \u003d \"08/12/19 1359-1700\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String dateTimeEvent2 \u003d \"08/12/19 0810-1345\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String dateTimeDeadline1 \u003d \"23/07/19 0700\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        String dateTimeDeadline2 \u003d \"13/02/78 2359\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"08 Dec 2019 01:59PM to 05:00PM\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                parser.convertStringToTime(dateTimeEvent1, \"event\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"08 Dec 2019 08:10AM to 01:45PM\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                parser.convertStringToTime(dateTimeEvent2, \"event\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"23 Jul 2019 07:00AM\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                parser.convertStringToTime(dateTimeDeadline1, \"deadline\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertEquals(\"13 Feb 2078 11:59PM\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "                parser.convertStringToTime(dateTimeDeadline2, \"deadline\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 53
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import exception.IncorrectDukeCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void listAllTasks_noTask_dukeExceptionThrown() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e new TaskList(null).listAllTasks());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    void delete_noTask_incorrectDukeCommandThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "        assertThrows(IncorrectDukeCommand.class, () -\u003e new TaskList(null).delete(1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ning-sy210"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ning-sy210": 18
    }
  }
]
