[
  {
    "path": ".todo.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "[T][N] hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "[T][N] kasjdna"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 2
    }
  },
  {
    "path": ".txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " yellow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " mellow"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    testCompile(\u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "run {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "version \u00270.1.0\u0027"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 55,
      "-": 12
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "# Currents - User Guide "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/currents.jpg\" width\u003d\"291\" height\u003d\"71\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "### Plan your personal timetable!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "## Features of Currents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Todo: `todo`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Allows you to track tasks that needs to be done and adds it to a list. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Deadline: `deadline`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Reminds you of your upcoming deadlines and adds it to a list. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Event: `event`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Remind you of your upcoming events and adds it to a list. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Done: `done`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Allows you to tick off todo/event/deadline tasks that have been completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Delete: `delete`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Allows you to delete finished tasks or wrong tasks that was inputted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Find: `find`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Prints out matching words that you have inputted from the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Expenses: `expenses`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Allows you to record your expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### List: `list`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Prints out the entire list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Help: `help`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Prints out all the commands that is available in the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Bye: `bye`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Closes the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "## Usage of Currents"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Command | Example | Description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "---------------|---------------|---------------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`todo \u003ctask\u003e` | todo go gym | Add a new to do task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`event \u003cdescription\u003e /at \u003cdd/MM/yyyy\u003e \u003chhmm\u003e` | event party /at 20/06/2021 1700 | Add a new event task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy\u003e \u003chhmm\u003e` | deadline essay /by 30/05/2023 2359 | Add a new deadline task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`done \u003ctaskNumber\u003e` | done 1 | Ticks off a todo/event/deadline task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`delete \u003ctaskNumber\u003e` | delete 1 | Deletes a tasks from the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`find \u003ckeyword\u003e` | find essay | Find the words that match with your input and prints out corresponding tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`expenses $\u003camount\u003e /on \u003cdescription\u003e` | expenses $45.20 /on steak | Adds an expense to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`list` | list | Prints out everything that you have added to your list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`help` | help | Prints out all the command that you can use in the application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Todo: `todo`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/todo.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Event: `event`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/event.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Deadline: `deadline`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/deadline.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Done: `done`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/done.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Delete: `delete`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/delete.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Find: `find`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/find.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Expenses: `expenses`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/expenses.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### List: `list`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/list.jpg\" width\u003d\"291\" height\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#### Help: `help`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cimg src \u003d \"https://github.com/caesarpjz/duke/blob/master/docs/images/help.jpg\" width\u003d\"291\" height\u003d\"300\"\u003e"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 94,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.dialog.setMinSize(Label.USE_PREF_SIZE, Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the color of the dialog from the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param img Image that is linked to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a DialogBox so that the user can use it to"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *         interact with the bot."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        DialogBox box \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        box.setBackground(Background.EMPTY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String style \u003d \"-fx-background-color: rgb(255, 218, 26);\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"-fx-text-fill: black\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        box.dialog.setStyle(style);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return box;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Flips the dialog for the bot and colors the bot."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Output from the bot."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param img Duke image link to the bot."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a DialogBox so that the user can interact with it"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *         and see the dialog pop up."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String style \u003d \"-fx-background-color: rgb(255, 218, 26);\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"-fx-text-fill: black\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        db.dialog.setStyle(style);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 87
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private CompleteList errands;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private boolean byeBye \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Duke() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        storage \u003d new Storage(\"./todo.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            errands \u003d new CompleteList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            errands \u003d new CompleteList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Duke that takes in a file to add text into."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filepath File that the task is added to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *         does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Duke(String filepath) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            errands \u003d new CompleteList(storage.load());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            errands \u003d new CompleteList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Contains the methods to start the bot and"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * start to take in inputs for the bot."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"test\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ui.greeting();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        boolean isThereANextCommand \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        while (!isThereANextCommand) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                ui.printLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(c.execute(errands, ui, storage));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                isThereANextCommand \u003d c.shouldExit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        new Duke(\"todo.txt\").run();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    String getResponse(String input) throws DukeException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String fullCommand \u003d input;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (c instanceof ByeCommand) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                byeBye \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return (c.execute(errands, ui, storage));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (byeBye) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                closeApplication();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void closeApplication() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Timer countdown \u003d new Timer();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        TimerTask onExit \u003d new TimerTask() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        countdown.schedule(onExit, 2000);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 126,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Main() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            stage.setTitle(\"Currents - Plan your personal timetable!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 35
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/ester.jpg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/JoshuaSeet.jpg\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Initializes the console that pops up when the application runs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String style \u003d \"-fx-background-color: rgb(0, 81, 186);\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.dialogContainer.setStyle(style);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //duke welcome message upon opening GUI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                DialogBox.getDukeDialog(ui.greeting(), dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void handleUserInput() throws IOException, DukeException, InterruptedException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 70
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Duke Exceptions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param message takes in the error and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     prints it out to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 14
    }
  },
  {
    "path": "src/main/java/duke/execution/CompleteList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Planner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class CompleteList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static ArrayList\u003cPlanner\u003e listOfPlans \u003d new ArrayList\u003cPlanner\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for CompleteList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CompleteList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Overloaded Constructor for Task list in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the event that a array list is available"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * from the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param list Arraylist that contains all the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CompleteList(ArrayList\u003cPlanner\u003e list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfPlans \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addToCompleteList(Planner assignment) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert assignment !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfPlans.add(assignment);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 33
    }
  },
  {
    "path": "src/main/java/duke/execution/ExpenseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Expenses;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ExpenseList extends CompleteList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected static ArrayList\u003cExpenses\u003e listOfExpenses \u003d new ArrayList\u003cExpenses\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ExpenseList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ExpenseList(ArrayList\u003cExpenses\u003e list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfExpenses \u003d list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addToExpensesList(Expenses assignment) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert assignment !\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfExpenses.add(assignment);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 23
    }
  },
  {
    "path": "src/main/java/duke/execution/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.ByeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.DeadlineCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.EventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.ToDoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.command.ExpensesCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Makes sense of the user input and finds out what command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the user typed in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param line Input by user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the command that comes from the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException Prints out the message to tell the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       what was wrong with the input by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert line !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String properInput \u003d line.trim().toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String[] inputArray \u003d properInput.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String taskType \u003d inputArray[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert taskType !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!isValidTaskType(taskType)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"know what that means :-(\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    I can only do these functions for now: \\n \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Todo \\n\" + \"        Eg. todo __(task)__\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Event \\n\" + \"        Eg. event __(task)__\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"            /at _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Deadline \\n\" + \"        Eg. deadline __(task)__\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"            /by _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Delete \\n\" + \"        Eg. delete __(number)__ or delete all\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Done \\n\" + \"        Eg. done __(number)__\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Find \\n\" + \"        Eg. find __(keyword)__\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Expenses \\n\" + \"        Eg. expenses __$(amount)__\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"            /on __(category)__\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    List \\n\" + \"    Help\\n\" + \"    Bye\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //variable refers to either date or what the expenditure is spent on."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int variableIndex \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String variable \u003d inputArray[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String description \u003d getDescriptionOfTask(properInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (taskType.equals(\"deadline\") || taskType.equals(\"event\") || taskType.equals(\"expenses\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            assert description !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int slashIndex \u003d properInput.indexOf(\"/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            variableIndex \u003d slashIndex + 4;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (properInput.length() \u003e variableIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                variable \u003d properInput.substring(variableIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"Sorry! Please follow the correct format! :)))\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isValidToDoCommand(properInput)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new ToDoCommand(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"☹ OOPSY DAISY!!! Please follow \\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"the correct todo format! :\u003c\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"    Todo \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"        Eg. todo __(task)__\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isValidDeadlineCommand(properInput) \u0026\u0026 isValidDateFormat(properInput)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new DeadlineCommand(description, formatDate(variable));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"☹ OOPSY DAISY!!! Please follow \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"the correct deadline format! :\u003c\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"    Deadline \\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"        Eg. deadline __(task)__ /by \\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"           _(dd/MM/yyyy)_(hhmm)__\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isValidEventCommand(properInput) \u0026\u0026 isValidDateFormat(properInput)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new EventCommand(description, formatDate(variable));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"☹ OOPSY DAISY!!! Please follow \\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"the correct event format! :\u003c\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"    Event \\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"        Eg. event __(task)__ /at \\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"           _(dd/MM/yyyy)_(hhmm)__\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isValidDeleteCommand(properInput)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new DeleteCommand(taskType, description);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"☹ OOPSY DAISY!!! Please follow \\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"the correct delete format! :\u003c\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"    Delete \\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"        Eg. delete __(number)__ or delete all\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isValidFindCommand(properInput)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new FindCommand(taskType, description);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"☹ OOPSY DAISY!!! Please follow\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"the correct find format! :\u003c\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"    Find \\n\" + \"        Eg. find __(keyword)__\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isValidDoneCommand(properInput)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new DoneCommand(taskType, description);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"☹ OOPSY DAISY!!! Please follow \\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"the correct done format! :\u003c\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"    Done \\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"        Eg. done __(number[not expenses task])__\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"expenses\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isValidExpensesCommand(properInput)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(\"asda\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new ExpensesCommand(description, variable);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"☹ OOPSY DAISY!!! Please follow \\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"the correct done format! :\u003c\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"    Expenses \\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"        Eg. expenses __$(amount)__ /on __(category)__\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new ListCommand(description);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Command byeCommand \u003d new ByeCommand(description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            byeCommand.exitSwitch();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return  byeCommand;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new HelpCommand(description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t \\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"know what that means :-(\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    I can only do these functions for now: \\n \\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Todo \\n\" + \"        Eg. todo __(task)__\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Event \\n\" + \"        Eg. event __(task)__\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"            /at _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Deadline \\n\" + \"        Eg. deadline __(task)__\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"            /by _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Delete \\n\" + \"        Eg. delete __(number)__ or delete all\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Done \\n\" + \"        Eg. done __(number)__\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Find \\n\" + \"        Eg. find __(keyword)__\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Expenses \\n\" + \"        Eg. expenses __$(amount)__\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"            /on __(category)__\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    List \\n\" + \"    Help\\n\" + \"    Bye\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the slash index from the input, if available."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * This is so that we can determine the dates easily."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Input by the user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the index of the slash."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getSlashIndex(String text) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return text.indexOf(\"/\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the day numbers from the input."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Date and Time."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the day numbers."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the numbers are not valid, then a DukeException will"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       be thrown to inform the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getDayDateNumbers(String text) throws DukeException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if ((text.length() \u003e (getSlashIndex(text) + 4)) \u0026\u0026 (text.length() \u003e (getSlashIndex(text) + 6))) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Integer.parseInt(text.substring(getSlashIndex(text) + 4, getSlashIndex(text) + 6));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Wrong Format! Please enter a date\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" format as follows: dd/mm/yyyy hhmm.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the month numbers from the input."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Date and Time."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the month numbers."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the numbers are not valid, then a DukeException will"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       be thrown to inform the user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getMonthDateNumbers(String text) throws DukeException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if ((text.length() \u003e (getSlashIndex(text) + 7)) \u0026\u0026 (text.length() \u003e (getSlashIndex(text) + 9))) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Integer.parseInt(text.substring(getSlashIndex(text) + 7, getSlashIndex(text) + 9));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Wrong Format! Please enter a date\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" format as follows: dd/mm/yyyy hhmm.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the year numbers from the input."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Date and Time."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the year numbers."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the numbers are not valid, then a DukeException will"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       be thrown to inform the user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getYearDateNumbers(String text) throws DukeException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if ((text.length() \u003e (getSlashIndex(text) + 10)) \u0026\u0026 (text.length() \u003e (getSlashIndex(text) + 14))) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Integer.parseInt(text.substring(getSlashIndex(text) + 10, getSlashIndex(text) + 14));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Wrong Format! Please enter a date\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" format as follows: dd/mm/yyyy hhmm.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the hour numbers from the input."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Date and Time."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the hour numbers."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the numbers are not valid, then a DukeException will"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       be thrown to inform the user."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getHourDateNumbers(String text) throws DukeException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if ((text.length() \u003e (getSlashIndex(text) + 15)) \u0026\u0026 (text.length() \u003e (getSlashIndex(text) + 17))) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Integer.parseInt(text.substring(getSlashIndex(text) + 15, getSlashIndex(text) + 17));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Wrong Format! Please enter a date\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" format as follows: dd/mm/yyyy hhmm.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the minute numbers from the input."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Date and Time."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the minute numbers."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the numbers are not valid, then a DukeException will"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       be thrown to inform the user."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getMinuteDateNumbers(String text) throws DukeException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (text.length() \u003e\u003d (getSlashIndex(text) + 17)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Integer.parseInt(text.substring(getSlashIndex(text) + 17));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Wrong Format! Please enter a date\\n\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" format as follows: dd/mm/yyyy hhmm.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the numbers are within the limit of days,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * months, years, hours and minutes."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Date and Time."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that checks whether the numbers are valid or not."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the numbers are not valid, then a DukeException will"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       be thrown to inform the user."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidDateNumbers(String text) throws DukeException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int dayDate \u003d getDayDateNumbers(text);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int monthDate \u003d getMonthDateNumbers(text);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int yearDate \u003d getYearDateNumbers(text);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeHour \u003d getHourDateNumbers(text);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeMin \u003d getMinuteDateNumbers(text);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return  dayDate \u003e 0 \u0026\u0026 dayDate \u003c\u003d 31 \u0026\u0026 monthDate \u003e 0 \u0026\u0026 monthDate \u003c\u003d 12"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 timeHour \u003e 0 \u0026\u0026 timeHour \u003c\u003d 24 \u0026\u0026 timeMin \u003e\u003d 0 \u0026\u0026 timeMin \u003c\u003d 59"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 yearDate \u003e\u003d 2019;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the dates and numbers given are valid or not."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Dates and Time."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that checks whether the numbers are valid or not."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the numbers are not valid, then a DukeException will"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       be thrown to inform the user."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidDateFormat(String text) throws DukeException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (isValidDateNumbers(text)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Invalid Date Format!\\n\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    There are at most 31 days, 12 months,\\n\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" 23 hours and 59 minutes! \\n\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"And remember that the year is 2019!\\n\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"    Please try again! Thank you! :)\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to format the date into the appropriate format."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * For example, 10/02/2012 1800 to 10th of February 2012, 6:00 pm."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param date Takes in a valid date to format it."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the correctly formatted date with the"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     appropriate strings."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String formatDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String formatted \u003d date;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!date.contains(\")\")) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Date d \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\").parse(date);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String day \u003d new SimpleDateFormat(\"dd\").format(d);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String month \u003d new SimpleDateFormat(\"MMMMMMMMMMMMMMM\").format(d);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String year \u003d new SimpleDateFormat(\"yyyy\").format(d);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String time \u003d new SimpleDateFormat(\"h:mm a\").format(d).toLowerCase();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String endOfDate;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                int dayInteger \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (dayInteger % 10 \u003d\u003d 1 \u0026\u0026 dayInteger !\u003d 11) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"st\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (dayInteger % 10 \u003d\u003d 2 \u0026\u0026 dayInteger !\u003d 12) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"nd\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (dayInteger % 10 \u003d\u003d 3 \u0026\u0026 dayInteger !\u003d 13) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"rd\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"th\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                formatted \u003d dayInteger + endOfDate + \" of \" + month + \" \" + year + \", \" + time;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(\"That is the wrong date format! \u003e:-(\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Sorry, wrong format!\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return formatted;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the task type is at least one of the functions available."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param taskType User input."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that checks whether the task type is valid or not."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidTaskType(String taskType) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert  taskType !\u003d null;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (taskType.equals(\"todo\") || taskType.equals(\"event\") || taskType.equals(\"deadline\")"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || taskType.equals(\"delete\") || taskType.equals(\"done\") || taskType.equals(\"find\")"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || taskType.equals(\"list\") || taskType.equals(\"bye\") || taskType.equals(\"expenses\")"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || taskType.equals(\"help\")) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sieves out the description of the task and returns it."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the description of the task without task type and dates/variables."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException Throws out a DukeException if the text doesnt follow any of the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       task formats."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String getDescriptionOfTask(String text) throws DukeException {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String description \u003d text;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int spaceIndex \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if ((text.contains(\"deadline\") \u0026\u0026 isValidDeadlineCommand(text))"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (text.contains(\"event\") \u0026\u0026 isValidEventCommand(text))"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (text.contains(\"expenses\") \u0026\u0026 isValidExpensesCommand(text))) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int slashIndex \u003d text.indexOf(\"/\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            description \u003d text.substring(spaceIndex + 1, slashIndex - 1);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else if (text.contains(\"todo\") || text.contains(\"done\")"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || text.contains(\"delete\") || text.contains(\"find\")) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            description \u003d text.substring(spaceIndex + 1);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the to do command input given is valid"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and follows the format that is provided."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells us whether the to do command is valid."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidToDoCommand(String text) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return text.contains(\" \") \u0026\u0026 text.length() \u003e 5;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the deadline command input given is valid"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and follows the format that is provided."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells us whether the deadline command is valid."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidDeadlineCommand(String text) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return text.contains(\" \") \u0026\u0026 text.contains(\"/\") \u0026\u0026 text.contains(\"by\");"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the event command input given is valid"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and follows the format that is provided."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells us whether the event command is valid."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidEventCommand(String text) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return text.contains(\" \") \u0026\u0026 text.contains(\"/\") \u0026\u0026 text.contains(\"at\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the delete command input given is valid"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and follows the format that is provided."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells us whether the delete command is valid."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the format is wrong, a DukeException will be thrown"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       to inform the user and to retype it properly again."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws NumberFormatException If the user types in a character that is not a number,"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                               an exception will be thrown to inform the user."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidDeleteCommand(String text) throws DukeException, NumberFormatException {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (text.length() \u003c 7) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Wrong Format! Please add an \u0027all\u0027 or\\n\""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" a valid number after the delete word! :)\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            char[] valueArray \u003d text.substring(7).toCharArray();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            boolean isNumber \u003d false;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            for (int i \u003d 0; i \u003c valueArray.length; i++) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                isNumber \u003d false;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (Character.isDigit(valueArray[i])) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    isNumber \u003d true;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (text.contains(\"all\")) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return text.contains(\" \");"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else if (isNumber \u0026\u0026 Integer.parseInt(text.substring(7)) \u003e 0) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return text.contains(\" \") \u0026\u0026 Integer.parseInt(text.substring(7)) \u003c\u003d CompleteList.listOfPlans.size();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"Wrong Format! Please add an \u0027all\u0027 or\\n\""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"a valid number after the delete word! Thank You :)\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the find command input given is valid"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and follows the format that is provided."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells us whether the find command is valid."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidFindCommand(String text) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return text.contains(\" \") \u0026\u0026 text.length() \u003e 5;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the done command input given is valid"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and follows the format that is provided."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells us whether the done commmand is valid."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the format is wrong, a DukeException will be thrown"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       to inform the user and to retype it properly again."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidDoneCommand(String text) throws DukeException {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (text.length() \u003c 5) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Wrong Format! Please add a \\n\""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"valid number after the done word! :)\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            char[] valueArray \u003d text.substring(5).toCharArray();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            boolean isNumber \u003d false;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            for (int i \u003d 0; i \u003c valueArray.length; i++) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                isNumber \u003d false;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (Character.isDigit(valueArray[i])) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    isNumber \u003d true;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (isNumber \u0026\u0026 Integer.parseInt(text.substring(5)) \u003e 0) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return text.contains(\" \") \u0026\u0026 Integer.parseInt(text.substring(5)) \u003c\u003d CompleteList.listOfPlans.size()"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u0026\u0026 isValidDoneNumberGiven(text.substring(5));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(\"Wrong Format! Please add a valid \\n\""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \"number that is a task (and not an expenses!!)\\n\""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \" after the done word! Thank You :)\");"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the expenses command given is valid"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and follows the format provided."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text User input"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells us if the input is valid."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidExpensesCommand(String text) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert text !\u003d null;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return text.contains(\" \") \u0026\u0026 text.contains(\"/\") \u0026\u0026 text.contains(\"on\") \u0026\u0026 text.length() \u003e 20;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks whether the done number given is valid. In other"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * words, checks if done number is given to either todo, event"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * or deadline."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param num Number given by the user."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean that tells the user whether the number given"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *         satisfies the conditions."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidDoneNumberGiven(String num) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(Storage.file));"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String text;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int lineCounter \u003d 0;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while ((text \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                lineCounter++;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (lineCounter \u003d\u003d taskNumber) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    if (text.contains(\"[Expenses]\")) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 571
    }
  },
  {
    "path": "src/main/java/duke/execution/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.BufferedInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Planner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Expenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected static ArrayList\u003cPlanner\u003e taskList \u003d new ArrayList\u003cPlanner\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String file \u003d \".todo.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param file File that the list of tasks to be."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Storage(String file) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Adds tasks to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filepath File that the task is added to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param textToAdd Tasks that needs to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     is a directory rather than a regular file,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addToFile(String filepath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert filepath !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert textToAdd !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FileWriter typer \u003d new FileWriter(filepath, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.write(textToAdd + System.lineSeparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Writes task to a file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Can be used as a way to overwrite tasks in the file as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filepath File that the task is added to."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param textToAdd Tasks that needs to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     is a directory rather than a regular file,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void writeToFile(String filepath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert filepath !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert textToAdd !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FileWriter typer \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.write(textToAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Counts the number of tasks in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filename File that the tasks are in."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the number of tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     is a directory rather than a regular file,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int countLines(String filename) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert filename !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try (InputStream inputs \u003d new BufferedInputStream(new FileInputStream(filename))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            byte[] characters \u003d new byte[1024];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int readCharacters \u003d inputs.read(characters);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (readCharacters \u003d\u003d -1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                // no lines to read"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (readCharacters \u003d\u003d 1024) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                for (int i \u003d 0; i \u003c 1024; ) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    if (characters[i++] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        ++count;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                readCharacters \u003d inputs.read(characters);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            // count remaining characters"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (readCharacters !\u003d -1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                for (int i \u003d 0; i \u003c readCharacters; ++i) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    if (characters[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        ++count;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                readCharacters \u003d inputs.read(characters);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return count \u003d\u003d 0 ? 1 : count;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Loads the task into the task list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * in TaskList from the file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return ArrayList that has been copied from the file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If there is nothing in the file to be loaded,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     this exception will be thrown."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ArrayList\u003cPlanner\u003e load() throws IOException, DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        File f \u003d new File(file);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert f !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArrayList\u003cPlanner\u003e tempList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (countLines(file) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Woahsies wavy! There is nothing in this file!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String plans \u003d sc.nextLine();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                int startBracketIndex \u003d plans.indexOf(\"[\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                int closeBracketIndex \u003d plans.indexOf(\"]\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String taskType \u003d plans.substring(startBracketIndex + 1, closeBracketIndex);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                int spaceIndex \u003d plans.indexOf(\" \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Task toDo \u003d new Todo(plans.substring(spaceIndex));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    taskList.add(toDo);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    TaskList.listOfTasks.add(toDo);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    int byIndex \u003d plans.indexOf(\"(\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Task deadline \u003d new Deadline(plans.substring(spaceIndex, byIndex - 1),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            plans.substring(byIndex + 4));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    taskList.add(deadline);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    TaskList.listOfTasks.add(deadline);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    int atIndex \u003d plans.indexOf(\"(\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Task event \u003d new Event(plans.substring(spaceIndex, atIndex - 1),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            plans.substring(atIndex + 4));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    TaskList.listOfTasks.add(event);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                case \"Expenses\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    int onIndex \u003d plans.indexOf(\"(\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Expenses expense \u003d new Expenses(plans.substring(spaceIndex, onIndex - 1),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            plans.substring(onIndex + 4));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    taskList.add(expense);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    ExpenseList.listOfExpenses.add(expense);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printLine();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            System.out.println(\"Your file has been loaded! :)\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            tempList \u003d new ArrayList\u003cPlanner\u003e(taskList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return tempList;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 176
    }
  },
  {
    "path": "src/main/java/duke/execution/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class TaskList extends CompleteList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Overloaded Constructor for Task list in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the event that a array list is available"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * from the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param list Arraylist that contains all the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfTasks \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addToTaskList(Task assignment) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert assignment !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfTasks.add(assignment);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 33
    }
  },
  {
    "path": "src/main/java/duke/execution/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Ui."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints the greeting at the initiation of the chat bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String greeting() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String dukeLogo \u003d \"     ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Prints out greeting of the chat bot."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String logo \u003d \"    Hello! My name is \\n\" + dukeLogo + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    What can I do for you? \\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        logo +\u003d \"    I can only do these functions for now: \\n \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Todo \\n\" + \"        Eg. todo __(task)__\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Event \\n\" + \"        Eg. event __(task)__\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"            /at _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Deadline \\n\" + \"        Eg. deadline __(task)__\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"            /by _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Delete \\n\" + \"        Eg. delete __(number)__ or delete all\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Done \\n\" + \"        Eg. done __(number)__\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Find \\n\" + \"        Eg. find __(keyword)__\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Expenses \\n\" + \"        Eg. expenses __$(amount)__\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"            /on __(category)__\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    List \\n\" + \"    Help\\n\" + \"    Bye\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //printIndent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //System.out.println(\"Ill be adding in more features soon! Please be patient! :)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints indentation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Helps to order the output, making it much neater."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void printIndent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.print(\"    \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints line."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Helps to order the output and makes it"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * much neater."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"_____________________________\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"______________________________________\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints a statement informing the user that the bot"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * has added the task into the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printGI() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Ends the chat bot."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printBye() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Reads what the user writes."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns what the scanner reads."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return scan.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * To remove a task if it is not needed anymore."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param i Indicates the task number that is done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String printDelete(int i) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return CompleteList.listOfPlans.get(i - 1).toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints a statement to tell the user that the task has been removed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printRemove() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Noted. I\u0027ve removed this task.\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints the number of tasks in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String printNumOfTasks() throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Now you have \" + Ui.getNumOfTasks() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the number of task inside the file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Number of tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getNumOfTasks() throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Storage.countLines(Storage.file);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * When there is nothing in the file, this method"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * will print out to the user, telling them that there"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * is no previous tasks saved in the file."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"Nothing in file!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints out the error message."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param error Error message."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert error !\u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints out a String that informs the user what functions"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * are available on this application."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a String that lists out all the functions."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printHelp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"    I can only do these functions for now: \\n \\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Todo \\n\" + \"        Eg. todo __(task)__\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Event \\n\" + \"        Eg. event __(task)__\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"            /at _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Deadline \\n\" + \"        Eg. deadline __(task)__\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"            /by _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Delete \\n\" + \"        Eg. delete __(number)__ or delete all\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Done \\n\" + \"        Eg. done __(number)__\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Find \\n\" + \"        Eg. find __(keyword)__\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Expenses \\n\" + \"        Eg. expenses __$(amount)__\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"            /on __(category)__\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    List \\n\" + \"    Help\\n\" + \"    Bye\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 173
    }
  },
  {
    "path": "src/main/java/duke/execution/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Bye Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Bye action to shut down duke bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ByeCommand(String action) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints out bye statement to signal to user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * that the bot is shutting down."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Saves tasks into tasklist if task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *              is present"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Prints out messages to show to user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Stores tasks into file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return ui.printBye();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 34
    }
  },
  {
    "path": "src/main/java/duke/execution/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String action;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String variable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean canExit \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Command classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Description of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Command(String action) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Command classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Description of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param variable Variable that changes depending on the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Command(String action, String variable) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.variable \u003d variable;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Tells the loop whether it should exit it."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the boolean canExit."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return canExit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Changes the boolean canExit to the opposite value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the newly changed boolean."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean exitSwitch() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return canExit \u003d !canExit;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Dummy return value as it is always overrided by child classes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param list Not needed in this case."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Not needed in this case."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Not needed in this case."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a dummy string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     than a regular file, does not exist but cannot be"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If there is a different input that is not accepted,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       a error message will show up."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList list, Ui ui, Storage storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 71
    }
  },
  {
    "path": "src/main/java/duke/execution/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Deadline Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param variable Date to finish the tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DeadlineCommand(String action, String variable) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action, variable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Executes the deadline command and prints out statements to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * tell the user that the deadline tasks has been added to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Adds the deadline to the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Prints out statements to indicate to user what"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *           has happened."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Stores the tasks inside another file so that"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                the task will be available the next time the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                bot starts up."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns String to print out to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     than a regular file, does not exist but cannot be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Task assignmentToDo \u003d new Deadline(action, variable);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        tasks.addToTaskList(assignmentToDo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        errands.addToCompleteList(assignmentToDo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        storage.addToFile(Storage.file, assignmentToDo.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String deadlineOutput \u003d ui.printGI() + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        deadlineOutput +\u003d \"  \" + assignmentToDo.toString() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        deadlineOutput +\u003d Ui.printNumOfTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return deadlineOutput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 55
    }
  },
  {
    "path": "src/main/java/duke/execution/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Planner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Delete command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Delete command word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param variable Number of task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DeleteCommand(String action, String variable) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action, variable);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Executes the delete command and prints out statements to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * tell the user that the delete tasks has been deleted to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Not needed in this case."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Prints out statements to indicate to user what"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *           has happened."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Stores the tasks inside another file so that"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                the task will be available the next time the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                bot starts up."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns String to print out to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     than a regular file, does not exist but cannot be"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (variable.equals(\"all\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            storage.writeToFile(Storage.file, \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            CompleteList.listOfPlans.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"Everything in your list has been removed!\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"Add more tasks to get started again!!!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(variable);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            CompleteList.listOfPlans.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            storage.writeToFile(Storage.file, \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            for (Planner errand : CompleteList.listOfPlans) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                storage.addToFile(Storage.file, errand.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String deleteOutput \u003d ui.printRemove() + \"\\n\" + Ui.printDelete(taskNumber) + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            deleteOutput +\u003d Ui.printNumOfTasks();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return deleteOutput;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 62
    }
  },
  {
    "path": "src/main/java/duke/execution/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Done command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param variable Number of tasks that is completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DoneCommand(String action, String variable) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action, variable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Executes the done command and prints out statements to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * tell the user that the deadline tasks has been added to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Not needed in this case."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Not needed in this case."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Not needed in this case."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns String to print out to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int taskNum \u003d Integer.parseInt(variable);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(taskNum - getNumOfExpensesBeforeDoneTask(taskNum) - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        TaskList.listOfTasks.get(taskNum - getNumOfExpensesBeforeDoneTask(taskNum) - 1).markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String doneOutput \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        doneOutput +\u003d TaskList.listOfTasks.get(taskNum - getNumOfExpensesBeforeDoneTask(taskNum) - 1).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return doneOutput;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks how many expenses task there are before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the tasks that is to be ticked off."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param taskNum Task Number from User input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return returns the number of expenses in front of the done task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getNumOfExpensesBeforeDoneTask(int taskNum) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(Storage.file));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String text;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int lineCounter \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while ((text \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                lineCounter++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (text.contains(\"Expenses\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (lineCounter \u003d\u003d taskNum) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return counter;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 75
    }
  },
  {
    "path": "src/main/java/duke/execution/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Event Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param variable Date to finish the tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EventCommand(String action, String variable) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action, variable);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Executes the deadline command and prints out statements to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * tell the user that the deadline tasks has been added to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Adds the deadline to the list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Prints out statements to indicate to user what"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *           has happened."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Stores the tasks inside another file so that"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                the task will be available the next time the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                bot starts up."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns String to print out to the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     than a regular file, does not exist but cannot be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Task assignmentToDo \u003d new Event(action, variable);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        tasks.addToTaskList(assignmentToDo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        errands.addToCompleteList(assignmentToDo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        storage.addToFile(Storage.file, assignmentToDo.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String eventOutput \u003d ui.printGI() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        eventOutput +\u003d \"  \" + assignmentToDo.toString() + \"\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        eventOutput +\u003d Ui.printNumOfTasks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return eventOutput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 56
    }
  },
  {
    "path": "src/main/java/duke/execution/command/ExpensesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.ExpenseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Expenses;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ExpensesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ExpensesCommand(String action, String variable) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action, variable);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Expenses expense \u003d new Expenses(action, variable);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ExpenseList expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expenses.addToExpensesList(expense);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expenses.addToCompleteList(expense);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        storage.addToFile(Storage.file, expense.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expenseOutput \u003d ui.printGI() + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expenseOutput +\u003d \"  \" + expense.toString() + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expenseOutput +\u003d Ui.printNumOfTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return expenseOutput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 33
    }
  },
  {
    "path": "src/main/java/duke/execution/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Find command word.s"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param variable Number of task to be deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public FindCommand(String action, String variable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action, variable);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Executes the deadline command and prints out statements to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * tell the user that the deadline tasks has been added to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Not needed in this case."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Prints out statements to indicate to user what"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *           has happened."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Not needed in this case."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns String to print out to the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     than a regular file, does not exist but cannot be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If there is no matching word, an error message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                       will be sent to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        File f \u003d new File(Storage.file);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArrayList\u003cString\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String text \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int spaceIndex \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int bracketIndex \u003d text.length();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (text.contains(\"(\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                bracketIndex \u003d text.indexOf(\"(\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String description \u003d text.substring(spaceIndex + 1, bracketIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (description.contains(variable)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String task \u003d num + \".\" + text;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                tempList.add(task);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (tempList.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"No such word is found in\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"any of the tasks.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String matchingTask \u003d \"Here are the matching tasks\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" in your list!\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            for (String str : tempList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                matchingTask +\u003d str + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return matchingTask;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 81
    }
  },
  {
    "path": "src/main/java/duke/execution/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public HelpCommand(String action) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return ui.printHelp();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 23
    }
  },
  {
    "path": "src/main/java/duke/execution/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action List Command word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ListCommand(String action) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Executes the list command and prints out all the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Not needed in this case."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Not needed in this case."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Not needed in this case."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns those tasks that match the keyword."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws FileNotFoundException If there is no prior list of task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                               available, there is nothing to print,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                               thus, an error message will be shown."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (CompleteList.listOfPlans.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"There is no tasks currently!!!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String list \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            File temp \u003d new File(Storage.file);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Scanner s \u003d new Scanner(temp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int numbering \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                list +\u003d numbering + \". \" + s.nextLine() + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                numbering++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 53
    }
  },
  {
    "path": "src/main/java/duke/execution/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.execution.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.CompleteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.models.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for To Do Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param action Description of To Do task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ToDoCommand(String action) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(action);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Executes the To do command. Adds the to do task to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * a list and prints out the task again to confirm that"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * task has been added to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param errands Adds the deadline to the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param ui Prints out statements to indicate to user what"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *           has happened."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param storage Stores the tasks inside another file so that"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                the task will be available the next time the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                bot starts up."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns String to print out to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     than a regular file, does not exist but cannot be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *                     created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String execute(CompleteList errands, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert errands !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert storage !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Task assignmentToDo \u003d new Todo(action);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        tasks.addToTaskList(assignmentToDo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        errands.addToCompleteList(assignmentToDo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        storage.addToFile(Storage.file, assignmentToDo.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String todoOutput \u003d ui.printGI() + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        todoOutput +\u003d \"  \" + assignmentToDo.toString() + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        todoOutput +\u003d Ui.printNumOfTasks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return todoOutput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 55
    }
  },
  {
    "path": "src/main/java/duke/models/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Deadline task to be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param by Date of the deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to give the string that is to be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * added to the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the string to be loaded into"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     the file and printed out."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert by !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"[D]\" + super.toString() + \" \" + description + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 30
    }
  },
  {
    "path": "src/main/java/duke/models/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String when;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected boolean isValid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Event task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Event task to be attended."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param when Date of the event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Event(String description, String when) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.when \u003d when;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to give the string that is to be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * added to the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the string to be loaded into"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     the file and printed out."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"[E]\" + super.toString() + \" \" + description + \" (at: \" + when + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 30
    }
  },
  {
    "path": "src/main/java/duke/models/Expenses.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Expenses extends Planner {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String on;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Expenses(String description, String on) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.on \u003d on;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to mark the task to done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"[Expenses] \" + description + \" (on: \" + on + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 22
    }
  },
  {
    "path": "src/main/java/duke/models/Find.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Find extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Find tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Description of tasks to find."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Find(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 14
    }
  },
  {
    "path": "src/main/java/duke/models/Planner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Planner {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Planner(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to mark the task to done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 19
    }
  },
  {
    "path": "src/main/java/duke/models/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Task extends Planner {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected boolean isCorrectFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Takes in a string that is"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     either Todo, Event or Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.isCorrectFormat \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns tick or cross symbol."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return A tick or cross to symbolize whether the task has been done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return (isDone ? \"done\" : \"not done\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to mark the task to done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to get the String for whether"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the task is done or not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the tick or cross in brackets."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 48
    }
  },
  {
    "path": "src/main/java/duke/models/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Todo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Takes in todo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to get the string for Todo tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the formatted string to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     be added into tasklist and file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"[T]\" + super.toString() + \" \" + description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 24
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 20
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void formatDateTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(\"23rd of September 1997, 6:27 am\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Parser.formatDate(\"23/09/1997 0627\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 14
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void countLinesTest() throws IOException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String file \u003d \"./src/test/test.txt\";;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(2, Storage.countLines(file));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 16
    }
  },
  {
    "path": "src/test/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "watermelon"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 2
    }
  }
]
