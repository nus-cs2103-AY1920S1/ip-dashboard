[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    options.encoding \u003d \"UTF-8\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 40,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * AddCommand is a class dealing with commands that"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * add task items to the list of tasks. These items"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * can be ToDo, Event or Deadline tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Constructor for AddCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Boolean isExit is set to false because"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * program should not terminate after command is executed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param commandArr String array containing the split text retrieved from user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public AddCommand(String[] commandArr) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Adds the corresponding Task type to the list of tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * based on the user input. These Tasks can be either"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * a ToDo, Event or Deadline Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param ui the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param storage the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @throws DukeException  If there is invalid input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cTask\u003e taskLst \u003d tasks.getTaskLst();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (commandArr[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Add a ToDo task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (commandArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                throw new DukeException(\"     \\u2639 OOPS!!! \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        + \"The description of a todo cannot be empty.\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            taskLst.add(new ToDo(commandArr[1], false));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } else if (commandArr[0].equals(\"deadline\") || commandArr[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            String[] fullCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (commandArr[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                fullCommand \u003d commandArr[1].split(\" /by \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            } else { // if command equals \"event\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                fullCommand \u003d commandArr[1].split(\" /at \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (fullCommand.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                String msg \u003d \"     \\u2639 Either the description of \" + (commandArr[0].equals(\"deadline\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        ? \"a deadline \" : \"an event \") + \"or its date-time is not provided.\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                throw new DukeException(msg);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            String description \u003d fullCommand[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            String userDateTimeString \u003d fullCommand[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            LocalDateTime localDateTime \u003d Parser.parseDateTime(userDateTimeString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (localDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                String dateInstruction \u003d \"     Example date formats allowed: 07101997, 07/10/1997, \" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        \"07 10 1997, 7 October 1997.\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                String timeInstruction \u003d \"     Example time formats allowed: 8:39AM, 0839.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                String dtInstruction \u003d \"     Example date-times allowed: 07/10/1997 0839, 7 October 8:39AM.\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                String msg \u003d \"     \\u2639 You have entered an invalid date-time format!\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        + dateInstruction + timeInstruction + dtInstruction;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                throw new DukeException(msg);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (commandArr[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                taskLst.add(new Deadline(description, localDateTime, false));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            } else { // if command equals \"event\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                taskLst.add(new Event(description, localDateTime, false));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Invalid command being supplied by the user"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            throw new DukeException(\"     \\u2639 OOPS!!! I\u0027m sorry, \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    + \"but I don\u0027t know what that means :-(\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return String.format(\"     Got it. I\u0027ve added this task:\\n       %s\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        + \"     Now you have %d tasks in the list.\\n\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            taskLst.get(taskLst.size() - 1), taskLst.size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 96
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Command is the abstract base class for all types of commands that"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * can be given from user input. Concrete command classes that extend"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * from Command include: ListCommand, ExitCommand, AddCommand, DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * and DeleteCommand. Command objects contain an execute method that will"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * carry out the appropriate actions based on the specific type of command given."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** String array containing the split text retrieved from user input. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    String[] commandArr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns true if the taskIndex the user provided corresponds"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * to an existing task in the taskLst, and false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * (taskIndex can assume values from 0 to size of taskLst - 1)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param taskIndex the index of task user wants to perform operations on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param taskLst ArrayList storing all the Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return boolean true if task number is valid, false otherwise."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    static boolean checkValidTaskNumber(int taskIndex, ArrayList\u003cTask\u003e taskLst) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c taskLst.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Executes the appropriate set of instructions associated with each command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param ui the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param storage the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @throws DukeException  If there is invalid input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"execute Command\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 51
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * DeleteCommand is a class that removes the specified"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * task item from the list of tasks. These items"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * can be ToDo, Event or Deadline tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *  Constructor for DeleteCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *  Boolean isExit is set to false because"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *  program should not terminate after command is executed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param commandArr String array containing the split text retrieved from user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public DeleteCommand(String[] commandArr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Removes the specified task from the list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * The number of the task to be removed is specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * in the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param ui the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param storage the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cTask\u003e taskLst \u003d tasks.getTaskLst();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (commandArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            throw new DukeException(\"     \\u2639 A task number has to be specified.\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        int delTaskIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        delTaskIndex \u003d Integer.parseInt(commandArr[1]) - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assert delTaskIndex \u003e\u003d 0 : \"delTaskIndex must be non-negative\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (Command.checkValidTaskNumber(delTaskIndex, taskLst)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            Task deletedTask \u003d taskLst.remove(delTaskIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return String.format(\"     Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                            + \"       %s\\n     Now you have %d tasks in the list.\\n\", deletedTask, taskLst.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            String msg \u003d String.format(\"     \\u2639 You have entered an invalid task number!\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    \" Please enter a number from between 1 to %d\\n\", taskLst.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            throw new DukeException(msg);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 60
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * DoneCommand is a class that marks the specified task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * item in the list of tasks as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * These items can be ToDo, Event or Deadline tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Constructor for DoneCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Boolean isExit is set to false because"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * program should not terminate after command is executed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param commandArr String array containing the split text retrieved from user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public DoneCommand(String[] commandArr) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Marks the specified task as completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * The number of the task to be marked is specified"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * by the user via the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param ui the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param storage the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cTask\u003e taskLst \u003d tasks.getTaskLst();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (commandArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            throw new DukeException(\"     \\u2639 A task number has to be specified.\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        int taskDoneIndex \u003d Integer.parseInt(commandArr[1]) - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assert taskDoneIndex \u003e\u003d 0 : \"taskDoneIndex must be non-negative\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (Command.checkValidTaskNumber(taskDoneIndex, taskLst)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            taskLst.get(taskDoneIndex).setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return String.format(\"     Nice! I\u0027ve marked this task as done:\\n       %s\\n\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    taskLst.get(taskDoneIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            String msg \u003d String.format(\"     \\u2639 You have entered an invalid task number!\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    \" Please enter a number from between 1 to %d\\n\", taskLst.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            throw new DukeException(msg);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 60
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * ExitCommand is a class that terminates the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Constructor for ExitCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Boolean isExit is set to true because"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * program should be terminated after command is executed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param commandArr String array containing the split text retrieved from user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public ExitCommand(String[] commandArr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Duke.setShouldExitProgram(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Exits the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param ui the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param storage the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Save the new task list to the hard disk"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            ui.showSavingError(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"     Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 45
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * FindCommand is a class that finds task items"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * from the list of tasks based on a keyword given via user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *  Constructor for FindCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *  Boolean isExit is set to false because"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *  program should not terminate after command is executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param commandArr String array containing the split text retrieved from user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public FindCommand(String[] commandArr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a boolean value detailing whether the String description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * contains the keywords as words."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * The order of the keywords is not important to this search. A description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * is considered a match as long as it contains all the keywords specified,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * regardless of order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param description the description (of the task)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param keywords String[] containing the keywords to be matched"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return boolean value detailing whether a match was found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private static boolean containsKeyWords(String description, String[] keywords) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cString\u003e al \u003d new ArrayList\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cString\u003e desc \u003d new ArrayList\u003c\u003e(Arrays.asList(description.split(\" \")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return desc.containsAll(al);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Finds tasks from the list of tasks that"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * match the keyword specified by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param ui the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param storage the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        String[] keywords \u003d commandArr[1].split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cTask\u003e taskLst \u003d tasks.getTaskLst();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        StringBuilder store \u003d new StringBuilder(\"     Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        for (int i \u003d 0; i \u003c taskLst.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (containsKeyWords(taskLst.get(i).getDescription(), keywords)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                store.append(String.format(\"     %d.%s\\n\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        i + 1, taskLst.get(i)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return store.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 68
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * ListCommand is a class that displays all task items"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * that are currently in the list of tasks to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * These items can be ToDo, Event or Deadline tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Boolean isExit is set to false because"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * program should not terminate after command is executed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param commandArr String array containing the split text retrieved from user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public ListCommand(String[] commandArr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.commandArr \u003d commandArr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Displays all tasks that are currently on the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * list of tasks to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param ui the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param storage the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cTask\u003e taskLst \u003d tasks.getTaskLst();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        StringBuilder store\u003d new StringBuilder(\"     Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        for (int i \u003d 0; i \u003c taskLst.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            store.append(String.format(\"     %d.%s\\n\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    i + 1, taskLst.get(i)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return store.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 46
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        displayPicture.setFitWidth(150.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        displayPicture.setFitHeight(150.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Clip the ImageView into a circle"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        displayPicture.setClip(new Circle(75, 75, 75));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        DialogBox db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        db.setSpacing(35.0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 53
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Duke is the driver class of the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Parser, Storage, TaskList, Ui objects are instantiated here and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * passed to Command objects in order to execute the appropriate actions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the Storage object that reads from and writes to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the TaskList object storing all recorded Tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the Ui object dealing with user interaction."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * boolean indicating whether the program should be exited."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    static boolean shouldExitProgram \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/eminem.png\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/lelouch2.jpeg\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Setter method for the boolean indicating whether program should be exited."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param shouldExitProgram boolean"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public static void setShouldExitProgram(boolean shouldExitProgram) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Duke.shouldExitProgram \u003d shouldExitProgram;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Duke constructor that takes in a file path and"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * instantiates Ui, Storage and TaskList objects."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        String filePath \u003d \".\" + File.separator + \"data\" + File.separator + \"duke.txt\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            ui.showLoadingError(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * The driver method where the logic of the Duke"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * program is written: parsing of user input, instantiating"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the appropriate Command class and then executing the corresponding"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * set of actions associated with that command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param fullCommand String that user typed as text"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String output reply from Duke"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private String run(String fullCommand) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        String reply;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            reply \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            reply \u003d e.getMessage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Save the new task list to the hard disk"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (isExit) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                storage.save(tasks);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                ui.showSavingError(e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assert !reply.isEmpty() : \"Reply should not be empty\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return ui.showOpeningLine() + reply + ui.showClosingLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        stage.setMinHeight(700.0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        stage.setMinWidth(600.0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        mainLayout.setPrefSize(600.0, 700.0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scrollPane.setPrefSize(585, 635);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        sendButton.setPrefWidth(80.0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Output welcome text on the GUI"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        String welcomeText \u003d ui.showWelcome();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Label welcomeLabel \u003d new Label(welcomeText);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcomeLabel, new ImageView(duke)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e handleUserInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        userInput.setOnAction((event) -\u003e handleUserInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Label dukeText \u003d new Label(run(userInput.getText()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        );"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        if (shouldExitProgram) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            delay.setOnFinished( event -\u003e System.exit(0) );"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 199,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 14
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Parser is a class that handles the parsing of user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * It contains a method parse that instantiates and returns"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * the appropriate type of Command object associated with the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a Command object that is one of 6 types:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * AddCommand, DeleteCommand, DoneCommand,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * FindCommand, ExitCommand and ListCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * The type of Command object returned is based on the user input:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * add [description] [datetime] (datetime only required for Event and Deadline Tasks),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * delete [task number], done [task number], find [keyword],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * exit, and list commands respectively."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param fullCommand the line of user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return a Command object associated with user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @throws DukeException  If there is invalid input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        String[] commandArr \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        switch (commandArr[0]) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return new ExitCommand(commandArr);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return new ListCommand(commandArr);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return new DeleteCommand(commandArr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return new DoneCommand(commandArr);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return new FindCommand(commandArr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return new AddCommand(commandArr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            throw new DukeException(\"     \\u2639 OOPS!!! I\u0027m sorry, \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    + \"but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Try parsing for different date time formats"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // to give the user greater freedom to type dateTimes in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // a variety of formats"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 07/10/1997 0839"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 07101997 0839"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"ddMMyyyy HHmm\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 07 10 1997 0839"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"dd MM yyyy HHmm\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 7 October 1997 0839"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"d LLLL yyyy HHmm\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 07/10/1997 8:39AM"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"dd/MM/yyyy h:mma\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 07101997 8:39AM"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"ddMMyyyy h:mma\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 07 10 1997 8:39PM"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"dd MM yyyy h:mma\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Parse for format of type: 7 October 1997 8:39PM"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"d LLLL yyyy h:mma\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // Ignore the exception because date time keyed in by user"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            // could be considered valid by subsequent parses"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 142
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Storage is a class that deals with reading from the specified file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * and instantiating a list of tasks as well as saving those tasks to the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** The path of the file to be read from and written to. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * The Storage constructor takes the path of the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * file to be read from as input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param filePath The path of the file to be read from and written to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns an ArrayList of Tasks that have been read"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * from the file specified by the file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return Arraylist of Tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @throws DukeException  if there is invalid input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @throws IOException  if there is an error reading from the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    ArrayList\u003cTask\u003e load() throws DukeException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        // Create a new txt file if it currently does not exist"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        ArrayList\u003cTask\u003e taskLst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            String s \u003d sc.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            String line \u003d s.substring(8);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            if (s.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                taskLst.add(new ToDo(line, s.charAt(4) \u003d\u003d \u00271\u0027));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            } else if (s.charAt(0) \u003d\u003d \u0027D\u0027 || s.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                for (int i \u003d 0; i \u003c line.length(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    if (line.charAt(i) \u003d\u003d \u0027|\u0027) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        if (s.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                            taskLst.add(new Deadline(line.substring(0, i - 1),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                    LocalDateTime.parse(line.substring(i + 2),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                            DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                    s.charAt(4) \u003d\u003d \u00271\u0027));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        } else { // if s.charAt(0) \u003d\u003d \u0027E\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                            taskLst.add(new Event(line.substring(0, i - 1),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                    LocalDateTime.parse(line.substring(i + 2),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                            DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                    s.charAt(4) \u003d\u003d \u00271\u0027));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                throw new DukeException(\"Invalid file format.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return taskLst;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Saves the updated list of tasks to the same file that was read from."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param tasks the TaskList object that contains the ArrayList of Tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @throws IOException  if there is an error saving to the file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void save(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        StringBuilder textToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        for (Task task : tasks.getTaskLst()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "            textToAdd.append(task.fileString()).append(\"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        fw.write(textToAdd.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 95
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * TaskList class stores the list of Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** The list of Tasks. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private ArrayList\u003cTask\u003e taskLst;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * TaskList constructor that takes no arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * and instantiates an empty list of Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.taskLst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * TaskList constructor that takes in a list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * of Tasks and stores it in taskLst."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param taskLst the list of Tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskLst) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.taskLst \u003d taskLst;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns the list of Tasks stored by this TaskList object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return ArrayList of Tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskLst() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return taskLst;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 40
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Ui class that handles user interaction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Stores methods that read the input provided by the user,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * as well as methods that print messages addressed to the user"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * or appropriate responses to user commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** Horizontal line to be used extensively in printed messages and responses. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    private String hrzLine \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Prints a welcome message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String welcome message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    String showWelcome() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        String store \u003d hrzLine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        store +\u003d \"     Hello! I\u0027m Duke\\n     What can I do for you?\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        store +\u003d String.format(\"%s\\n\", hrzLine);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Prints the Opening Line."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    String showOpeningLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return hrzLine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Prints the Closing Line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    String showClosingLine() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return String.format(\"%s\\n\", hrzLine);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Prints the message associated with a exception"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * that occurred on loading from the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param err String containing the message of the exception."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    void showLoadingError(String err) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        System.out.println(hrzLine);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        System.out.printf(\"     %s\\n\", err);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        System.out.printf(\"%s\\n\\n\", hrzLine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Prints the message associated with an exception"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * that occurred on saving to the file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param err String containing the message of the exception."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void showSavingError(String err) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        showLoadingError(err);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 62
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * DukeException is an exception class pertaining"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * to the Duke program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 11
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Deadline is a class that represents tasks that have deadlines."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * A Deadline task, aside from its description and state, stores a LocalDateTime"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * representing the time by which the task has to be completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** LocalDateTime storing the time by which task has to be completed. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Deadline constructor that takes a description, a state isDone"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * as well as a LocalDateTime that describes by when the task is to be completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param description String containing the description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param by LocalDateTime detailing when the task is to be completed by."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param isDone boolean storing the task\u0027s state of completion."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma\")) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a string that is of the appropriate format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * to be saved to the file. This formatting ensures that"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the task information can be read accurately again in the future."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Deadline objects are to be stored in this format:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * D | isDone | description d MMMM yyyy ha"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String format of the task to be saved to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"D\" + super.fileString() + \" | \" + by.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 47
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Event is a class that represents tasks that occurs at a certain time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * An Event task, aside from its description and state, stores a LocalDateTime"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * representing the time at which it occurs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** LocalDateTime storing the time at which the event will occur. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Event constructor that takes a description, a state isDone"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * as well as a LocalDateTime that describes at which time the event occurs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param description String containing the description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param at LocalDateTime detailing when the event occurs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param isDone boolean storing the task\u0027s state of completion."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public Event(String description, LocalDateTime at, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma\")) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a string that is of the appropriate format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * to be saved to the file. This formatting ensures that"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the task information can be read accurately again in the future."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Event objects are to be stored in this format:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * E | isDone | description d MMMM yyyy ha"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String format of the task to be saved to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"E\" + super.fileString() + \" | \" + at.format(DateTimeFormatter.ofPattern(\"d MMMM yyyy, h:mma\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 48
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * Task is an abstract class that represents the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * type of tasks that Duke can perform operations on."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * These Tasks are one of 3 types: ToDo, Deadline or Event task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** The description of the task. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /** Boolean representing the state of the task, if it is completed. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Task constructor that takes a description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * and its state as arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param isDone the state of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns the status icon associated with this task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * A tick if it is done, an X symbol if it is not."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String status icon."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Return the description of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return the String description of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Changes the state of the task from not completed to completed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Boolean value is held by isDone is changed from false to true."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a string that is of the appropriate format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * to be saved to the file. This formatting ensures that"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the task information can be read accurately again in the future."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String format of the task to be saved to the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \" | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 69
    }
  },
  {
    "path": "src/main/java/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * ToDo is a class that represents tasks that are to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " * A ToDo task only contains a description as well as a state of completion."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * ToDo constructor that takes in a description as well as a boolean"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * value representing the state of completion of the task as arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param description String containing the description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @param isDone boolean storing the task\u0027s state of completion."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * Returns a string that is of the appropriate format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * to be saved to the file. This formatting ensures that"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * the task information can be read accurately again in the future."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * ToDo objects are to be stored in this format:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * T | isDone | description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     * @return String format of the task to be saved to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public String fileString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        return \"T\" + super.fileString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 38
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(\"[D][\\u2713] submit cs2100 homework (by: 12 December 2012, 11:59PM)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                new Deadline(\"submit cs2100 homework\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        LocalDateTime.parse(\"12/12/2012 2359\", DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\")),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                true).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testFileStringFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(\"D | 0 | collect passport | 7 February 2020, 8:15AM\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                new Deadline(\"collect passport\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        LocalDateTime.parse(\"07/02/2020 0815\", DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                false).fileString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 27
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(\"[E][\\u2718] play basketball with Yu Jie (at: 17 December 2019, 10:20AM)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                new Event(\"play basketball with Yu Jie\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        LocalDateTime.parse(\"17/12/2019 1020\", DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\")),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                false).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testFileStringFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(\"E | 1 | eat dinner with Spider-man | 1 January 2020, 7:00PM\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                new Event(\"eat dinner with Spider-man\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        LocalDateTime.parse(\"01/01/2020 1900\", DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                                true).fileString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 27
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testBye() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Command cmd \u003d Parser.parse(\"bye\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(true, cmd instanceof ExitCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.getFullCommand(), \"bye\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.isExit(), true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testDone() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Command cmd \u003d Parser.parse(\"done 5\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(true, cmd instanceof DoneCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.getFullCommand(), \"done 5\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.isExit(), false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testDelete() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Command cmd \u003d Parser.parse(\"delete 3\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(true, cmd instanceof DeleteCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.getFullCommand(), \"delete 3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.isExit(), false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testFind() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Command cmd \u003d Parser.parse(\"find ball\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(true, cmd instanceof FindCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.getFullCommand(), \"find ball\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.isExit(), false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testToDo() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Command cmd \u003d Parser.parse(\"todo homework\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(true, cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.getFullCommand(), \"todo homework\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.isExit(), false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testDeadline() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Command cmd \u003d Parser.parse(\"deadline submit homework /by 24/03/2021\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(true, cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.getFullCommand(), \"deadline submit homework /by 24/03/2021\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.isExit(), false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testEvent() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        Command cmd \u003d Parser.parse(\"event party with Daniel /at 27/08/2019\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(true, cmd instanceof AddCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.getFullCommand(), \"event party with Daniel /at 27/08/2019\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(cmd.isExit(), false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 72
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(\"[T][\\u2718] take Japanese 3\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                new ToDo(\"take Japanese 3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        false).toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    public void testFileStringFormat() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "        assertEquals(\"T | 1 | start attending crossfit classes\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                new ToDo(\"start attending crossfit classes\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "                        true).fileString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bruceskellator"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bruceskellator": 25
    }
  }
]
