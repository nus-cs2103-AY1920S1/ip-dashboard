[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "version \u00270.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    enableAssertions \u003d false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    archiveVersion \u003d \"0.2.1\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    //mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//javafx {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "//}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "sourceCompatibility \u003d 11;"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 59,
      "-": 13
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Help the user keep track of various type of tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Show what are the task on the list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Mark the task as completed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Delete a task from the list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Search the key through all existing task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "* Show help on the command format"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "### `todo` - Create a new todo task "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "Creates a new todo task with given discription."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "`todo [description]`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "`outcome`"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 9,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author ShuTingY-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// Original code by Jeffrey Lum, and can be found in the tutorials directory of this repository."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// Reused with minor modifications."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * displays the responds from the duke."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param text duke\u0027s responds."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param img duke\u0027s display image."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return Dialogbox."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 69,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Duke is  a Personal Assistant Chatbot that helps a person to keep track of various things."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author Yang Shuting"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private  UiText ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * constructor to create a Duke Chatbot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param filePath The path for the text file that storages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *                 the data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ui \u003d new UiText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this(Storage.DEFAULT_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * returns a string of duke\u0027s respond base on the user input command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param text user input text."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return duke\u0027s response"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getResponse(String text) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            Command c \u003d Parser.parse(text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String commandResult \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * read the information from the storage and display to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return content from the storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getDataFromStorage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return storage.fileContents();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return UiText.loadingError();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ui.printlnMsg(getDataFromStorage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ui.printlnMsg(UiText.greeting());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ui.printlnMsg(UiText.showLine());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ui.printlnMsg(UiText.showLine());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String commandResult \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ui.printlnMsg(commandResult);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ui.printlnMsg(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                ui.printlnMsg(UiText.showLine());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * check if the user has key in exit command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return true if user has enter the exit command, or else otherwise."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * main method in the Duke."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param args system input"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Duke duke \u003d new Duke(\"src/main/data/duke.txt\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 115
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author ShuTingY-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// Original code by Jeffrey Lum, and can be found in the tutorials directory of this repository."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 11,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author ShuTingY-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// Original code by Jeffrey Lum, and can be found in the tutorials directory of this repository."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// Reused with minor modifications."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 35,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author ShuTingY-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// Original code by Jeffrey Lum, and can be found in the tutorials directory of this repository."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "// Reused with minor modifications."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * sets up initial window when the user enters the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String greeting \u003d UiText.greeting();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(greeting, dukeImage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (duke.isExit()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition((Duration.seconds(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            //Platform.exit();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 73,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public AddDeadlineCommand(String[] msg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Check is the user input format correct."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * If is correct then create a Deadline task and write into the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param list  TaskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui    UiText"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage   Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException wrong format or wrong input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert super.command.length \u003e 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] msgs \u003d super.command[1].split(\"/by\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //check is the description correct."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (msgs.length \u003d\u003d 2 \u0026\u0026 !msgs[1].equals(\" \") \u0026\u0026 !msgs[0].equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            Task task \u003d new Deadline(msgs[0], msgs[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            list.addToList(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return UiText.addedMsg(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!!! The format of the description of a deadline is wrong\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 40
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public AddEventCommand(String[] msg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Check is the user input format correct."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * If is correct then create a event task and write into the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param list  TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui    UiText"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage   Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException wrong format or wrong input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert super.command.length \u003e 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] msgs \u003d super.command[1].split(\"/at\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (msgs.length \u003d\u003d 2 \u0026\u0026 !msgs[1].equals(\" \") \u0026\u0026 !msgs[0].equals(\"\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            Task task \u003d new Event(msgs[0], msgs[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            list.addToList(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return UiText.addedMsg(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!! The format of the description of a deadline is wrong.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 38
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public AddTodoCommand(String[] msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Check is the user input format correct."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * If is correct then create a Todo task and write into the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param list  TaskList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui    UiText"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage   Storage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException empty description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length !\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert super.command.length \u003d\u003d 2 \u0026\u0026 !super.command[1].trim().equals(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Task task \u003d new Todo(super.command[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        list.addToList(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return UiText.addedMsg(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected String[] command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected Command(String[] msg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.command \u003d msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return \"Invalid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (String s : command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            sb.append(s);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return  sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public DeleteCommand(String[] msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Check is the user input format correct."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * If is correct delete the task from taskList and the storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param tasks  TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui    UiText"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage   Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException invalid input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList tasks, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"\\u1F65 OOPS!! The format of the input is wrong\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert super.command.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            int index \u003d Integer.parseInt(super.command[1].trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (index \u003e tasks.getList().size()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                throw new DukeException(\" OOPS! the Number you\\\u0027ve key in is to big\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } else if (index \u003c 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                throw new DukeException(\"OOPS!! The number should be larger than 0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                assert index \u003e 0 \u0026\u0026 index \u003c\u003d tasks.getList().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Task tk \u003d tasks.deleteFromList(index - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.deleteMsg(tk);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS! Invalid number as input\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public DoneCommand(String[] msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Check is the user input format correct."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * If is correct then mark the task as done and update the taskList and the storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param tasks  TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui    UiText"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage   Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException invalid input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList tasks, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!! The format of the input is wrong\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert super.command.length \u003d\u003d 2 : \"command wrong format\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            int index \u003d Integer.parseInt(super.command[1].trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (index \u003e tasks.getList().size()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                throw new DukeException(\"OOPS! the Number you\\\u0027ve key in is to big\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } else if (index \u003c 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                throw new DukeException(\"OOPS!! The number should be larger than 0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                assert index \u003e 0 \u0026\u0026 index \u003c\u003d tasks.getList().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Task tk \u003d tasks.getList().get(index - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                if (tk.getStatusBit() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    throw new DukeException(\"The task was already completed!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                assert tk.getStatusBit() \u003d\u003d 0 : \"the task was already completed!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                tk.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                //marked msg"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.markedMsg(tk);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS! Invalid number as input\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 49
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ExitCommand(String[] msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.isExit \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            storage.updateFile(list.getList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return UiText.leavingMsg();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            //error msg"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return UiText.unableToWriteFileError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 24
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public FindCommand(String[] msg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length !\u003d 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!! The format of the input is wrong\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (Task task : list.getList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String searchedWord \u003d super.command[1].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (description.contains(searchedWord)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!! There is no match to your searching\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return UiText.findMsg(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 35
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public HelpCommand(String[] msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Check if the argument is correct. If is correct then execute throws a DukeException."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param list task list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui UiText"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length \u003e 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!! I\\\u0027m sorry, but I don\\\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //only help keyword. display a content of commands"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return UiText.helpFullContent();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            assert super.command.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String[] keyword \u003d super.command[1].trim().split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (keyword.length \u003e1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                throw new DukeException(\"OOPS!! I\\\u0027m sorry, but \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        + super.command[1] + \" is not a valid keyword. You may key in help for list of commands\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            assert keyword.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "             return UiText.helpForKeyword(keyword[0].trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 41
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * When user key in none of the command key word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param list TaskList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui UiText"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException invalid input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        throw new DukeException(\"OOPS!! I\\\u0027m sorry, but I don\\\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ListCommand(String[] msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Check is the user input format correct."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * If is correct then list all the task in the taskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param list  TaskList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param ui    UiText"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param storage   Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException invalid input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String execute(TaskList list, UiText ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (super.command.length !\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"OOPS!! I\\\u0027m sorry, but I don\\\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return UiText.listingMsg(list.getList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 29
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public DukeException(String message)  {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 8
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Parse the user input to valid command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * parse the user input to valid command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert input.trim().length() \u003e 0 : input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String[] msg \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (msg[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new ExitCommand(msg);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new ListCommand(msg);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new DoneCommand(msg);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new AddTodoCommand(msg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new AddDeadlineCommand(msg);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new AddEventCommand(msg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new DeleteCommand(msg);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new FindCommand(msg);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (msg[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new HelpCommand(msg);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 41
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.ui.UiText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Loading task from the file and save task to the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author Yang Shuting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static final String DEFAULT_PATH \u003d \"src\" + UiText.fileSeparator + \"main\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            UiText.fileSeparator + \"data\" + UiText.fileSeparator + \"duke.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructor to construct a Storage with given file path."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param filePath givenFile path to retrive anf storage the tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        File tempFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (tempFile.exists()){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.file \u003d tempFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (!dir.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    dir.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                } catch (SecurityException se) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    //do something"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            assert (dir.exists());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            file \u003d new File(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Print what\u0027s the content in the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws FileNotFoundException throw exception if the file does not exist"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String fileContents() throws FileNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return UiText.itemsFromFile(sc);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * convert the task in the file to arraylist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return ArrayList of Task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        try (BufferedReader br \u003d new BufferedReader(new FileReader(file)))  {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String currentLine;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            while ((currentLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                String[] input \u003d currentLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                arr.add(new Task(input));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * write new task to the existing fille without overwritting the content of the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param text task to converted to String to append to the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws IOException file not found"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void appendToFile(String text) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        fw.write(text);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Update the file when is a delete or done command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param tasks updated arraylist of Task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws IOException file not found"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void updateFile(ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String input \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            switch (task.getTaskType()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                input \u003d String.format(\"T | %d | %s\\n\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getStatusBit(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getDescription());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                input \u003d String.format(\"D | %d | %s | %s\\n\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getStatusBit(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getDescription(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getInformation());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                input \u003d String.format(\"E | %d | %s | %s\\n\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getStatusBit(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getDescription(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        task.getInformation());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                input \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            writer.write(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 123
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Deadline task that is with tag D and tasktype of E with description of the task and due time of the task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author Yang Shuting"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * construct a deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param description what is the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param by time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(description.trim());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.tag \u003d \"[D]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.information \u003d \"(by: \" + by.trim() + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.date \u003d new Date(by.trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 26
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Event task that is with tag E and tasktype of Event with"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * description of the task and time which the event will held."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author Yang Shuting"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * constructor to create an event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param description  description of the content"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param at the date and time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(description.trim());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.information \u003d \"(at: \" + at.trim() + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.date \u003d new Date(at.trim());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 26
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Class of task that divided into Deadline, Todo and Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author   Yang Shuting"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see      Deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see      Event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see      Todo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected  String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected String tag \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected String information \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected static int noOfTask \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Construct a task based on given description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param description String with valid information"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        noOfTask++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Construct Task from a string array that consist the type of fill and all the information."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param input task from the storage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Task(String[] input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String type \u003d input[0].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.description \u003d input[2].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.tag \u003d \"[T]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.description \u003d input[2].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.information \u003d input[3].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.tag \u003d \"[D]\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.description \u003d input[2].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.information \u003d input[3].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.tag \u003d \"[E]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.isDone \u003d getStatusFromBit(input[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        noOfTask++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public int getStatusBit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return isDone ? 1 : 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public boolean getStatusFromBit(String bit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return bit.equals(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static int getNoOfTask() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return noOfTask;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static void reduceByOne() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        noOfTask--;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String getInformation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return information;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return tag + \"[\" + getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                    + description + information;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 100
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    TODO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 7
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Todo task that is with tag T and tasktype of todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author Yang Shuting"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Deadline"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @see Event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * constructs a Todo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param description detail of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super(description.trim());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.tag \u003d \"[T]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        super.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 20
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.dukeexception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * A taskList storage an ArrayList of task of the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author Yang Shuting"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Construct a TaskList from existing list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param tasks  ArrayList of Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @throws DukeException thrown when the arrayList is empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            throw new DukeException(\"Empty\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert !tasks.isEmpty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert this.tasks.equals(tasks) \u0026\u0026 this.tasks !\u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * duplicate an return a copy of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return a copy of the list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        ArrayList\u003cTask\u003e copy \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert copy.equals(tasks) \u0026\u0026 copy !\u003d tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void addToList(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * deletes a task from the task list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param index the sequence number of the task in the list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return the task that has been deleted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public Task deleteFromList(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert index \u003c tasks.size() : index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Task tk \u003d tasks.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        //removed msg"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        Task.reduceByOne();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return tk;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/UiText.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * This class deals with the interaction with the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * Handle input and put put"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " * @author Yang Shuting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class UiText {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Default constructor with standard I/O."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public UiText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Constructor that allows to choose the InputStream and PrintStream."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param in InputStream of the choice."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param out PrintStream of the choice."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public UiText(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Read the input from the chosen input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return  A line of string from the input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Prints the string by chosen PrintStream."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param msg String that to be display."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void printlnMsg(String msg) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert msg.trim().length() \u003e 0 : msg;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        out.println(msg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Standard welcome message that will displayed when the user start the Chatbot."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String greeting() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String msg \u003d \"Hello! I\\\u0027m Duke\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Divider between each action of the command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String showLine() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"________________________________________________\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void echo(String msg) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        out.println(msg);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Leaving message when the user input the leaving command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String leavingMsg() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String loadingError() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Cannot load the file\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Message when a command has executed successfully."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param task Task object that is added to the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String addedMsg(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \"Got it. I\\\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        + task + \"\\nNow you have %s tasks in the list\", Task.getNoOfTask());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Message when a task has successfully marked done."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param task Task object that marked done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String markedMsg(Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert task.getStatusBit() \u003d\u003d 1 : task;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        + \"  \" + task);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Message when a task is deleted from the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param task Task object that was deleted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String deleteMsg(Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \"Noted. I\\\u0027ve removed this task: \\n  \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                        + task + \"\\nNow you have %d tasks in the list.\", Task.getNoOfTask());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * Message when there a item on the list matched what user searched."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param tasks list of item match the searched word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return Message of list of items"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String findMsg(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert tasks.size() \u003e 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String title \u003d \"Here are the matching tasks in your list\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        output.append(title);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String result \u003d ++count + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            output.append(result);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * list of items stored."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param tasks list of items on in the storage"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return Message of items in the list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String listingMsg(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        if (tasks.size() \u003c 1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            return \"You do not have any task in your list\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assert tasks.size() \u003e 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        output.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String prefix \u003d \"\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            Task tk \u003d tasks.get(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (isFirst) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                result \u003d (i + 1) + \".\" + tk;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                isFirst \u003d false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }  else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                result \u003d prefix + (i + 1) + \".\" + tk;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            output.append(result);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * reads the items in the storage."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param sc scanner that scan the storage file"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return content in the storage file"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String itemsFromFile(Scanner sc) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            if (isFirst) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                output +\u003d sc.nextLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                isFirst \u003d false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                output +\u003d \"\\n\" + sc.nextLine();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String unableToWriteFileError() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Unable to write the file\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * display a list of content of the commands and their formate."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return a whole list of all the commands"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpFullContent() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"Here is the list of commands \\n\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\t-deadline\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-delete\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-done\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-event\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-exit\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-find\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-list\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-todo\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n\\t-time format\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        content.append(\"\\n Enter \\\"help \u003ccommand\u003e\\\" for detail\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return content.toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * display a help for a specific command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @param keyword command"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     * @return helping message for that command"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForKeyword(String keyword) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForDeadline();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForTodo();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForEvent();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForDelete();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForDone();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForExit();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForFind();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            case \"time\":"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return UiText.helpForTimeFormat();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                return \"Please key in a valid keyword\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForDeadline() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\ndeadline \u003ctask descrip\u003e /by \u003cdate and time\u003e\" +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \" \\n\\t- An deadline task of the given time will be \\n\\t  added to the task list\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForEvent() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\nevent \u003ctask descrip\u003e /at \u003cdate and time\u003e\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                + \"\\n\\t- An event task with the given time will be \\n\\t  added to the task list.\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForTodo() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\ntodo \u003ctask descrip\u003e \\n\\t- A todo task will be added to the task \\n\\t   list.\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForDelete() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\ndelete \u003cnumber\u003e \\n\\t- The task that associated with the number \\n\\t   on the list will be deleted.\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForDone() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\ndone \u003cnumber\u003e \\n\\t- The task that associated with the number on the\\n\\t  list will be mark as done.\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForExit() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\nbye \\n- You will exit the application.\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForFind() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\nfind \u003ckeyword\u003e \\n\\t- Task that contain the keyword will be \\n\\t   shown as a list.\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Format: \\nlist \\n\\t- list of task will be displayed.\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String helpForTimeFormat() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return \"Follow one of the following formats: \\n \u003cdd/mmm/yyyy xx:xx\u003e\" +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \"\\n \u003cdd/mm/yyyy\u003e\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public static String fileSeparator \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 280
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\"  maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "   \u003ceffect\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003cGlow level\u003d\"0.2\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "   \u003c/effect\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "      \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.effect.SepiaTone?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"pane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Input you command here.....\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003ccursor\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cCursor fx:constant\u003d\"NONE\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003c/cursor\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cSepiaTone level\u003d\"0.59\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003c/effect\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" mouseTransparent\u003d\"true\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#371797\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003cSepiaTone /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "         \u003c/effect\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 38
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Event event \u003d new Event(\"Meeting\", \"19/9/2019\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void eventGetDescriptionTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(\"Meeting\", event.getDescription());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void eventGetInformationTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(\"(at: 19/9/2019)\", event.getInformation());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void eventGetStatusBitTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(0, event.getStatusBit());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 24
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String exit \u003d \"bye\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String list \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String done \u003d \"done 2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String todo \u003d \"todo read book\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String deadline \u003d \"deadline project /by 5/9/2019 5:00pm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String event \u003d \"event meeting /at 12/9/2019 16:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String delete \u003d \"delete 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String find \u003d \"find book\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    String invalid \u003d \"kjhsfhdf  \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    private String[] split(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        return input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void parseTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new ExitCommand(split(exit)).toString(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(exit).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new ListCommand(split(list)).toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(list).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new DoneCommand(split(done)).toString(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(done).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new AddTodoCommand(split(todo)).toString(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(todo).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new AddDeadlineCommand(split(deadline)).toString(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(deadline).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new AddEventCommand(split(event)).toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(event).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new DeleteCommand(split(delete)).toString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(delete).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new FindCommand(split(find)).toString(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(find).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(new InvalidCommand().toString(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "                Parser.parse(invalid).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 53
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void todoGetInformationTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(\"\", todo.getInformation());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    public void todoGetDescriptionTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "        assertEquals(\"read book\", todo.getDescription());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 18
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "![DaDuke](../src/main/resources/images/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShuTingY"
        },
        "content": "![DaUser](../src/main/resources/images/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ShuTingY": 2,
      "-": 241
    }
  }
]
