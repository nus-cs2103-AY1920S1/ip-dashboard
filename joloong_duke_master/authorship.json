[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "[![Build Status](https://travis-ci.org/joloong/duke.svg?branch\u003dmaster)](https://travis-ci.org/joloong/duke)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "- JDK 11"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "- Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "- Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "   - Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "   - If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "   - Click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "| Duke Increment    | Tutorial                                                                                                                                                                                        |"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "| `A-Gradle`        | [Gradle Tutorial](tutorials/gradleTutorial.md)                                                                                                                                                  |"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "| `A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)                                                                                                                                  |"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "| `Level-10`        | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4] |"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "[fx1]: tutorials/javaFxTutorialPart1.md"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "[fx2]: tutorials/javaFxTutorialPart2.md"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "[fx3]: tutorials/javaFxTutorialPart3.md"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "[fx4]: tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "- If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "- We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "joloong": 19,
      "-": 22
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author joloong-reused"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "//Reused from https://github.com/Oscar-B-Liang/duke/pull/6/files with no modifications."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "test {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        events \u003d [\"passed\", \"failed\", \"skipped\"]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 47,
      "-": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "# Duke - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "1. [**Introduction**](#1-introduction)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "2. [**Quick Start**](#2-quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "3. [**Features**](#3-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.1. [Listing all tasks: `list`](#31-listing-all-tasks-list)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "   "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.2. [Adding a todo: `todo`](#32-adding-a-todo-todo)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "   "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.3. [Adding an event: `event`](#33-adding-an-event-event)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.4. [Adding a deadline: `deadline`](#34-adding-a-deadline-deadline)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.5. [Finding a task: `find`](#35-finding-a-task-find)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.6. [Marking a task as done: `done`](#36-marking-a-task-as-done-done)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "   "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.7. [Deleting a task: `delete`](#37-deleting-a-task-delete)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "   3.8. [Exiting the program: `bye`](#38-exiting-the-program-bye)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "4. [**Command Summary**](#4-command-summary)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "5. [**Credits**](#5-credits)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "Duke is a desktop app to **track your tasks** such as to-dos, events and deadlines. **Prefer to use the Command Line Interface** (CLI) with **Graphical User Interface** (GUI)? Duke is the one for you."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "1. Ensure that you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "2. Download the latest `duke.jar` [here](https://github.com/joloong/duke/releases/tag/A-Release)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "3. Double-click the file to start the app."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "4. Play around with it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.1. Listing all tasks: `list`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "Shows a list of all tasks in Duke."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.2. Adding a todo: `todo`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "Adds a todo task to Duke."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `todo TODO... /p PRIORITY`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `todo sleep /p 1`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `todo code /p 3`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.3. Adding an event: `event`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "Adds an event to Duke."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `event EVENT... /at DD/MM/YYYY HHMM-HHMM /p PRIORITY`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `event CS2105 MidTerm /at 7/10/2019 1400-1600 /p 1`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `event NOC chat /at 12/9/2019 1300-1400 /p 2`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.4. Adding a deadline: `deadline`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "Adds a deadline to Duke."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `deadline DEADLINE... /by DD/MM/YYYY HHMM /p PRIORITY`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `deadline CS2103T iP /by 17/9/2019 2359 /p 1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `deadline GEQ1000 quiz /by 20/9/2019 2359 /p 2`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.5. Finding a task: `find`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "Finds a task in Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `find DESCRIPTION...`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `find quiz`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `find NOC chat`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.6. Marking a task as done: `done`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "Marks a tasks in Duke as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `done 1`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `done 27`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.7. Deleting a task: `delete`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "Deletes a task in Duke."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `delete 1`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "* `delete 72`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "### 3.8. Exiting the program: `bye`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Todo**: `todo TODO... /p PRIORITY`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Event**: `event EVENT... /at DD/MM/YYYY HHMM-HHMM /p PRIORITY`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Deadline**: `deadline DEADLINE... /by DD/MM/YYYY HHMM /p PRIORITY`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Find**: `find DESCRIPTION...`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Done**: `done INDEX`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Delete**: `delete INDEX`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **List**: `list`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "* **Exit**: `bye`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "## 5. Credits"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "[AB3 User Guide](https://github.com/se-edu/addressbook-level3/blob/master/docs/UserGuide.adoc)"
      }
    ],
    "authorContributionMap": {
      "joloong": 115,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": " * box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Circle background \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        displayPicture.setClip(background);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * right."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Creates the dialog box of Duke."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param text Reply message of Duke."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param img  Profile picture of Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return Dialog box of Duke."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 72
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.parser \u003d new Parser(this.storage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param args arguments passed into main"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            storage.readData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Ui.printException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Ui.startOfInteractions();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Ui.readUserInput();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Ui.endOfInteractions();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "            storage.writeData();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Ui.printException(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Parser.parse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected String startOfShow() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "            storage.readData();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Ui.startOfInteractions();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Ui.printException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 62,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "            stage.setTitle(\"Kimetsu no Yaiba\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().startOfShow();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 33
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Tanjiro.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Nezuko.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Duke\u0027s reply and then appends them to the dialog container. Clears the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected void startOfShow() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.startOfShow(), dukeImage));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 55
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The AddCommand class defines the behaviour of an add command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final String textInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public AddCommand(String textInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.textInput \u003d textInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (textInput.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (isInvalidCommand(textInput, \"todo\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new DukeException(\"Gomennasai! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String removedTodo \u003d textInput.replaceFirst(\"todo \", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String[] splitRemovedTodo \u003d removedTodo.split(\" /p \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String description \u003d splitRemovedTodo[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "            int priority \u003d Integer.parseInt(splitRemovedTodo[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return TaskList.addTask(new Todo(description, priority));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (textInput.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (isInvalidCommand(textInput, \"deadline\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new DukeException(\"Gomennasai! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String removeTaskWord \u003d textInput.replaceFirst(\"deadline \", \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String[] taskSplit \u003d removeTaskWord.split(\" /by \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String[] findPriority \u003d taskSplit[1].split(\" /p \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "            int priority \u003d Integer.parseInt(findPriority[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return TaskList.addTask(new Deadline(taskSplit[0], findPriority[0], priority));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (textInput.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (isInvalidCommand(textInput, \"event\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new DukeException(\"Gomennasai! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String removeTaskWord \u003d textInput.replaceFirst(\"event \", \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String[] taskSplit \u003d removeTaskWord.split(\" /at \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String[] findPriority \u003d taskSplit[1].split(\" /p \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            int priority \u003d Integer.parseInt(findPriority[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return TaskList.addTask(new Event(taskSplit[0], findPriority[0], priority));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DukeException(\"Gomennasai! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 55
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Command abstract class defines the behaviour of commands that extends it."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public abstract String execute();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected boolean isInvalidCommand(String textInput, String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assert command !\u003d null : \"Command is null\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return textInput.equals(command) || textInput.equals(command + \" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected boolean isInvalidIndex(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assert (Integer) index !\u003d null : \"Index is null\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return index \u003c 0 || index \u003e\u003d TaskList.getCounter();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The DeleteCommand class defines the behaviour of a delete command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final String textInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public DeleteCommand(String textInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.textInput \u003d textInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (isInvalidCommand(textInput, \"delete\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DukeException(\"Gomennasai! Index required.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int deletedIndex \u003d Integer.parseInt(textInput.replaceFirst(\"delete \", \"\")) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (isInvalidIndex(deletedIndex)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DukeException(\"Gomennasai! Index not found.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return TaskList.deleteTask(deletedIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The DoneCommand class defines the behaviour of a done command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final String textInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public DoneCommand(String textInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.textInput \u003d textInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (isInvalidCommand(textInput, \"done\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DukeException(\"Gomennasai! Index required.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int doneIndex \u003d Integer.parseInt(textInput.replaceFirst(\"done \", \"\")) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (isInvalidIndex(doneIndex)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DukeException(\"Gomennasai! Index not found.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return TaskList.doneTask(doneIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The ExitCommand class defines the behaviour of an exit command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Closes the GUI after 1000 milliseconds."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final long delay \u003d 1000L;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        timer.schedule((new TimerTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }), delay);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Ui.endOfInteractions();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 37
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The FindCommand class defines the behaviour of a find command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final String textInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public FindCommand(String textInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.textInput \u003d textInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (isInvalidCommand(textInput, \"find\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "            throw new DukeException(\"Gomennasai! Keyword required!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String keyWord \u003d textInput.replaceFirst(\"find \", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return TaskList.findTask(keyWord);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The ListCommand class defines the behaviour of a list command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Ui.printList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 15
    }
  },
  {
    "path": "src/main/java/duke/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "T:1:Slay demons:1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "E:0:Kill Muzan:6/8/2019 1400-1630:2"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "D:1:Recover:2/12/2019:3"
      }
    ],
    "authorContributionMap": {
      "joloong": 3
    }
  },
  {
    "path": "src/main/java/duke/priority/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.priority;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Priority enumeration defines the behaviour of a priority."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "    HIGH(1), MEDIUM(2), LOW(3);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private int priorityLevel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Priority(int priorityLevel) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.priorityLevel \u003d priorityLevel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public int getPriorityLevel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this.priorityLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \"(PRIORITY: \" + this.name() + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 25
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Deadline class defines the requirement of a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected final SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Use this constructor when reading input from user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param by          Date of deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Deadline(String description, String by, int priority) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.date \u003d formatDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Use this constructor when reading input from data file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param by          Date of deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param isDone      If deadline is completed/over."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Deadline(String description, String by, int isDone, int priority) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.date \u003d formatDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Date formatDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String[] bySplit \u003d by.split(\"/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String day \u003d bySplit[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String month \u003d bySplit[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String year \u003d bySplit[2];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (day.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            day \u003d \"0\" + day;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (month.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            month \u003d \"0\" + month;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String dateString \u003d day + \"-\" + month + \"-\" + year;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "            date \u003d format.parse(dateString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + format.format(date) + \") \" + super.priority;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 74
    }
  },
  {
    "path": "src/main/java/duke/task/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The DukeException class defines the behaviour of a DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DukeException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 17
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Event class defines the requirement of an event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected String endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected final SimpleDateFormat startFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Use this constructor when reading input from user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param at          Date of deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Event(String description, String at, int priority) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.date \u003d formatDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Use this constructor when reading input from data file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param at          Date of deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param isDone      If deadline is completed/over."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Event(String description, String at, int isDone, int priority) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.date \u003d formatDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private Date formatDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String[] atSplit \u003d at.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String atSplitDate \u003d atSplit[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String atSplitTime \u003d atSplit[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String[] dateSplit \u003d atSplitDate.split(\"/\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String day \u003d dateSplit[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String month \u003d dateSplit[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        final String year \u003d dateSplit[2];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (day.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "            day \u003d \"0\" + day;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (month.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "            month \u003d \"0\" + month;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String[] timeSplit \u003d atSplitTime.split(\"-\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String startTime \u003d timeSplit[0];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String endTime \u003d timeSplit[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String startTimeHour \u003d startTime.substring(0, 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String startTimeMinute \u003d startTime.substring(2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String endTimeHour \u003d endTime.substring(0, 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String endTimeMinute \u003d endTime.substring(2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.endTime \u003d endTimeHour + \":\" + endTimeMinute;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Date startDate \u003d new Date();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String dateString \u003d day + \"-\" + month + \"-\" + year;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String timeString \u003d startTimeHour + \":\" + startTimeMinute;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "            startDate \u003d startFormat.parse(dateString + \" \" + timeString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + startFormat.format(date) + \" - \" + this.endTime + \") \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "                + super.priority;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 92
    }
  },
  {
    "path": "src/main/java/duke/task/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Parser class defines the behaviour of a parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Parser(Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Parser.storage \u003d storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Parse the inputs from the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param textInput Inputs from the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return Formatted string of the input after parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String parse(String textInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Command command \u003d parseCommands(textInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (command.isExit()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "                storage.writeData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return command.execute();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Ui.printException(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Ui.printException(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static Command parseCommands(String textInput) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (textInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Command listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return listCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (textInput.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Command doneCommand \u003d new DoneCommand(textInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return doneCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (textInput.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Command deleteCommand \u003d new DeleteCommand(textInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return deleteCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (textInput.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Command findCommand \u003d new FindCommand(textInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return findCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else if (textInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Command exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return exitCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return parseTasks(textInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static Command parseTasks(String textInput) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Command addCommand \u003d new AddCommand(textInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return addCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Storage class defines the behaviour of a storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static final String FILE_PATH \u003d \"src/main/java/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.file \u003d createFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private File createFile() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        File file \u003d new File(Storage.FILE_PATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "            file \u003d new File(\"duke.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "                throw new RuntimeException(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Reads data from data file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return New TaskList that contains an ArrayList of tasks and number of tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws FileNotFoundException Occurs when path of file is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public TaskList readData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assert this.file !\u003d null : \"File is null\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Scanner sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ArrayList\u003cTask\u003e task \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String taskLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String[] taskLineSplit \u003d taskLine.split(\":\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "            String description \u003d taskLineSplit[2];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "            int isDone \u003d Integer.parseInt(taskLineSplit[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "            switch (taskLineSplit[0]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "                int priorityTodo \u003d Integer.parseInt(taskLineSplit[3]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "                task.add(new Todo(description, isDone, priorityTodo));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String at \u003d taskLineSplit[3];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "                int priorityEvent \u003d Integer.parseInt(taskLineSplit[4]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "                task.add(new Event(description, at, isDone, priorityEvent));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "                String by \u003d taskLineSplit[3];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "                int priorityDeadline \u003d Integer.parseInt(taskLineSplit[4]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "                task.add(new Deadline(description, by, isDone, priorityDeadline));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Close the scanner"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return new TaskList(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Writes data from taskList into data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @throws IOException Occurs when path of file is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void writeData() throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ArrayList\u003cTask\u003e task \u003d TaskList.getTasks();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assert fw !\u003d null : \"FileWriter is null\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String stringToWrite \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int counter \u003d task.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (int i \u003d 0; i \u003c counter; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "            Task taskToWrite \u003d task.get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "            int priority \u003d taskToWrite.getPriority().getPriorityLevel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (taskToWrite instanceof Todo) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d \"T:\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d writeStatus(taskToWrite);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d taskToWrite.getDescription();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d \":\" + priority;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "            } else if (taskToWrite instanceof Event) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d \"E:\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d writeStatus(taskToWrite);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d taskToWrite.getDescription() + \":\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "                Event e \u003d (Event) taskToWrite;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d e.getTime();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d \":\" + priority;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "            } else if (taskToWrite instanceof Deadline) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d \"D:\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d writeStatus(taskToWrite);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d taskToWrite.getDescription() + \":\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "                Deadline d \u003d (Deadline) taskToWrite;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d d.getTime();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d \":\" + priority;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (i !\u003d counter - 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": "                stringToWrite +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "        fw.write(stringToWrite);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private String writeStatus(Task t) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String statusIcon \u003d t.getStatusIcon();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (statusIcon.equals(\"O\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return \"1:\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return \"0:\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 133
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.priority.Priority;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Task class defines the requirement of a Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Constructor for Task. More commonly used."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param description Description of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param priority    Priority level of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Task(String description, int priority) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.priority \u003d whichPriority(priority);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Another constructor for Task. Used mainly in Storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param description Description of Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param isDone      1 if the Task is done, else 0."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param priority    Priority level of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Task(String description, int isDone, int priority) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.isDone \u003d isDone \u003d\u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.priority \u003d whichPriority(priority);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return isDone ? \"O\" : \"X\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Converts priority from Integer to Priority."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param priority Priority in Integer object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return Priority with correct priority level."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Priority whichPriority(int priority) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 80
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The TaskList class defines the behaviour of a task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    private static ArrayList\u003cTask\u003e task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TaskList.task \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        TaskList.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Adds task into the current list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param t Task to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of added task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String addTask(Task t) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "        task.add(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Ui.printAddedTask(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Deletes task into the current list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param index Index of task to be deleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of deleted task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String deleteTask(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Task deletedTask \u003d task.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Ui.printDeleteTask(deletedTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Marks the task that is in the list as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param index Index of task to be marked as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of task marked as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String doneTask(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Task markAsDoneTask \u003d task.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        markAsDoneTask.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Ui.printDoneTask(markAsDoneTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Finds tasks with keyWord in the description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param keyWord Keyword to be found."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of found tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String findTask(String keyWord) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": "        List\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (Task t : TaskList.task) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "            if (t.getDescription().contains(keyWord)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "                foundTasks.add(t);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return Ui.printFoundTask(foundTasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return TaskList.task;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static int getCounter() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return TaskList.task.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 80
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Todo class defines the requirement of a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Todo(String description, int priority) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public Todo(String description, int isDone, int priority) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        super(description, isDone, priority);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \"[T]\" + super.toString() + \" \" + super.priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": " * The Ui class defines the behaviour of a user interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": " * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": " * @author Joel Loong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String startOfInteractions() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \"Konnichiwa!\\n\" + \"Watashi wa Nezuko-chan!\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Reads input from the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static void readUserInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String textInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "            textInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "            textInput \u003d \"bye\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Parser.parse(textInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "        // Close the scanner"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String endOfInteractions() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return \"Sayonara. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Prints the list of all tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of the list of all tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String printList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joloong"
        },
        "content": "        ArrayList\u003cTask\u003e task \u003d TaskList.getTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int counter \u003d TaskList.getCounter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return \"There is no task yet.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String isPlural \u003d counter \u003d\u003d 1 ? \"is\" : \"are\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String taskIfPlural \u003d counter \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d \"Hai! Here \" + isPlural + \" the \" + taskIfPlural + \" in your list:\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d counter; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joloong"
        },
        "content": "            output +\u003d \"\" + i + \".\" + task.get(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Prints the task that was marked as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param task Task marked as done."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of the task marked as done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String printDoneTask(Task task) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d \"Hai! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d task + \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Prints the task that was last added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param t Last added task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of added task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String printAddedTask(Task t) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d \"Hai! I\u0027ve added this task:\\n\" + t + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int counter \u003d TaskList.getCounter();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String taskIfPlural \u003d counter \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d \"Now you have \" + counter + \" \" + taskIfPlural + \" in the list.\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Prints the task that was last deleted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param task Last deleted task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of deleted task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String printDeleteTask(Task task) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int counter \u003d TaskList.getCounter();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String taskIfPlural \u003d counter \u003c\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d \"Hai! I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d task + \"\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d \"Now you have \" + counter + \" \" + taskIfPlural + \" in the list.\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Prints the tasks that were found."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param foundTasks Tasks that were found."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @return The string format of found tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String printFoundTask(List\u003cTask\u003e foundTasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joloong"
        },
        "content": "        int counter \u003d foundTasks.size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joloong"
        },
        "content": "        if (counter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joloong"
        },
        "content": "            return \"Gomennasai! No task description matches your keyword.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String isPlural \u003d counter \u003d\u003d 1 ? \"is\" : \"are\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joloong"
        },
        "content": "        String taskIfPlural \u003d counter \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joloong"
        },
        "content": "        output +\u003d \"Hai! Here \" + isPlural + \" the matching \" + taskIfPlural + \" in your list:\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joloong"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d counter; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joloong"
        },
        "content": "            output +\u003d \"\" + i + \".\" + foundTasks.get(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joloong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joloong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * Prints the customized DukeException message or general exception message."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joloong"
        },
        "content": "     * @param e Exception to be printed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joloong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public static String printException(Exception e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joloong"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 140
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"600.0\" type\u003d\"javafx.scene.layout.HBox\" "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "   xmlns\u003d\"http://javafx.com/javafx/8.0.171\" "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "   xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cScrollPane prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "                  \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" alignment\u003d\"CENTER\" layoutX\u003d\"25.0\" layoutY\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "                        \u003cFont name\u003d\"Trebuchet MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joloong"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joloong"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joloong"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joloong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joloong"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joloong"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joloong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joloong"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joloong"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 42
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"900.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"524.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "               \u003cFont name\u003d\"Trebuchet MS\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"524.0\" layoutY\u003d\"858.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"857.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"852.0\" prefWidth\u003d\"588.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joloong"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joloong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joloong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "joloong": 24
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void toDo_eat_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Todo todo \u003d new Todo(\"eat\", 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(\"[T][X] eat (PRIORITY: HIGH)\", todo.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "    public void deadLine_cs2103tIp_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"CS2103T iP\", \"6/9/2019\", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": "        assertEquals(\"[D][X] CS2103T iP (by: Fri Sep 06 00:00:00 SGT 2019) (PRIORITY: MEDIUM)\", deadline.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joloong": 21
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "Hello I\u0027m Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "[T][X] sleep"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": "Now you have 1 task in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "[T][X] eat"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "1.[T][X] sleep"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "2.[T][X] eat"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "joloong": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": "todo eat"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "joloong": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joloong"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joloong"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joloong"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joloong"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joloong"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joloong"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joloong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java ..\\src\\main\\java\\Task.java ..\\src\\main\\java\\Event.java ..\\src\\main\\java\\Deadline.java ..\\src\\main\\java\\Todo.java ..\\src\\main\\java\\DukeException.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joloong"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joloong"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joloong"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joloong"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joloong"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joloong"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joloong"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joloong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joloong"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joloong"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "joloong": 21
    }
  }
]
