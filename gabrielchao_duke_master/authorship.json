[
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.Bye;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "abstract public class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String[] args;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return (this instanceof Bye);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    abstract public String getName();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    abstract public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 18
    }
  },
  {
    "path": "src/main/java/duke/CommandMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CommandMap{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    Map\u003cString, Class\u003c? extends Command\u003e\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(Command command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commands.put(command.getName(), command.getClass());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Class\u003c? extends Command\u003e get(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return commands.get(name);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private PreParser preParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        preParser \u003d new PreParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            taskList \u003d storage.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch(IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        while(!isExit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                Command command \u003d preParser.parse(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch(DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                ui.oops(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            storage.write(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch(IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.oops(\"Couldn\u0027t save tasks to disk.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 42,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 7
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Duke duke \u003d new Duke(\"./data/tasks.txt\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 8
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e requiredSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e optionalSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(String name, boolean required) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(required) requiredSwitches.add(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        else optionalSwitches.add(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Map\u003cString, String[]\u003e parse(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e requiredSwitchesRemaining \u003d new TreeSet\u003c\u003e(requiredSwitches);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e optionalSwitchesRemaining \u003d new TreeSet\u003c\u003e(optionalSwitches);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int switchStartIndex \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(int i \u003d 1; i \u003c args.length; i++) { // command name is an implied switch"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            boolean isSwitch \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(requiredSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if(!requiredSwitchesRemaining.remove(args[i])) throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            else if(optionalSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if(!optionalSwitchesRemaining.remove(args[i])) throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(isSwitch) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    // This allows for switches with no arguments"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex + 1, i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                } catch (IllegalArgumentException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Bad arguments for switch \" + args[switchStartIndex]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                switchStartIndex \u003d i;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Add last switch"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex+1, args.length));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(!requiredSwitchesRemaining.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            for(String s : requiredSwitchesRemaining) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(s);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(requiredSwitchesRemaining.size() \u003d\u003d 1 ? \"is a required switch\" : \"are required switches\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(sb.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return switchArgs;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return concatenate(strings, 0, strings.length);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings, int fromIndex, int toIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(int i \u003d fromIndex; i \u003c toIndex; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(strings[i]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if(i !\u003d toIndex-1) sb.append(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static LocalDate parseDate(String input) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ISO_DATE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofPattern(\"dd/MM/YYYY\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofPattern(\"d/M/YYYY\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(DateTimeFormatter formatter : formatters) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                date \u003d LocalDate.parse(input, formatter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch(DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(date \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse input as date\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static LocalDateTime parseDateTime(String input) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cDateTimeFormatter\u003e formatters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ISO_DATE_TIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .appendPattern(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .toFormatter());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        formatters.add(new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .appendPattern(\"d/M/yyyy HHmm\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .toFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(DateTimeFormatter formatter : formatters) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                dateTime \u003d LocalDateTime.parse(input, formatter);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch(DateTimeParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse input as date\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String parseDateOrDateTimeToString(String input) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String parsedString \u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            parsedString \u003d parseDate(input).format(DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM yyyy\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch(DukeException e1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                parsedString \u003d parseDateTime(input).format(DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM yyyy, h:mma\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch(DukeException e2) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(parsedString \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse String as Date or DateTime\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return parsedString;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 135
    }
  },
  {
    "path": "src/main/java/duke/PreParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class PreParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private CommandMap commandMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public PreParser() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] dummyArgs \u003d new String[0];"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap \u003d new CommandMap();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.command.Bye(dummyArgs));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.command.List(dummyArgs));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.command.Done(dummyArgs));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.command.Todo(dummyArgs));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.command.Deadline(dummyArgs));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.command.Event(dummyArgs));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap.register(new duke.command.Delete(dummyArgs));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] args \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Class\u003c? extends Command\u003e cls \u003d commandMap.get(args[0]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Command command \u003d cls.getConstructor(String[].class).newInstance(new Object[]{args});"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch(Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 26
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.path \u003d Paths.get(filepath).toAbsolutePath().normalize();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList load() throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(!Files.exists(path)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(path.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList taskList \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ois.close();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void write(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(path.getParent() !\u003d null) Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(path.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oos.writeObject(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oos.close();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 29
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "abstract public class Task implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task(String d) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        description \u003d d;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        done \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public char getStatusChar() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return done ? \u0027✓\u0027 : \u0027✗\u0027;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(done) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Task is already done!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    abstract public String toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 25
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone(int oneIndex) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.get(oneIndex-1).markDone();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task delete(int oneIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.remove(oneIndex-1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task get(int oneIndex) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.get(oneIndex-1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            s \u003d s + String.format(\"%d. %s\\n\", (i+1), tasks.get(i).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 36
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private InputStream in;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private PrintStream out;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Ui(InputStream inputStream, PrintStream printStream) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.in \u003d inputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.out \u003d printStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void say(String text) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(text);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(\" ____________________________________________________________\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void oops(String text) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"☹ OOPS!!! \" + text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oops(\"Couldn\u0027t load tasks from disk.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 36
    }
  },
  {
    "path": "src/main/java/duke/command/Bye.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Bye extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Bye(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 17
    }
  },
  {
    "path": "src/main/java/duke/command/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Deadline extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Deadline(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        parser.register(\"/by\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] byArgs \u003d switchArgs.get(\"/by\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(byArgs.length \u003d\u003d 0) throw new DukeException(\"The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.task.Deadline d \u003d new duke.task.Deadline(Parser.concatenate(comArgs), Parser.concatenate(byArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(d);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"added: \" + d);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 31
    }
  },
  {
    "path": "src/main/java/duke/command/Delete.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Delete extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Delete(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be deleted must be an integer.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            task \u003d tasks.delete(oneIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(String.format(\"Noted. I\u0027ve removed this task:\\n\\t%s\\nNow you have %d task%s in the list.\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                task.toString(), tasks.size(), tasks.size() \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 39
    }
  },
  {
    "path": "src/main/java/duke/command/Done.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Done extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Done(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be marked must be an integer.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            tasks.markDone(oneIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        catch(IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(oneIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 37
    }
  },
  {
    "path": "src/main/java/duke/command/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Event extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Event(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        parser.register(\"/at\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] atArgs \u003d switchArgs.get(\"/at\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(atArgs.length \u003d\u003d 0) throw new DukeException(\"The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.task.Event e \u003d new duke.task.Event(Parser.concatenate(comArgs), Parser.concatenate(atArgs));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"added: \" + e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 31
    }
  },
  {
    "path": "src/main/java/duke/command/List.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class List extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public List(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.say(tasks.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ui.say(\"No tasks yet.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 22
    }
  },
  {
    "path": "src/main/java/duke/command/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Todo extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Todo(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d parser.parse(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if(comArgs.length \u003d\u003d 0) throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke.task.Todo t \u003d new duke.task.Todo(Parser.concatenate(comArgs));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ui.say(\"added: \" + t);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Deadline(String desc, String date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d Parser.parseDateOrDateTimeToString(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch(DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[D][%c] %s (by: %s)\", getStatusChar(), description, date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Event(String desc, String date) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d Parser.parseDateOrDateTimeToString(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch(DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[E][%c] %s (at: %s)\", getStatusChar(), description, date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Todo(String d) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[T][%c] %s\", getStatusChar(), getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 14
    }
  }
]
