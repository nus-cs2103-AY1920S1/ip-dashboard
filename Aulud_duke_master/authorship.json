[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        exceptionFormat \u003d \u0027full\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    mainClassName \u003d \"duke.DukeLauncher\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 31,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Window;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DUKE_LOGO \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DUKE_INTRODUCTION \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Image dukePic \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaMyth.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Image userPic \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Storage fileMgr;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Window window;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private boolean isRunning;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Application UI elements"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private AnchorPane mainLayout;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDuke\u003c/code\u003e application instance, an interactive task manager, with the default filepath."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDuke\u003c/code\u003e application instance, an interactive task manager, with a given file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param filePath \u003ccode\u003eString\u003c/code\u003e containing the relative file path of the file to persist application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *                  data to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.isRunning \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.window \u003d new Window();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.fileMgr \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.window.print(\"Error creating file to write application data. Exiting!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Attempt to re-construct TaskList from data in file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            tasks \u003d fileMgr.readTaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.window.print(String.format(\"%s\\n\\nInitialised with empty TaskList\", e.toString()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Initiates the Duke application instance, allowing users to input commands to interact with the task maanger."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Show Duke\u0027s logo and welcome message"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.window.showWelcome(Duke.DUKE_LOGO, Duke.DUKE_INTRODUCTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        while (this.isRunning \u0026\u0026 this.window.hasCommand()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String command \u003d this.window.readCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Parse the command to return a Command object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                this.window.print(c.execute(tasks, fileMgr));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                this.isRunning \u003d !c.willTerminate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                this.window.print(e.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Driver main method."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param args an array of \u003ccode\u003eString\u003c/code\u003e arguments."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DUKE APPLICATON WITH GRAPHICAL USER INTERFACE \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Parses and executes a command input by a user through the GUI, returning the String output of the command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String handleCommand(String command) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Parse the command to return a Command object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.isRunning \u003d !c.willTerminate();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return c.execute(this.tasks, this.fileMgr);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Return the full error message"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Instantiates and arranges the application window with message box, scroll pane, input area and send button"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private void instantiateWindow() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Scrollable containerFor displaying dialog between user and Duke"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.scrollPane \u003d new ScrollPane(this.dialogContainer);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // For users to enter and send commands"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.userInput \u003d new TextField();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Construct Node that allows child Nodes to be anchored to edges of the application window"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Then set this Node as the root Node of the Scene"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.mainLayout \u003d new AnchorPane(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Applies styling to each of the elements in the application window"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private void applyWindowStyling() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Style image nodes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // this.duke.setClip(new Circle(25.0, 25.0, 25.0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // this.user.setClip(new Circle(25.0, 25.0, 25.0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Set title and application window size"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.stage.setResizable(false);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.stage.setWidth(400.0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.stage.setHeight(600.0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Set settings of scrollpane and dialog container"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        scrollPane.setVvalue(0.5);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Anchor child nodes to application window"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Attaches event handlers to interactive elements"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private void attachEventHandlers() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.dialogContainer.heightProperty().addListener((observable) -\u003e this.scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.handleUserInput();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        });"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.handleUserInput();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        });"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Creates two \u003ccode\u003eLabel\u003c/code\u003e elements (one for the user command and the other for Duke\u0027s response), then"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  attaches both to the dialog container."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String command \u003d this.userInput.getText();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.userInput.clear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Label userText \u003d new Label(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Label dukeText \u003d new Label(this.handleCommand(command));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(this.userPic)),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(this.dukePic))"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If a command has set Duke to terminate, schedule the application window to close in 1s"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (!this.isRunning) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            new Timer().schedule("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                        Platform.exit();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                        System.exit(0);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                },"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                500"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            );"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Invoked on applications startup - shows Duke\u0027s welcome message"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private void showIntroduction() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Label dukeWelcome \u003d new Label(Duke.DUKE_INTRODUCTION);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            DialogBox.getDukeDialog(dukeWelcome, new ImageView(this.dukePic))"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Instantiates the Duke application window."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Instantiate application window elements"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.instantiateWindow();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Style application window elements"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.applyWindowStyling();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Attach event handlers for interactive elements"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.attachEventHandlers();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.stage.setScene(this.scene);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.stage.show();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.showIntroduction();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 252,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 12
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eByeCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"bye\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean willTerminate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 28
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected Command(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if an error occured during execution of this command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public abstract String execute(TaskList tasks, Storage fileMgr) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns the raw command string associated with this \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return the \u003ccode\u003eString\u003c/code\u003e that generated this \u003ccode\u003eCommand\u003c/code\u003e object when parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns \u003ccode\u003etrue\u003c/code\u003e if executing this command terminates the associated \u003ccode\u003eDuke\u003c/code\u003e task maanger."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return \u003ccode\u003etrue\u003c/code\u003e if executing this command terminates the associated \u003ccode\u003eDuke\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean willTerminate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 38
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeWriteToFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Date byDeadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDeadlineCommand\u003c/code\u003e object with a given description and deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param command raw command string that generated this \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param description \u003ccode\u003eString\u003c/code\u003e description of the \u003ccode\u003eDeadlineTask\u003c/code\u003e to be created."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param byDeadline date of the \u003ccode\u003eDeadlineTask\u003c/code\u003e to be created, as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DeadlineCommand(String command, String description, Date byDeadline) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.byDeadline \u003d byDeadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if an I/O error occured when writing the updated TaskList to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d new DeadlineTask(this.description, this.byDeadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in DeadlineCommand\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeWriteToFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDeleteCommand\u003c/code\u003e object with the ID of a task to be removed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param command raw command string that generated this \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param id \u003ccode\u003eint\u003c/code\u003e ID of the task to be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DeleteCommand(String command, int id) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if the command references an invalid \u003ccode\u003eTask\u003c/code\u003e or a file I/O error occured."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against invalid (non-existent) task IDs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (this.id \u003c 1 || this.id \u003e tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidTaskException(this.id, this.getCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d tasks.deleteTask(id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in DeleteCommand\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeInvalidTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeWriteToFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDoneCommand\u003c/code\u003e object with the ID of a task to be marked as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param command raw command string that generated this \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param id \u003ccode\u003eint\u003c/code\u003e ID of the task to be marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DoneCommand(String command, int id) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if the command references an invalid \u003ccode\u003eTask\u003c/code\u003e or a file I/O error occured."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against invalid (non-existent) task IDs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (this.id \u003c 1 || this.id \u003e tasks.numberOfTasks()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidTaskException(this.id, this.getCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d tasks.getTask(id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        task.complete();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in DoneCommand\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\", task.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 48
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeWriteToFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Date atTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs an \u003ccode\u003eEventCommand\u003c/code\u003e object with a given description and event timestamp."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param command raw command string that generated this \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param description \u003ccode\u003eString\u003c/code\u003e description of the \u003ccode\u003eEventTask\u003c/code\u003e to be created."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param atTime timestamp of the \u003ccode\u003eEventTask\u003c/code\u003e to be created, as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public EventCommand(String command, String description, Date atTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if an I/O error occured when writing the updated TaskList to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d new EventTask(this.description, this.atTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in EventCommand\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 48
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String searchString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eFindCommand\u003c/code\u003e object with a given search string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param command raw command string that generated this \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param searchString \u003ccode\u003eString\u003c/code\u003e to search for in descriptions of \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public FindCommand(String command, String searchString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d tasks.searchTask(this.searchString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numResults \u003d results.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        list.append(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        for (int i \u003d 0; i \u003c numResults; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            list.append(String.format(\"\\n%d. \", i + 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            list.append(results.get(i).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 41
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eListCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"list\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 23
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeWriteToFileException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eTodoCommand\u003c/code\u003e object with a given description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param command raw command string that generated this \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param description \u003ccode\u003eString\u003c/code\u003e description of the \u003ccode\u003eTodoTask\u003c/code\u003e to be created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TodoCommand(String command, String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Executes this command with the supplied \u003ccode\u003eTaskList\u003c/code\u003e and \u003ccode\u003eStorage\u003c/code\u003e objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks associated \u003ccode\u003eTaskList\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param fileMgr associated \u003ccode\u003eStorage\u003c/code\u003e object to execute the command with."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e containing the output of executing this command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if an I/O error occured when writing the updated TaskList to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String execute(TaskList tasks, Storage fileMgr) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task \u003d new TodoTask(this.description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            fileMgr.writeTaskList(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeWriteToFileException(\"writeTaskList method invocation in TodoCommand\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, task.toString(), tasks.numberOfTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 44
    }
  },
  {
    "path": "src/main/java/duke/component/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeIncorrectArgumentsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeNoCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Command templates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DONE_TEMPLATE \u003d \"done \u003cid\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DELETE_TEMPLATE \u003d \"delete \u003cid\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String FIND_TEMPLATE \u003d \"find \u003csearch_string\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String TODO_TEMPLATE \u003d \"todo \u003cdescription\u003e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DEADLINE_TEMPLATE \u003d \"deadline \u003cdescription\u003e /by \u003cdate time\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String EVENT_TEMPLATE \u003d \"event \u003cdescription\u003e /by \u003cdate time\u003e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Date parser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_PARSER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Parses the given input command \u003ccode\u003eString\u003c/code\u003e and returns the corresponding \u003ccode\u003eCommand\u003c/code\u003e if valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param command the input user command as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return an executable \u003ccode\u003eCommand\u003c/code\u003e representing the instruction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if an error occurred when attempting to parse the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Parse trivial commands here"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Catch empty commands (ENTER key pressed with no other input)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeNoCommandException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Determine the type of command from the first token"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (command.split(\" \")[0]) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"list\": outputs all tasks in the TaskList in a formatted manner"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"done\" sets the status of the task with a given task ID (its position) to completed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDone(command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"delete\" removes a given task by its task ID from the TaskList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDelete(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"find\" returns all tasks whose description contains the search string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseFind(command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"todo\": creates a Todo task (no attached date/time)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseTodo(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"deadline\": creates a Deadline task (to be completed by a specified date/time)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseDeadline(command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // \"event\": creates a Event task (no attached date/time)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return Parser.parseEvent(command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against all unknown commands"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeUnknownCommandException(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static Command parseDone(String command) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against too few (e.g. done) or too many (e.g. done 5 example) arguments"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DONE_TEMPLATE, tokens.length - 1, command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // GUARD: against non-integer task IDs (attempt to parse the id of the task as an int)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            int id \u003d Integer.valueOf(tokens[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new DoneCommand(command, id);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"id\", \"int\", command);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static Command parseDelete(String command) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d command.split(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against too few (e.g. done) or too many (e.g. done 5 example) arguments"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DELETE_TEMPLATE, tokens.length - 1, command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // GUARD: against non-integer task IDs (attempt to parse the id of the task as an int)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            int id \u003d Integer.valueOf(tokens[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new DeleteCommand(command, id);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"id\", \"int\", command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static Command parseFind(String command) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty search string"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027find\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, FIND_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Otherwise entire argString is the search string of the Find command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String argString \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new FindCommand(command, argString);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static Command parseTodo(String command) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty todo description"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027todo\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, TODO_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Otherwise entire argString is the description of the Todo task"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String argString \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new TodoCommand(command, argString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static Command parseDeadline(String command) throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty deadline description"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027deadline\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, DEADLINE_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] args \u003d command.split(\" \", 2)[1].split(\" /by \");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against incorrect number of arguments or missing \u0027 /by \u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // args should contain two arguments: description, byDeadline"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (args.length !\u003d 2) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(2, DEADLINE_TEMPLATE, args.length, command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Attempt to parse the date to construct the Deadline"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            Date eventTime \u003d Parser.DATE_PARSER.parse(args[1]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new DeadlineCommand(command, args[0], eventTime);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"date | time\", \"Date\", command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static Command parseEvent(String command) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against empty event description"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // If the \u0027event\u0027 command is input with no arguments, trim() removes the trailing spaces"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(1, EVENT_TEMPLATE, 0, command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] args \u003d command.split(\" \", 2)[1].split(\" /at \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // GUARD: against incorrect number of arguments or missing \u0027 /at \u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // args should contain two arguments: description, atTime"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (args.length !\u003d 2) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeIncorrectArgumentsException(2, EVENT_TEMPLATE, args.length, command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Attempt to parse the date to construct the Event"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            Date eventTime \u003d Parser.DATE_PARSER.parse(args[1]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return new EventCommand(command, args[0], eventTime);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeInvalidArgumentException(\"date | time\", \"Date\", command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 183
    }
  },
  {
    "path": "src/main/java/duke/component/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.exception.DukeInvalidEncodedTaskException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_PARSER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Scanner fileReader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eStorage\u003c/code\u003e object that handles I/O (read-writes) of a \u003ccode\u003eTaskList\u003c/code\u003e to a file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param filePath \u003ccode\u003eString\u003c/code\u003e containing the relative file path of the file to read/write to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws IOException if an error occurred during a filesystem or file I/O operation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Storage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // No file matching this path: first construct any missing folders in the file path"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Then create the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // File exists: bind a Scanner to read input directly from the file when needed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.fileReader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static Task parseEncodedTask(String encodedString) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Escape the pipe character as it is a metacharacter in regex"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] tokens \u003d encodedString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        switch (tokens[0]) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (tokens.length !\u003d 3) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(3, \"TodoTask\", tokens.length, encodedString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task \u003d new TodoTask(tokens[2]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"DeadlineTask\", tokens.length, encodedString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                Date eventTime \u003d Storage.DATE_PARSER.parse(tokens[3]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                task \u003d new DeadlineTask(tokens[2], eventTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"DeadlineTask\", 4, encodedString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (tokens.length !\u003d 4) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"EventTask\", tokens.length, encodedString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                Date eventTime \u003d Storage.DATE_PARSER.parse(tokens[3]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                task \u003d new EventTask(tokens[2], eventTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                throw new DukeInvalidEncodedTaskException(4, \"EventTask\", 4, encodedString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            throw new DukeException(\"Encoded string corresponds to an unrecognised task type\", encodedString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.complete();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Reads from a file containing \u003ccode\u003eTaskList\u003c/code\u003e data, returning a new \u003ccode\u003eTaskList\u003c/code\u003e object if"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  successful."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a new \u003ccode\u003eTaskList\u003c/code\u003e object with the parsed data from the file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws DukeException if an error occurred when reading from the file or data was unable to be parsed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TaskList readTaskList() throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        while (fileReader.hasNextLine()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            tasks.addTask(Storage.parseEncodedTask(fileReader.nextLine()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Writes to a file all data of a given \u003ccode\u003eTaskList\u003c/code\u003e object in an encoded format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e object whose data should be persisted to a file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @throws IOException if an error occurred when writing to the file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void writeTaskList(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numTasks \u003d tasks.numberOfTasks();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d numTasks; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            bw.write(tasks.getTask(i).toEncodedString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            bw.write(\"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Flush and close the buffered writer"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String desc \u003d \"This Storage instance reads and writes TaskList data from the file with path:\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"%s\\n%s\", desc, this.filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 123
    }
  },
  {
    "path": "src/main/java/duke/component/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eTaskList\u003c/code\u003e object that stores \u003ccode\u003eTask\u003c/code\u003e objects in an ordered list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Retrieves a \u003ccode\u003eTask\u003c/code\u003e with a given task ID from this \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param id \u003ccode\u003eint\u003c/code\u003e ID of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return the \u003ccode\u003eTask\u003c/code\u003e with the given ID."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task getTask(int id) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.get(id - 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Inserts a \u003ccode\u003eTask\u003c/code\u003e as the next entry in this \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param task the \u003ccode\u003eTask\u003c/code\u003e to be inserted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Removes a \u003ccode\u003eTask\u003c/code\u003e with a given task ID from this \u003ccode\u003eTaskList\u003c/code\u003e and returns it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param id \u003ccode\u003eint\u003c/code\u003e ID of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return the \u003ccode\u003eTask\u003c/code\u003e that was removed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task deleteTask(int id) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.remove(id - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns all \u003ccode\u003eTask\u003c/code\u003e objects whose descriptions contain a search string in an \u003ccode\u003eArrayList\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param searchString \u003ccode\u003eString\u003c/code\u003e to search \u003ccode\u003eTask\u003c/code\u003e descriptions with."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return an \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eTask\u003c/code\u003e objects which match the search string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public ArrayList\u003cTask\u003e searchTask(String searchString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            if (task.getDescription().contains(searchString)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                results.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns the number of tasks in this \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return an \u003ccode\u003eint\u003c/code\u003e number of tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public int numberOfTasks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Retrieve the length of the task list and the number of digits of the maximum task ID"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int length \u003d this.numberOfTasks();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return \"Your task list is empty!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Build format string to print all task IDs with the same width, left-padded with spaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            long numDigits \u003d Math.round(Math.log10(length) + 0.5);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String formatTemplate \u003d \"%1$\" + numDigits + \"s\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                result.append(String.format(formatTemplate, i + 1))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                      .append(String.format(\". %s\\n\", this.tasks.get(i).toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            // Trim trailing newline"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            result.setLength(result.length() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 91
    }
  },
  {
    "path": "src/main/java/duke/component/Window.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class Window {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DIVIDER_PROTOTYPE \u003d \"____________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final String DIVIDER_BAR \u003d String.format("
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        \"    %s%s\\n\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Window.DIVIDER_PROTOTYPE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Window.DIVIDER_PROTOTYPE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    );"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Creates a \u003ccode\u003eUi\u003c/code\u003e object that handles user interactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Window() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Displays the welcome message for the \u003ccode\u003eDuke\u003c/code\u003e application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void showWelcome(String logo, String introduction) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.print(introduction);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns a \u003ccode\u003eboolean\u003c/code\u003e signifying if there is input to be read."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return \u003ccode\u003etrue\u003c/code\u003e if there is user input to be read from \u003ccode\u003eSystem.in\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.sc.hasNext();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns a \u003ccode\u003eString\u003c/code\u003e containing the next line of input read from \u003ccode\u003eSystem.in\u003c/code\u003e."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return the input \u003ccode\u003eString\u003c/code\u003e read from \u003ccode\u003eSystem.in\u003c/code\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.sc.nextLine().trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Pretty-prints a given message string to the standard output stream, adding indentation and horizontal lines"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  to the message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param message a \u003ccode\u003eString\u003c/code\u003e to embellish then print to \u003ccode\u003eSystem.out\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        result.append(Window.DIVIDER_BAR)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "              .append(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Retrieves each individual line in the message and pads them with spaces to the left"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String[] lines \u003d message.split(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        for (String line: lines) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            result.append(\"     \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                  .append(line)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                  .append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        result.append(Window.DIVIDER_BAR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        System.out.println(result.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 69
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    // Stores the command whose parsing led to the exception being thrown"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String errorSource;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a generic \u003ccode\u003eDukeException\u003c/code\u003e object with an error message and the error source."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param message \u003ccode\u003eString\u003c/code\u003e message to be displayed to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param errorSource \u003ccode\u003eString\u003c/code\u003e containing information of the error source; typically a user command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeException(String message, String errorSource) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.errorSource \u003d errorSource;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[DukeException]\\n%s\\n  \u003e %s\", this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeIncorrectArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeIncorrectArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String commandFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDukeIncorrectArgumentsException\u003c/code\u003e that contains information about a user command that"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  failed to be parsed due to an incorrect number of arguments."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param numCommandArgs \u003ccode\u003eint\u003c/code\u003e number of arguments expected."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param commandFormat \u003ccode\u003eString\u003c/code\u003e detailing the expected format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param numArgs \u003ccode\u003eint\u003c/code\u003e number of arguments in the parsed user command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param errorSource raw user command \u003ccode\u003eString\u003c/code\u003e that failed to be parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeIncorrectArgumentsException("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numCommandArgs, String commandFormat, int numArgs, String errorSource) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Expected %d argument(s) for command \u0027%s\u0027, but got %d\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                numCommandArgs, errorSource.split(\" \", 2)[0], numArgs),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.commandFormat \u003d commandFormat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeIncorrectArgumentsException]\\n%s\\n  | %s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.commandFormat, this.errorSource); "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 30
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDukeInvalidArgumentException\u003c/code\u003e that contains information about a user command that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  failed to be parsed due to the incorrect type of a supplied argument."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param argName the name of the argument as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param argType expected type of the argument as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param errorSource raw user command \u003ccode\u003eString\u003c/code\u003e that failed to be parsed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidArgumentException(String argName, String argType, String errorSource) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Argument \u0027%s\u0027 of command \u0027%s\u0027 is not of type %s\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                argName, errorSource.split(\" \", 2)[0], argType),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidArgumentException]\\n%s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 25
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidEncodedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidEncodedTaskException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDukeInvalidEncodedTaskException\u003c/code\u003e that contains information about an encoded task that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  failed to be parsed due to an incorrect number of tokens."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param numTaskArgs \u003ccode\u003eint\u003c/code\u003e number of tokens expected."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param taskType type of the encoded \u003ccode\u003eTask\u003c/code\u003e as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param numArgs \u003ccode\u003eint\u003c/code\u003e number of arguments in the parsed encoded \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param errorSource encoded \u003ccode\u003eTask\u003c/code\u003e string that failed to be parsed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidEncodedTaskException("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        int numTaskArgs, String taskType, int numArgs, String errorSource) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Expected %d tokens for encoded task of type \u0027%s\u0027, but got %d\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "                numTaskArgs, taskType, numArgs),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidEncodedTaskException]\\n%s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 27
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeInvalidTaskException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDukeInvalidTaskException\u003c/code\u003e that contains information about a \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  referencing an invalid or non-existent task by its ID."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param id invalid \u003ccode\u003eint\u003c/code\u003e task ID referenced."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param errorSource raw user command \u003ccode\u003eString\u003c/code\u003e corresponding to the \u003ccode\u003eCommand\u003c/code\u003e that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *                     failed execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeInvalidTaskException(int id, String errorSource) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"No task exists with ID %d\", id),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeInvalidTaskException]\\n%s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeNoCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeNoCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeNoCommandException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"No command issued\", \"\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeNoCommandException]\\n%s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage()); "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDukeUnknownCommandException\u003c/code\u003e that contains information about a user command that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  failed to be parsed to a known \u003ccode\u003eCommand\u003c/code\u003e type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param errorSource raw user command \u003ccode\u003eString\u003c/code\u003e that failed to be parsed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeUnknownCommandException(String errorSource) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Build the error message from the supplied error command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"Unknown command type \u0027%s\u0027\", errorSource.split(\" \", 2)[0]),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            errorSource"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeUnknownCommandException]\\n%s\\n  \u003e %s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage(), this.errorSource); "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 23
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeWriteToFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DukeWriteToFileException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DukeWriteToFileException(String errorSource) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(\"Failed to write updated TaskList to file\", errorSource);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String template \u003d \"[DukeWriteToFileException]\\n%s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(template, this.getMessage()); "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 14
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_WRITER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected Date byDeadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDeadlineTask\u003c/code\u003e object with a given description and deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param description \u003ccode\u003eString\u003c/code\u003e description of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param byDeadline deadline of this \u003ccode\u003eDeadlineTask\u003c/code\u003e, as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public DeadlineTask(String description, Date byDeadline) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.byDeadline \u003d byDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns the deadline of this \u003ccode\u003eDeadlineTask\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return deadline of this \u003ccode\u003eDeadlineTask\u003c/code\u003e, as a \u003ccode\u003eDate\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Date getDeadline() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.byDeadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  {@inheritDoc}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \"D | %d | %s | %s\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.isComplete ? 1 : 0,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            DATE_WRITER.format(this.byDeadline)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task and its deadline to the base toString() representation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), DATE_FORMATTER.format(this.byDeadline));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 47
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_WRITER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private static final SimpleDateFormat DATE_FORMATTER \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected Date atTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs an \u003ccode\u003eEventTask\u003c/code\u003e object with a given description and event timestamp."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param description \u003ccode\u003eString\u003c/code\u003e description of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param atTime timestamp of this \u003ccode\u003eEventTask\u003c/code\u003e, as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public EventTask(String description, Date atTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.atTime \u003d atTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns the timestamp of this \u003ccode\u003eEventTask\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return timestamp of this \u003ccode\u003eEventTask\u003c/code\u003e, as a \u003ccode\u003eDate\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.atTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  {@inheritDoc}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \"E | %d | %s | %s\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.isComplete ? 1 : 0,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            this.description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            DATE_WRITER.format(this.atTime)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task and its time period to the base toString() representation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), DATE_FORMATTER.format(this.atTime));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 47
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns the description of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return the description of this \u003ccode\u003eTask\u003c/code\u003e, as a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns the completion status of this \u003ccode\u003eTask\u003c/code\u003e, as a status icon."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return the single-character \u003ccode\u003eString\u003c/code\u003e containing the status icon."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Does not return the UTF-16 character for a tick or cross respectively"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Java SDK 11 incorrectly encodes Unicode characters on Windows returning ? for all of them"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this.isComplete ? \"V\" : \"X\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Marks this \u003ccode\u003eTask\u003c/code\u003e as complete."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns all information about this \u003ccode\u003eTask\u003c/code\u003e encoded in a \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @return a \u003ccode\u003eString\u003c/code\u003e to be written to a file to persist information of this \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public abstract String toEncodedString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 47
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eTodoTask\u003c/code\u003e object with a given description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param description \u003ccode\u003eString\u003c/code\u003e description of this \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  {@inheritDoc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toEncodedString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"T | %d | %s\", this.isComplete ? 1 : 0, this.description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Adds the type of the Task to the base toString() representation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 24
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Constructs a \u003ccode\u003eDialogBox\u003c/code\u003e element to render a display picture to the right of a \u003ccode\u003eLabel\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  text container."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param label \u003ccode\u003eLabel\u003c/code\u003e element containing text to render alongside picture."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  @param image \u003ccode\u003eImageView\u003c/code\u003e \u003ccode\u003eNode\u003c/code\u003e containing an image to render."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private DialogBox(Label label, ImageView image) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.text \u003d label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.displayPicture \u003d image;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.text.setWrapText(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.text.setStyle(\"-fx-aligment: center-left;\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.text.setPadding(new Insets(5, 10, 5, 10));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.text.setMinHeight(75.0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.displayPicture.setFitWidth(75.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.displayPicture.setFitHeight(75.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Flips layout of elements of this \u003ccode\u003eDialogBox\u003c/code\u003e such that the image appears to the left of the text."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    private DialogBox setLeft() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns a \u003ccode\u003eDialogBox\u003c/code\u003e element for displaying user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static DialogBox getUserDialog(Label text, ImageView image) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     *  Returns a \u003ccode\u003eDialogBox\u003c/code\u003e element for displaying output from the \u003ccode\u003eDuke\u003c/code\u003e instance."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Aulud"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public static DialogBox getDukeDialog(Label text, ImageView image) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        return new DialogBox(text, image).setLeft();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 62
    }
  },
  {
    "path": "src/test/java/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @DisplayName(\"Encoded string of DeadlineTask is correct\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void testToEncodedString() throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Test setup"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String dateString \u003d \"12/12/2012 1212\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        SimpleDateFormat dateParser \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Date date \u003d dateParser.parse(dateString);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        DeadlineTask task \u003d new DeadlineTask(\"Finish duking it out\", date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        task.complete();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"D | 1 | Finish duking it out | %s\", dateString),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.toEncodedString()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @DisplayName(\"String representation of DeadlineTask is correct\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void testToString() throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Test setup"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String dateString \u003d \"01/02/0304 0506\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        SimpleDateFormat dateParser \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Date date \u003d dateParser.parse(dateString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String formattedDate \u003d dateFormatter.format(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        DeadlineTask task \u003d new DeadlineTask(\"S/U this module\", date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"[D][X] S/U this module (by: %s)\", formattedDate),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.toString()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 45
    }
  },
  {
    "path": "src/test/java/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class EventTaskTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @DisplayName(\"Encoded string of EventTask is correct\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void testToEncodedString() throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Test setup"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String dateString \u003d \"09/08/0706 0504\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        SimpleDateFormat dateParser \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Date date \u003d dateParser.parse(dateString);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        EventTask task \u003d new EventTask(\"Make useless PRs\", date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"E | 0 | Make useless PRs | %s\", dateString),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.toEncodedString()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @DisplayName(\"String representation of EventTask is correct\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void testToString() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Test setup"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String dateString \u003d \"31/12/2019 2359\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        SimpleDateFormat dateParser \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"EEE, dd MMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        Date date \u003d dateParser.parse(dateString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        String formattedDate \u003d dateFormatter.format(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        EventTask task \u003d new EventTask(\"Receive Happy New Year text messages\", date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        task.complete();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            String.format(\"[E][V] Receive Happy New Year text messages (at: %s)\", formattedDate),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.toString()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 45
    }
  },
  {
    "path": "src/test/java/TodoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Aulud"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Aulud"
        },
        "content": "public class TodoTaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @DisplayName(\"Encoded string of TodoTask is correct\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void testToEncodedString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Test setup"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"Go eat a banana\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        task.complete();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \"T | 1 | Go eat a banana\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.toEncodedString()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Aulud"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    @DisplayName(\"String representation of TodoTask is correct\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        // Test setup"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        TodoTask task \u003d new TodoTask(\"Go fly a kite\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        task.complete();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            \"[T][V] Go fly a kite\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Aulud"
        },
        "content": "            task.toString()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Aulud"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Aulud"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Aulud"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Aulud": 34
    }
  }
]
