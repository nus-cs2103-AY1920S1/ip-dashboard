[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 22,
      "Jeffry Lum": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static final String EXPECTED_FORMAT_MESSAGE \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            \"The expected format is [dd/mm/yyyy hhmm], where \\\"hhmm\\\" is in 24-hrs\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Private constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Constructs a dateTime object with the specified dateTime string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param dateTime"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @throws IllegalDateException if dateTime is not in the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private DateTime(String dateTime) throws IllegalDateException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] separated \u003d dateTime.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (separated.length !\u003d 2 || !isValidDate(separated[0]) || !isValidTime(separated[1]))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                throw new IllegalDateException(\"Invalid date format. \" + EXPECTED_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d dateTime.split(\"[/|\\\\s]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.day \u003d Integer.parseInt(el[0]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.month \u003d Integer.parseInt(el[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.year \u003d Integer.parseInt(el[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.hours \u003d Integer.parseInt(el[3].substring(0, 2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            this.minutes \u003d Integer.parseInt(el[3].substring(2, 4));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            throw new IllegalDateException(\"Invalid date format. \" + EXPECTED_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Factory Method. Use this to construct this object. Returns a DateTime object with the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * specified DateTime string. The expected format is:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * \"dd/mm/yyyy hhmm\" where hhmm is in 24hr time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param dateTime String in format [dd/mm/yyyy hhmm]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return a new DateTime object with the specified dateTime"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @throws IllegalDateException if dateTime is not in the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static DateTime of(String dateTime) throws IllegalDateException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return new DateTime(dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Allowed formats:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     d/m/yyyy"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     dd/m/yyyy"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     d/mm/yyyy"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     dd/mm/yyyy"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Expected input format: \"dd/mm/yyyy\"."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static boolean isValidDate(String ddmmyyyy) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            String[] el \u003d ddmmyyyy.split(\"[/]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            if (el.length !\u003d 3 || el[0].length() \u003e 2 || el[1].length() \u003e 2 || el[2].length() !\u003d 4) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int dd \u003d Integer.parseInt(el[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int mm \u003d Integer.parseInt(el[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int yyyy \u003d Integer.parseInt(el[2]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int[] days \u003d {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            if (!(1 \u003c\u003d mm \u0026\u0026 mm \u003c\u003d 12 \u0026\u0026 1 \u003c\u003d dd \u0026\u0026 dd \u003c\u003d days[mm - 1])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (!isLeapYear(yyyy) \u0026\u0026 mm \u003d\u003d 2 \u0026\u0026 dd \u003d\u003d 29) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Allowed formats:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     *     hhmm"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * with regard to standard time rules (between 0000 and 2359)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Expected input format: \"hhmm\"."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static boolean isValidTime(String hhmm) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (hhmm.length() !\u003d 4) return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int hour \u003d Integer.parseInt(hhmm.substring(0, 2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            int minute \u003d Integer.parseInt(hhmm.substring(2, 4));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            if (0 \u003c\u003d hour \u0026\u0026 hour \u003c\u003d 23 \u0026\u0026 0 \u003c\u003d minute \u0026\u0026 minute \u003c\u003d 59) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Determines if the given year is a leap year."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return ((year % 4 \u003d\u003d 0) \u0026\u0026 (year % 100 !\u003d 0)) || (year % 400 \u003d\u003d 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this dateTime object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * The output format is \"dd/mm/yyyy hh:mm\"."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"%02d/%02d/%d %02d:%02d\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "                day, month, year, hours, minutes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 21,
      "ryanYtan": 93
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Private constructor."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Constructs an DeadlineTask with the specified description and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param by the time at which the event is due"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private DeadlineTask(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Factory method. Use this to construct this object. Returns an DeadlineTask object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * with the specified description and time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param by the time at which the event is due"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return a new DeadlineTask object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static DeadlineTask of(String description, String by) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            String dateTime \u003d DateTime.of(by).toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return new DeadlineTask(description, dateTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } catch (IllegalDateException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return new DeadlineTask(description, by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 23,
      "ryanYtan": 9
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 35,
      "-": 4
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Private constructor."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Constructs an EventTask with the specified description and time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param at the time at which the event occurs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private EventTask(String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Factory method. Use this to construct this object. Returns an EventTask object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * with the specified description and time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param at the time at which the event occurs"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return a new EventTask object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static EventTask of(String description, String at) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            String dateTime \u003d DateTime.of(at).toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return new EventTask(description, dateTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } catch (IllegalDateException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return new EventTask(description, at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 24,
      "ryanYtan": 8
    }
  },
  {
    "path": "src/main/java/IllegalDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class IllegalDateException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public IllegalDateException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 5
    }
  },
  {
    "path": "src/main/java/IllegalInstructionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class IllegalInstructionException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public IllegalInstructionException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 5
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static void parse(String input) throws IllegalInstructionException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String[] strings \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String command \u003d strings[0];"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                throw new IllegalInstructionException(\"Sorry! I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 25
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Description of the task."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Boolean variable to check if the task is done, or not done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Type of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Constructs a task with the given description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @param description of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Helper method: returns ✓ or ✘ (tick or cross) depending on the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * truth condition of isDone."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * Returns the string representation of this Task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        return String.format(\"[%s][%s] %s\", type, getStatusIcon(), description);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 18,
      "ryanYtan": 37
    }
  },
  {
    "path": "src/main/java/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static Task createTask(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return new TodoTask(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static Task createTaskWithDate(String description, String dateTime)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throws IllegalInstructionException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (dateTime.contains(\"/by\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return DeadlineTask.of(description, dateTime);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } else if (dateTime.contains(\"/at\")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return EventTask.of(description, dateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IllegalInstructionException(\"Invalid syntax. Please consult the user guide.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 17
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * The list of Tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * The default max capacity, although this is not enforced."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static final int MAX_ITEMS \u003d 100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        list \u003d new ArrayList\u003cTask\u003e(MAX_ITEMS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns the number of elements in this list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return the number of elements in this list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Appends the specified task to the end of this list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param t task to be appended to this list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public boolean add(Task t) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Marks the task at the specified index in the list as done. The specified index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * assumes a one-based list (i.e first element of the list is of index 1)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param index the index of the element to be marked as done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void done(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        Objects.checkIndex(index - 1, list.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        list.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns the task at the specified index in the list. The specified index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * assumes a one-based list (i.e first element of the list is of index 1). The"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * task is returned as a String."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param index index at which the element is to be obtained."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return the String representation of the task at the specified index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String get(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        Objects.checkIndex(index - 1, list.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return list.get(index - 1).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Removes and returns the task at the specified index in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param index index at which the element is to be removed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return the task that was removed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        Objects.checkIndex(index - 1, list.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return list.remove(index - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Prints this Task list to System.out."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "            System.out.format(\"%d. %s\", i, t);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns the string representation of this Task list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "     * @return the string representation of this Task list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        StringBuilder ret \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            ret.append(String.format(\"%d. %s\\n\", i, t));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return ret.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 98,
      "ryanYtan": 4
    }
  },
  {
    "path": "src/main/java/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanYtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanYtan": 5
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static final String BORDER \u003d String.format(\"%40s\", \"\\u2015\").replace(\u0027 \u0027, \u0027\\u2015\u0027);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Prints varargs number of Strings with the format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * \"\\t string1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * \"\\t string2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * etc."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param args strings to be printed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void print(String... args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        for (String s : args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            System.out.println(\"\\t\" + s);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String logoOne \u003d   \" ____        _        \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String logoTwo \u003d   \"|  _ \\\\ _   _| | _____ \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String logoThree \u003d \"| | | | | | | |/ / _ \\\\\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String logoFour \u003d  \"| |_| | |_| |   \u003c  __/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String logoFive \u003d  \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String greeting \u003d \"Welcome to\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String question \u003d \"What can I do for you today?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        print(greeting, logoOne, logoTwo, logoThree, logoFour, logoFive, question);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 32
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "T | ? | a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "T | ? | b"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "D | ? | this one"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "E | ? | another one"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "D | ? | adjsd"
      }
    ],
    "authorContributionMap": {
      "ryanty": 5
    }
  },
  {
    "path": "src/main/java/old/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param dateTime in the format \"DD/MM/YYYY hhmm\", where hhmm is in 24hr format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public DateTime(String dateTime) throws IllegalInstructionException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String[] el \u003d dateTime.split(\"[/|\\\\s]\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (!DateTime.isValidDateFormat(dateTime))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IllegalInstructionException(\"Date is not in valid format\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.day \u003d Integer.parseInt(el[0]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.month \u003d Integer.parseInt(el[1]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.year \u003d Integer.parseInt(el[2]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.hours \u003d Integer.parseInt(el[3].substring(0, 2));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.minutes \u003d Integer.parseInt(el[3].substring(2, 4));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static boolean isValidDateFormat(String date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String[] el \u003d date.split(\"[/|\\\\s]\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            if (el.length !\u003d 4) "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                throw new IllegalInstructionException(\"not valid\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            Integer.parseInt(el[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            Integer.parseInt(el[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            Integer.parseInt(el[2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            Integer.parseInt(el[3].substring(0, 2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            Integer.parseInt(el[3].substring(2, 4));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } catch (IllegalInstructionException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String asDateTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String[] months \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"%d %s %d %s%s\", day, months[month - 1], year,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                String.format(\"%02d\", hours), String.format(\"%02d\", minutes));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"%d/%d/%d %d:%d\", year, month, day, hours, minutes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 52
    }
  },
  {
    "path": "src/main/java/old/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected DateTime date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public DeadlineTask(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.by \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public DeadlineTask(String description, String date) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.by \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public DeadlineTask(String description, DateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.by \u003d date.asDateTime();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns this object as a string to save into a File."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"D | %s | %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns the string form of this object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(), description, by);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 35
    }
  },
  {
    "path": "src/main/java/old/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static TextList textList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static String[] splitString(String msg) throws IllegalInstructionException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        boolean slashExists \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String[] arr \u003d msg.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        for (i \u003d 0; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            if (arr[i].startsWith(\"/\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                slashExists \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (!slashExists) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IllegalInstructionException(\"Certain commands require specific syntax, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    + \"please consult the user manual for more information.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } else if (i \u003d\u003d arr.length - 1) { // nothing after /at or /by"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IllegalInstructionException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    (String.format(\"No timing given for %s command\", arr[0])));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } else if (i \u003d\u003d 1) { // nothing between command, or /at or /by"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IllegalInstructionException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    String.format(\"No description given for %s command\", arr[0]));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            StringBuilder taskDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            StringBuilder dateTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            for (int j \u003d 1; j \u003c i; j++) "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                taskDescription.append(arr[j] + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            for (int j \u003d i + 1; j \u003c arr.length; j++)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                dateTime.append(arr[j] + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return new String[]{taskDescription.toString().trim(), dateTime.toString().trim()};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static String handleAddingTasks(String msg) throws IllegalInstructionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String command \u003d msg.split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                if (msg.split(\"\\\\s+\").length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    throw new IllegalInstructionException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                            \"The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                t \u003d new TodoTask(msg.substring(\"todo\".length() + 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                String[] infoDeadline \u003d splitString(msg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                if (DateTime.isValidDateFormat(infoDeadline[1])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    t \u003d new DeadlineTask(infoDeadline[0], new DateTime(infoDeadline[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    t \u003d new DeadlineTask(infoDeadline[0], infoDeadline[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                String[] infoEvent \u003d splitString(msg);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                if (DateTime.isValidDateFormat(infoEvent[1])) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    t \u003d new EventTask(infoEvent[0], new DateTime(infoEvent[1]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    t \u003d new EventTask(infoEvent[0], infoEvent[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                throw new IllegalInstructionException(\"Sorry! I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        textList.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return t.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static String handleDelete(String msg) throws IllegalInstructionException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (msg.split(\"\\\\s+\").length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IllegalInstructionException(\"No value given to delete.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        int index \u003d Integer.parseInt(msg.split(\"\\\\s+\")[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String deleted \u003d textList.get(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        textList.delete(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static String handleDone(String msg) throws IllegalInstructionException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (msg.split(\"\\\\s+\").length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IllegalInstructionException(\"No value given to mark as done.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        int index \u003d Integer.parseInt(msg.split(\"\\\\s+\")[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        textList.done(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return textList.get(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Logic for looping the program. Program exits when user enters \"bye\"."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static void promptUser() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        textList \u003d new TextList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String msg \u003d sc.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        while (!msg.equals(EXIT)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            String command \u003d msg.split(\"\\\\s+\")[0];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        textList.print();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    case \"done\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        String finished \u003d handleDone(msg);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        System.out.println(String.format(\"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                finished));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    case \"delete\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        String deleted \u003d handleDelete(msg);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                + \"\\t\" + deleted + \"\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                + String.format(\"Now you have %d tasks in the list.\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                        textList.size()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                    default: // todo, deadline, event"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        String added \u003d handleAddingTasks(msg);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        System.out.println(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                + \"\\t\" + added + \"\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                + String.format(\"Now you have %d tasks in the list\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                        textList.size()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            } catch (IllegalInstructionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                System.out.println(\"The value specified is out-of-bounds of the list. \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        + String.format(\"You currently have %d task(s) in the list.\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                        textList.size()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                msg \u003d sc.nextLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param args  list of inputs"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        promptUser();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 162
    }
  },
  {
    "path": "src/main/java/old/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected DateTime date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public EventTask(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.at \u003d \"\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public EventTask(String description, String at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public EventTask(String description, DateTime date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.at \u003d date.asDateTime();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns this object as a string to save into a File."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"E | %s | %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns the string form of this object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description, at);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 36
    }
  },
  {
    "path": "src/main/java/old/IllegalInstructionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class IllegalInstructionException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public IllegalInstructionException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 5
    }
  },
  {
    "path": "src/main/java/old/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns a string containing a tick or cross, when this task is done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * or not done respectively."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        //return (isDone ? \"y\" : \"n\"); // uses y/n as powershell has difficulty"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                                       // displaying unicode"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns this object as a string to save into a File."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"%s | %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 38
    }
  },
  {
    "path": "src/main/java/old/TextList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class TextList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static final int MAX_ITEMS \u003d 100;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static final String PATH \u003d \"./data/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    private static final String FILE_NAME \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public TextList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        list \u003d new ArrayList\u003cTask\u003e(MAX_ITEMS);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns size of this TextLis object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Adds the given text into this list of text."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param text  text to be entered"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        writeToFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Marks the i-th element in the list as \"done\". The value of i treats"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * the list as a one-indexed list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param i     The element to be marked."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void done(int i) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        list.get(i - 1).markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        writeToFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Gets the i-th element in the list. The value of i treats the list as a"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * one-indexed list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @param i     The element to be returned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String get(int i) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (i \u003c\u003d 0 || i \u003e list.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return list.get(i - 1).toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public Task delete(int i) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (i \u003c\u003d 0 || i \u003e list.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        writeToFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return list.remove(i - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Prints the given list in the following format:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * 1. item-1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * 2. item-2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * ..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * n. item-n"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            System.out.println(\"List is empty!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                System.out.println(i + \". \" + t.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return \"List is empty!\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            StringBuilder ret \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                ret.append(t.formatAsData() + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryanty"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            return ret.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public void writeToFile() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            File dirName \u003d new File(PATH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            if (!dirName.exists()) dirName.mkdirs();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            fw \u003d new FileWriter(PATH + \"/\" + FILE_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            fw.write(this.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ryanty"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 107
    }
  },
  {
    "path": "src/main/java/old/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public TodoTask(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns this object as a string to save into a File."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"T | %s | %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     * Returns the string form of this object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "   }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryanty": 20
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "\t[T][n] run bakery"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "\t[T][n] clean phone"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "\t[T][n] change mouse"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "\t[D][n] submit this thingy (by: thursday next week)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "\t[D][n] do 2012 notes (by: monday)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryanty"
        },
        "content": "\t[E][n] orbital splashdown (at: aug 28th)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryanty"
        },
        "content": "1. [T][n] run bakery"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryanty"
        },
        "content": "2. [T][n] clean phone"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryanty"
        },
        "content": "3. [T][n] change mouse"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryanty"
        },
        "content": "4. [D][n] submit this thingy (by: thursday next week)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryanty"
        },
        "content": "5. [D][n] do 2012 notes (by: monday)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryanty"
        },
        "content": "6. [E][n] orbital splashdown (at: aug 28th)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryanty"
        },
        "content": "\t[T][n] orbital poster"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryanty"
        },
        "content": "1. [T][n] run bakery"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryanty"
        },
        "content": "2. [T][n] clean phone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryanty"
        },
        "content": "3. [T][n] change mouse"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryanty"
        },
        "content": "4. [D][n] submit this thingy (by: thursday next week)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryanty"
        },
        "content": "5. [D][n] do 2012 notes (by: monday)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryanty"
        },
        "content": "6. [E][n] orbital splashdown (at: aug 28th)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryanty"
        },
        "content": "7. [T][n] orbital poster"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryanty"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "ryanty": 44
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "todo run bakery"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": "todo clean phone"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "todo change mouse"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "deadline submit this thingy /by thursday next week"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": "deadline do 2012 notes /by monday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "event orbital splashdown /at aug 28th"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": "todo orbital poster"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ryanty": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryanty"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryanty"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryanty"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryanty"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryanty"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryanty"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryanty"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryanty"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryanty"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryanty"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryanty"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryanty"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryanty"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryanty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryanty"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryanty"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ryanty": 21
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 2,
      "-": 241
    }
  }
]
