[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "﻿[![Build Status](https://travis-ci.org/Ellieyee/duke.svg?branch\u003dmaster)](https://travis-ci.org/Ellieyee/duke)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 37
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    archiveVersion \u003d \"0.2.3\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    //mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "test {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 39,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Duke is a task storing command-line-based application. The commands are not case-specific and remove all trailing white spaces. "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Delete"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* List"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Find "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Undo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "## Storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "The task is stored in the data directory located at or upward ( to a limit of 5 ) from the application and is titled duke.txt. If you have a similarly named txt file, please clear it before running the application in the event of format differences. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Adding a task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Adds a new task into duke. Types of tasks are:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Todo (format: todo [TASK_NAME])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Deadline (format: deadline [TASK_NAME] /by [DATE])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "* Event (format: event [TASK_NAME] /by [DATE])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Where [DATE] format is \"[DAY]/[MONTH]/[YEAR] [HOUR][MIN]\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`deadline CS2100 assignment /by 7/10/2019 2359`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Got it. I\u0027ve added this task:`\\"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`[D][Not done] CS2100 assignment (by: 7/10/2019 2359)`\\"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Now you have 1 tasks in the list.`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Deleting a task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Deletes a selected task in the list based on its index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`delete [TASK_INDEX]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Noted. I\u0027ve removed this task:`\\"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "` [D][Not done] CS2100 assignment (by: 7/10/2019 2359)`\\"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Now you have 0 tasks in the list.`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### List"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Lists out all the tasks in the list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Here are the tasks in your list:`\\"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`1. [D][Not done] CS2100 assignment (by: 7/10/2019 2359)`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Mark as done"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Marks a specified task as done based on its index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`done [TASK_INDEX]`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Nice! I\u0027ve marked this task as done:`\\"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`[D][Done] CS2100 assignment (by: 7/10/2019 2359)`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Find task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Lists out all the task that completely or partially match a given keyword."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`find [KEYWORD]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`find CS`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Here are the matching tasks in your list:`\\"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`1. [D][Done] CS2100 assignment (by: 7/10/2019 2359)`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Undo task"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Undos the last modification carried out on the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "### Usage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`The last action was undone :)`\\"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`Here are the tasks in your list:`\\"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "`1. [D][Not done] CS2100 assignment (by: 7/10/2019 2359)`"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 89,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/DataStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DataStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String FILE_NAME \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String PARENT_DIR_NAME \u003d \"data\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final int SEARCH_LIMIT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public DataStorage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.setFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Stores all tasks in tasklist into given txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - list containing all existing tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void storeTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String content \u003d getStringContent(taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Files.writeString(Paths.get(this.path), content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Retrieves tasks from given txt file and stores into new duke.task.TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return duke.task.TaskList - list containing all existing tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TaskList getStoredTaskList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        File file \u003d new File(this.path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String command;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            int idx \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            while ((command \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                String[] taskInfo \u003d command.split(\"\\\\|\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                switch (taskInfo[0]) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                case \"Deadline\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    taskList.add(new DeadlineTask(taskInfo[2], taskInfo[3]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                case \"Event\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    taskList.add(new EventTask(taskInfo[2], taskInfo[3]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                case \"Todo\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    taskList.add(new ToDoTask(taskInfo[2]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (taskInfo[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    taskList.done(idx);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                idx++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Converts existing taskList into storable and easily retrievable string format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - list containing all existing tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return String format of taskList"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static String getStringContent(TaskList taskList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String contents \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String isDone \u003d (task.isDone()) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String taskName \u003d task.getName();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            switch (task.getTaskType()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                DeadlineTask deadLineTask \u003d (DeadlineTask) task; // Check coding standard"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                String deadline \u003d deadLineTask.getDeadline();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                contents +\u003d \"Deadline\" + \"|\" + isDone + \"|\" + taskName + \"|\" + deadline + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                String duration \u003d eventTask.getDuration();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                contents +\u003d \"Event\" + \"|\" + isDone + \"|\" + taskName + \"|\" + duration + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                contents +\u003d \"Todo\" + \"|\" + isDone + \"|\" + taskName + \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return contents;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Sets the file path based on the user\u0027s system."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author {ang-zeyu}-reused"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    //Reused from https://github.com/ang-zeyu/duke/blob/master/src/main/java/duke/storage/Storage.java with minor modifications"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private void setFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // Gets the currents directory of the user"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String workingDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Path directory \u003d Paths.get(workingDirectory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        while (count \u003c\u003d SEARCH_LIMIT) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if ((directory \u003d\u003d null)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    || Files.isDirectory(Paths.get(directory.toString(), PARENT_DIR_NAME))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            directory \u003d directory.getParent();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if ((count \u003e SEARCH_LIMIT) || (directory \u003d\u003d null)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            // Create new directory"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Path newPath \u003d Paths.get(workingDirectory, PARENT_DIR_NAME);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (!Files.isDirectory(newPath)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    Files.createDirectory(newPath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                System.out.println(\"Storage location not found :( \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.path \u003d Paths.get(newPath.toString(), FILE_NAME).toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.path \u003d Paths.get(directory.toString(), PARENT_DIR_NAME, FILE_NAME).toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 141,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.CommandHistoryStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.EmptyHistoryException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.parser.ParserManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static ParserManager parserManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static DataStorage dataStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static MainWindow mainWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static CommandHistoryStack commandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param mainWindow - Mainwindow application for JavaFX"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Duke(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        mainWindow.display(Ui.getWelcomeMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        commandHistory \u003d new CommandHistoryStack();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Initialize static variables."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dataStorage \u003d new DataStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.taskList \u003d dataStorage.getStoredTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds commands to lists and runs executes commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!input.trim().toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                if (isUndoCommand(input)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    return executeUndo();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return executeCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            } catch (UnknownCommandException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return Ui.getExceedListMessage(taskList.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return Ui.getInvalidStatementMessage(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Exits the application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        mainWindow.display(Ui.getGoodbyeMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        PauseTransition exitTransition \u003d new PauseTransition();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        exitTransition.setOnFinished(mainWindow.exitHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        exitTransition.play();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns true if command complies to Undo Command Format, else returns false."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private boolean isUndoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return fullCommand.toLowerCase().trim().equals(\"undo\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Revert existing tasklist to state before last modification."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return - String containing message for successful undo"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws EmptyHistoryException - if no more previous tasks to undo"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String executeUndo() throws EmptyHistoryException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.taskList \u003d commandHistory.pop();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dataStorage.storeTaskList(this.taskList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return commandHistory.getUndoMessage(this.taskList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Executes command based on input and updates tasklist based on given change."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param input given directly by user"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return - String containing successful execution of command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws UnknownCommandException - Format errors of command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws RuntimeException - invalid input such as indexoutofbounds or numberformatexceptions"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String executeCommand(String input) throws UnknownCommandException, RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Command command \u003d parserManager.parseCommand(this.taskList, input.trim());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assert command !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        commandHistory.update(command, this.taskList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String response \u003d command.execute(this.taskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dataStorage.storeTaskList(this.taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 103,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.ui.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 13
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints once the program duke.Duke.java is launched."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static String getWelcomeMessage() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"Hello! I\u0027m duke.Duke\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints right before the program duke.Duke.java is closed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static String getGoodbyeMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out message after exceeding list bounds."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param size - Current size of list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static String getExceedListMessage(int size) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"There is/are only \" + size + \" item(s) in the list :( \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out message after invalid statement."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param fullCommand - Invalid command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static String getInvalidStatementMessage(String fullCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"OOPS!!! The statement: \\\"\" + fullCommand + \"\\\" is invalid. \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 34
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param task - duke.task.Task given to execute command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the command type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Commands getCommandType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.task.getTaskType();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds given task into tasklist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - list containing all existing tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String execute(TaskList taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        taskList.add(this.task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.getSuccessfulAddMessage(taskList.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out message after successful deletion of task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param size - Current size of list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String getSuccessfulAddMessage(int size) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"  \" + this.task + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"Now you have \" + size + \" tasks in the list.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /* Returns stored task of comment */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (obj instanceof AddCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            AddCommand addCommand \u003d (AddCommand) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (addCommand.getTask().equals(this.task)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 60
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public abstract Commands getCommandType();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Execute command on given task and save into tasklist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public abstract String execute(TaskList taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 13
    }
  },
  {
    "path": "src/main/java/duke/command/CommandHistoryStack.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A Stack containing past commands - doesn\u0027t keep track of commands from previous runs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class CommandHistoryStack {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Stack\u003cTaskList\u003e commandStack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String UNDO_MESSAGE \u003d \"The last action was undone :)\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public CommandHistoryStack() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the most recent taskList - prior most recent modification."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return most recent taskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TaskList pop() throws EmptyHistoryException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (this.commandStack.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new EmptyHistoryException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.commandStack.pop();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds in new taskList after modification is made."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param command command that made modification"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList existing taksList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void update(Command command, TaskList taskList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        switch (command.getCommandType()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            this.commandStack.push(taskList.getCopyTaskList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns message after successful undo-ing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - new tasklist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return undo message"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getUndoMessage(TaskList taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return UNDO_MESSAGE + taskList.getPrintListMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 56
    }
  },
  {
    "path": "src/main/java/duke/command/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    LIST, FIND, DONE, DELETE, TODO, DEADLINE, EVENT, UNDO"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 5
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Commands DELETE_COMMAND_TYPE \u003d Commands.DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param idx - Index of task to delete"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public DeleteCommand(int idx) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns command type of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Commands getCommandType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return DELETE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Execute delete command on given task and save into taskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - list containing all existing tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String execute(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Task task \u003d taskList.get(this.idx);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        taskList.delete(idx);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.getSuccessDeleteTaskMessage(task, taskList.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out message after successful deletion of task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param task - duke.task.Task that has been successfully deleted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param size - Current size of list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String getSuccessDeleteTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"  \" + task + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"Now you have \" + size + \" tasks in the list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 47
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private int idx;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Commands DONE_COMMAND_TYPE \u003d Commands.DONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String MARK_DONE_MESSAGE \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param idx - Index of task to delete"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public DoneCommand(int idx) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.idx \u003d idx;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns command type of command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Commands getCommandType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return DONE_COMMAND_TYPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Execute done command on given task and save into taskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - list containing all existing tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String execute(TaskList taskList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Task task \u003d taskList.get(idx);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        taskList.done(this.idx);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.getSuccessfulDoneMessage(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out message after successful marking of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param task - duke.task.Task that has been successfully marked done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String getSuccessfulDoneMessage(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return MARK_DONE_MESSAGE + task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 45
    }
  },
  {
    "path": "src/main/java/duke/command/EmptyHistoryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class EmptyHistoryException extends UnknownCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EmptyHistoryException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(null);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"☹ OOPS!!! No more commands to undo.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 12
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Commands FIND_COMMAND_TYPE \u003d Commands.FIND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskName - Name of task to search for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public FindCommand(String taskName) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns Command type of command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Commands getCommandType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return FIND_COMMAND_TYPE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Execute find command on given task and save into taskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - list containing all existing tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String execute(TaskList taskList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        List\u003cTask\u003e list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            if (taskList.get(i).getName().contains(this.taskName)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                list.add(taskList.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return this.getNoKeywordMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        // If there are several responses found, print them all"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String response \u003d this.getFoundKeywordMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        AtomicInteger index \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        response +\u003d list.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .map(str -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    int idx \u003d index.getAndIncrement();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    return (idx + 1) + \".\" + list.get(idx) + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                })"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                .collect(Collectors.joining());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out message after tasks are found matching the given keyword."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return successful find message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String getFoundKeywordMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out message after no tasks are found matching the given keyword."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return unsuccessful find message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String getNoKeywordMessage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"☹ OOPS!!! There are no matching tasks in the list with the keyword: \\\"\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + this.taskName + \"\\\".\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 76
    }
  },
  {
    "path": "src/main/java/duke/command/IncompleteCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class IncompleteCommandException extends UnknownCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param message - Message describing command: Empty or incomplete"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskName - Name of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public IncompleteCommandException(String message, String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"☹ OOPS!!! The description of a \" + this.taskName + \" cannot be \" + this.message + \".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 22
    }
  },
  {
    "path": "src/main/java/duke/command/IncorrectStatementException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class IncorrectStatementException extends UnknownCommandException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String actualStatement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String givenStatement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param givenStatement - Given message input by user"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param actualStatement - Expected ouput"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public IncorrectStatementException(String givenStatement, String actualStatement) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(actualStatement);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.actualStatement \u003d actualStatement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.givenStatement \u003d givenStatement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"Sorry that statement is invalid. Try using \\\"/\" + this.actualStatement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"\\\" instead of \\\"/\" + this.givenStatement + \"\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * This is the class for the command to execute the LIST command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * lists down all existing values in taskList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Commands LIST_COMMAND_TYPE \u003d Commands.LIST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the command type of the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Commands getCommandType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return LIST_COMMAND_TYPE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String execute(TaskList tasklist) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return tasklist.getPrintListMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 24
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class UnknownCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param message - unknown command given by user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public UnknownCommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 17
    }
  },
  {
    "path": "src/main/java/duke/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.IncompleteCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parse new task (without date) based on existing format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional containing either valid command or null (when exception thrown)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in complete format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Command parseWithoutDate(String[] commandDescription) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        checkCommandEmpty(commandDescription);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new AddCommand(new ToDoTask(commandDescription[1]));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parse new task (with date) based on existing format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional containing either valid command or null (when exception thrown)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in correct format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Command parseWithDate(String[] commandDescription) throws UnknownCommandException  {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        checkCommandEmpty(commandDescription);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String[] taskArray \u003d commandDescription[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String taskName \u003d taskArray[0].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String taskType \u003d commandDescription[0].toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            String[] statementAndDate \u003d taskArray[1].split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            DateTimeParser.validateDateFormat(statementAndDate[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                DeadlineTask.verifyTaskStatement(statementAndDate[0].toLowerCase());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return new AddCommand(new DeadlineTask(taskName, statementAndDate[1]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                EventTask.verifyTaskStatement(statementAndDate[0].toLowerCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                return new AddCommand(new EventTask(taskName, statementAndDate[1]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IncompleteCommandException(\"incomplete\", commandDescription[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new AddCommand(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Throws error if the given command is empty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in complete format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static void checkCommandEmpty(String[] commandDescription) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (commandDescription.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IncompleteCommandException(\"empty\", commandDescription[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 63
    }
  },
  {
    "path": "src/main/java/duke/parser/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Validates the format of the given string as a proper Date format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param dateToValidate - String containing expected date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws WrongDateFormatException - thrown when the given String does not comply with Date formet"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static void validateDateFormat(String dateToValidate) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        //To make strict date format validation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        formatter.setLenient(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            formatter.parse(dateToValidate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new WrongDateFormatException(dateToValidate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 23
    }
  },
  {
    "path": "src/main/java/duke/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.IncompleteCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parse delete command based on format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param size - size of current tasklist"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional containing either valid command or null (when exception thrown)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws RuntimeException - contains both NumberFormatException and IndexOutOfBoundsException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Command parse(String[] commandDescription, int size)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throws RuntimeException, IncompleteCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        checkCommandEmpty(commandDescription);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        int idx \u003d Integer.parseInt(commandDescription[1]) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if ((idx \u003c 0) || (idx \u003e\u003d size)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new DeleteCommand(idx);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Throws error if the given command is empty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in complete format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static void checkCommandEmpty(String[] commandDescription) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (commandDescription.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IncompleteCommandException(\"empty\", commandDescription[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 36
    }
  },
  {
    "path": "src/main/java/duke/parser/DoneCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.IncompleteCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DoneCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Marks specified command based on idx of command and required format."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param size - size of current tasklist"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional containing either valid command or null (when exception thrown)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws RuntimeException - contains both NumberFormatException and IndexOutOfBoundsException"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in complete format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Command parse(String[] commandDescription, int size)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throws RuntimeException, IncompleteCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        checkCommandEmpty(commandDescription);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        int idx \u003d Integer.parseInt(commandDescription[1]) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if ((idx \u003c 0) || (idx \u003e\u003d size)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new DoneCommand(idx);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Throws error if the given command is empty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in complete format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static void checkCommandEmpty(String[] commandDescription)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throws IncompleteCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (commandDescription.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IncompleteCommandException(\"empty\", commandDescription[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 37
    }
  },
  {
    "path": "src/main/java/duke/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.IncompleteCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parse find command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional containing either valid command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in complete format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Command parse(String[] commandDescription) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        checkCommandEmpty(commandDescription);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new FindCommand(commandDescription[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Throws error if the given command is empty."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncompleteCommandException - throws error if the command is not in complete format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static void checkCommandEmpty(String[] commandDescription) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (commandDescription.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IncompleteCommandException(\"empty\", commandDescription[0]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 30
    }
  },
  {
    "path": "src/main/java/duke/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.UnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parse list command based on required format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional containing either valid command or null (when exception thrown)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static Command parse(String command) throws UnknownCommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!command.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new UnknownCommandException(command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 19
    }
  },
  {
    "path": "src/main/java/duke/parser/ParserManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Parse given user input and returns Optional containing null or valid command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskList - list containing all existing tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param fullCommand - command given by user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Optional containing either valid command or null (when exception is thrown)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Command parseCommand(TaskList taskList, String fullCommand)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throws UnknownCommandException, RuntimeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String[] commandDescription \u003d fullCommand.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Commands commandType \u003d checkValidCommand(commandDescription);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return ListCommandParser.parse(fullCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return DeleteCommandParser.parse(commandDescription, taskList.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return DoneCommandParser.parse(commandDescription, taskList.size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return AddCommandParser.parseWithoutDate(commandDescription);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return AddCommandParser.parseWithDate(commandDescription);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return FindCommandParser.parse(commandDescription);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new UnknownCommandException(commandDescription[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Checks if the given String contains a valid command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param commandDescription - array of strings containing command description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return Commands containing valid command type"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws UnknownCommandException - thrown when given string does not match valid commands"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Commands checkValidCommand(String[] commandDescription) throws UnknownCommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return Commands.valueOf(commandDescription[0].toUpperCase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new UnknownCommandException(commandDescription[0]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 54
    }
  },
  {
    "path": "src/main/java/duke/parser/WrongDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.UnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class WrongDateFormatException extends UnknownCommandException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param date - Given date format from user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public WrongDateFormatException(String date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"The format for \\\"\" + this.date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"\\\" is wrong. The correct format for dates should be: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                + \"\\\"dd/MM/yyyy HHmm\\\"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 23
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.IncorrectStatementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String DEFAULT_DEADLINE_ICON \u003d \"[D]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String DEADLINE_TASK_STATEMENT \u003d \"by\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Commands DEADLINE_TASK_TYPE \u003d Commands.DEADLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String deadLine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskName - Name of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param deadLine - Deadline of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public DeadlineTask(String taskName, String deadLine) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(taskName, DEFAULT_DEADLINE_ICON, DEADLINE_TASK_TYPE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Verifies that given statement complies with the required Deadline format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param statement - String containing expected statement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncorrectStatementException - thrown if the verification fails"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static void verifyTaskStatement(String statement) throws IncorrectStatementException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!statement.equals(DEADLINE_TASK_STATEMENT)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IncorrectStatementException(statement, DEADLINE_TASK_STATEMENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns the task deadline. **/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.deadLine;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns a copy of the existing task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return new task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Task getTaskCopy() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Task task \u003d new DeadlineTask(this.getName(), this.getDeadline());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return super.toString() + \" (by: \" + this.deadLine + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (obj instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            DeadlineTask deadlineTask \u003d (DeadlineTask) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return (deadlineTask.getName().equals(this.getName())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (deadlineTask.getTaskType().equals(this.getTaskType()))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (deadlineTask.isDone() \u003d\u003d this.isDone())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (deadlineTask.getDeadline().equals(this.getDeadline())));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 66
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.IncorrectStatementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String DEFAULT_EVENT_ICON \u003d \"[E]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String EVENT_TASK_STATEMENT \u003d \"at\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Commands EVENT_TASK_TYPE \u003d Commands.EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskName - Name of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param duration - Deadline of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EventTask(String taskName, String duration) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(taskName, DEFAULT_EVENT_ICON, EVENT_TASK_TYPE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Verifies that given statement complies with the required Deadline format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param statement - String containing expected statement"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @throws IncorrectStatementException - thrown if the verification fails"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static void verifyTaskStatement(String statement) throws IncorrectStatementException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (!statement.equals(EVENT_TASK_STATEMENT)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            throw new IncorrectStatementException(statement, EVENT_TASK_STATEMENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns task duration. **/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns a copy of the existing task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return new task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Task getTaskCopy() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Task task \u003d new EventTask(this.getName(), this.getDuration());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return super.toString() + \" (at: \" + this.duration + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (obj instanceof EventTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            EventTask eventTask \u003d (EventTask) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return (eventTask.getName().equals(this.getName())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (eventTask.getTaskType().equals(this.getTaskType()))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (eventTask.isDone() \u003d\u003d this.isDone())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (eventTask.getDuration().equals(this.getDuration())));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String taskIcon;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Commands taskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskName - Name of given task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskIcon - Icon for the task - [D]/[E] etc.."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskType - Type of task - Deadline/Event etc.."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Task(String taskName, String taskIcon, Commands taskType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.taskIcon \u003d taskIcon;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Marks duke.task.Task as Done. **/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns taskName."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return String name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns tick if task is Done, else returns cross."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return String symbol"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String getDoneSymbol() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return \"Done\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return \"Not done\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns task type. **/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Commands getTaskType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns true if task is done, else returns false. **/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns task icon. **/"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private String getTaskIcon() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.taskIcon;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Returns a copy of the existing task. **/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public abstract Task getTaskCopy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.getTaskIcon() + \"[\" + this.getDoneSymbol() + \"] \" + this.getName();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (obj instanceof Task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Task task \u003d (Task) obj;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            return (task.getName().equals(this.getName())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (task.getTaskType().equals(this.getTaskType()))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                    \u0026\u0026 (task.isDone() \u003d\u003d this.isDone()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 81
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.list \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Adds new task (without date) into list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param task - task to add"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Marks task at given index as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param idx - Index of task in list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void done(int idx) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assert (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.list.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.list.get(idx).markDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Marks task at given index as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param idx - Index of task in list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void delete(int idx) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assert (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.list.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        this.list.remove(idx);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns task at index idx."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param idx - index of task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return duke.task.Task at index idx"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Task get(int idx) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assert (idx \u003e\u003d 0 \u0026\u0026 idx \u003c this.list.size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.list.get(idx);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns the current size of list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return size of list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Prints out contents of list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return String containing list contents"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public String getPrintListMessage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String response \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        AtomicInteger index \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String[] printedList \u003d new String[this.list.size()];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        response +\u003d Arrays.stream(printedList)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                          .map(str -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                              int idx \u003d index.getAndIncrement();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                              return (idx + 1) + \".\" + this.list.get(idx) + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                          })"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                          .collect(Collectors.joining());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns a new tasklist containing a copy of all the same values."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TaskList getCopyTaskList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TaskList newList \u003d new TaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            newList.add(this.list.get(i).getTaskCopy());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 91
    }
  },
  {
    "path": "src/main/java/duke/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final String DEFAULT_TODO_ICON \u003d \"[T]\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private static final Commands TODO_TASK_TYPE \u003d Commands.TODO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param taskName - Name of given task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public ToDoTask(String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        super(taskName, DEFAULT_TODO_ICON,TODO_TASK_TYPE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Returns a copy of the existing task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return new task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public Task getTaskCopy() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Task task \u003d new ToDoTask(this.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        if (this.isDone()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 28
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Label dialog \u003d new Label();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ImageView displayPicture \u003d new ImageView();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Retrieves user Dialog Box."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param text - user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param img - user image"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return - Dialog box of user info"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        var dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dialogBox.setMinHeight(dialogBox.dialog.getMinHeight());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Retrieves Duke Dialog box."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param text - duke input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param img - duke image"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @return - Dialog box of duke info"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        var dialogBox \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dialogBox.setMinHeight(dialogBox.dialog.getMaxHeight());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            MainWindow mainWindow \u003d fxmlLoader.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            duke \u003d new Duke(mainWindow);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            mainWindow.setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            mainWindow.exitHandler \u003d (event) -\u003e stage.close();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 35
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /** Exit handler for closing the main window. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public EventHandler\u003cActionEvent\u003e exitHandler;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Creates a new dialog box storing response message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * @param message - message to be displayed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void display(String message) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 67
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(\"[D][Not done] task (by: 1/1/1991 1234)\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "                new DeadlineTask(\"task\", \"1/1/1991 1234\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 13
    }
  },
  {
    "path": "src/test/java/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class EventTaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(\"[E][Not done] sale (at: 1/1/1991 1234)\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            new EventTask(\"sale\", \"1/1/1991 1234\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 13
    }
  },
  {
    "path": "src/test/java/ParserManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.parser.ParserManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ParserManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void testValidParsing() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validInput11 \u003d \"todo Read book\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validInput12 \u003d \"TODO    Read book    \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validInput21 \u003d \"deadline assignment /by 1/1/1991 1234\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validInput22 \u003d \"DEadLinE   assignment   /by    1/1/1991 1234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validInput31 \u003d \"event sales /at 1/1/1991 1234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        String validInput32 \u003d \"EvEnt    sales     /at  1/1/1991 1234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Command validOutput1 \u003d new AddCommand(new ToDoTask(\"Read book\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Command validOutput2 \u003d new AddCommand(new DeadlineTask(\"assignment\", \"1/1/1991 1234\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Command validOutput3 \u003d new AddCommand(new EventTask(\"sales\", \"1/1/1991 1234\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertAll(\"valid\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            () -\u003e assertEquals(validOutput1, parserManager.parseCommand(taskList, validInput11)),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            () -\u003e assertEquals(validOutput1, parserManager.parseCommand(taskList, validInput12)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            () -\u003e assertEquals(validOutput2, parserManager.parseCommand(taskList, validInput21)),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            () -\u003e assertEquals(validOutput2, parserManager.parseCommand(taskList, validInput22)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            () -\u003e assertEquals(validOutput3, parserManager.parseCommand(taskList, validInput31)),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "            () -\u003e assertEquals(validOutput3, parserManager.parseCommand(taskList, validInput32))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 39
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public TaskListTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        taskList.add(new ToDoTask(\"Say hi\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        taskList.add(new DeadlineTask(\"task\", \"1/1/1991 1234\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        taskList.add(new EventTask(\"sale\", \"1/1/1991 1234\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void testTaskListSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(3, taskList.size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void testGetTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(\"[D][Not done] task (by: 1/1/1991 1234)\", taskList.get(1).toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 31
    }
  },
  {
    "path": "src/test/java/ToDoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class ToDoTaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        assertEquals(\"[T][Not done] Say hi\", new ToDoTask(\"Say hi\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 12
    }
  },
  {
    "path": "test1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "This is a test"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "? OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "say hi"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "│     └─seedu/duke/duke.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 167
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `duke.Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        Application.launch(duke.Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 3,
      "-": 107
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for duke.Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "In this tutorial, we will be creating a GUI for duke.Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "![Mockup for duke.Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "![duke.Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "![duke.Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "        stage.setTitle(\"duke.Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "![duke.Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8,
      "-": 150
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "For duke.Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and duke.Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(DukeStub.getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    return \"duke.Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and duke.Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(DukeStub.getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "You have successfully implemented a fully functional GUI for duke.Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 7,
      "-": 236
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Let\u0027s return to duke.Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "As part of the effort to separate the code handling duke.Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private duke.Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    public void setDuke(duke.Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `duke.Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "    private duke.Duke duke \u003d new duke.Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 8,
      "-": 286
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ellieyee"
        },
        "content": "   java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Ellieyee": 4,
      "-": 70
    }
  }
]
