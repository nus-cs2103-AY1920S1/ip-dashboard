[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 12,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Command(action, task) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String nextCommand(String input) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String text \u003d input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        switch ()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 15
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Deadline task to be added."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param by Date of the deadline task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to give the string that is to be"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * added to the list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the string to be loaded into"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     the file and printed out."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String date \u003d formatDate(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (getIsCorrectFormat()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"[D]\" + super.toString() + description + \" (by: \" + date + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"Invalid date format!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 32
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 22
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    Scene scene;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Duke that takes in a file to add text into."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filepath File that the task is added to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *         does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Duke(String filepath) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Contains the methods to start the bot and"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * start to take in inputs for the bot."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ui.greeting();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ui.nextCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        new Duke(\"todo.txt\").run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "//        ScrollPane scrollPane;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "//        VBox dialogContainer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "//        TextField userInput;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "//        Button sendButton;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "//        Scene scene;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String text \u003d input.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (text.equals(\"bye\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    return ui.printBye();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    //ui.printLine();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (text.equals(\"list\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    return ui.printList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (text.equals(\"delete all\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    return tasks.deleteAllCommand(text);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (text.contains(\" \")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    String[] splittedText \u003d text.split(\" \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    if (splittedText[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        int num \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        int taskNumber \u003d Integer.parseInt(text.substring(num + 1, num + 2));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        if (taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d TaskList.listOfTasks.size()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            return ui.printDone(taskNumber);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! There is no such task \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                    + \"number in your list of tasks!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    } else if (splittedText[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        return tasks.deleteCommand(text);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    } else if (splittedText[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        ArrayList\u003cString\u003e strList \u003d ui.findCommand(splittedText[1]);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        return ui.printKeywordList(strList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        if (splittedText[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            System.out.println(\"hey\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            return tasks.toDoCommand(text);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else if (splittedText[0].equals(\"deadline\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                \u0026\u0026 text.contains(\"/\") \u0026\u0026 text.contains(\"by\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            return tasks.deadlineCommand(text);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else if (splittedText[0].equals(\"event\")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                \u0026\u0026 text.contains(\"/\") \u0026\u0026 text.contains(\"at\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            return tasks.eventCommand(text);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            ui.printLine();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            ui.printIndent();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            throw new DukeException(\"☹ OOPSY DAISY!!! Please follow the correct format! :\u003c\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    ui.printIndent();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    switch (text) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty. \""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                + \"It must be in proper format (i.e. todo clean table).\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty. \""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                + \"It must be in proper format (i.e. deadline return book /by 23 Aug).\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty. \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                + \"It must be in proper format (i.e. event Don\u0027s birthday /at 15 Jan 3pm).\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 243,
      "-": 2
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Duke Exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param message takes in the error and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     prints it out to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String when;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected boolean isValid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Event task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Event task to be attended."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param when Date of the event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Event(String description, String when) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.when \u003d when;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to give the string that is to be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * added to the list of tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the string to be loaded into"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     the file and printed out."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String date \u003d formatDate(when);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (getIsCorrectFormat()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"[E]\" + super.toString() + description + \" (at: \" + date + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"Invalid date format!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 33
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 11
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static Command parse(String line) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String dateFormatter(String text) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num \u003d text.indexOf(\"/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num1 \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int dayDate \u003d Integer.parseInt(text.substring(num + 4, num + 6));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int monthDate \u003d Integer.parseInt(text.substring(num + 7, num + 9));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeHour \u003d Integer.parseInt(text.substring(num + 15, num + 17));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeMin \u003d Integer.parseInt(text.substring(num + 17));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (dayDate \u003e 0 \u0026\u0026 dayDate \u003c\u003d 31 \u0026\u0026 monthDate \u003e 0 \u0026\u0026 monthDate \u003c\u003d 12"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 timeHour \u003e 0 \u0026\u0026 timeHour \u003c\u003d 24 \u0026\u0026 timeMin \u003e\u003d 0 \u0026\u0026 timeMin \u003c\u003d 59) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Task task \u003d new Deadline(text.substring(num1, num - 1),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    text.substring(num + 4));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String taskers \u003d task.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return taskers;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 26
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.BufferedInputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected static String file \u003d \"todo.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Storage(String file) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Adds tasks to the file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filepath File that the task is added to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param textToAdd Tasks that needs to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     is a directory rather than a regular file,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addToFile(String filepath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FileWriter typer \u003d new FileWriter(filepath, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.write(textToAdd + System.lineSeparator());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Writes task to a file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Can be used as a way to overwrite tasks in the file as well."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filepath File that the task is added to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param textToAdd Tasks that needs to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     is a directory rather than a regular file,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void writeToFile(String filepath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FileWriter typer \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.write(textToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        typer.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Counts the number of tasks in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filename File that the tasks are in."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the number of tasks."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     is a directory rather than a regular file,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int countLines(String filename) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try (InputStream inputs \u003d new BufferedInputStream(new FileInputStream(filename))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            byte[] characters \u003d new byte[1024];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int readCharacters \u003d inputs.read(characters);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (readCharacters \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                // no lines to read"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (readCharacters \u003d\u003d 1024) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                for (int i \u003d 0; i \u003c 1024; ) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    if (characters[i++] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        ++count;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                readCharacters \u003d inputs.read(characters);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            // count remaining characters"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (readCharacters !\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                for (int i \u003d 0; i \u003c readCharacters; ++i) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    if (characters[i] \u003d\u003d \u0027\\n\u0027) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        ++count;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                readCharacters \u003d inputs.read(characters);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return count \u003d\u003d 0 ? 1 : count;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Loads the task into the tasklist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     in TaskList from the file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return ArrayList that has been copied from the file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If there is nothing in the file to be loaded,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     this exception will be thrown."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException, DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        File f \u003d new File(file);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArrayList\u003cTask\u003e tempList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (countLines(file) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Woahsies wavy! There is nothing in this file!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                int index \u003d task.indexOf(\"[\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String taskType \u003d task.substring(index + 1, index + 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                int spaceIndex \u003d task.indexOf(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Task toDo \u003d new Todo(task.substring(spaceIndex));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    taskList.add(toDo);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    int byIndex \u003d task.indexOf(\"(\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Task deadline \u003d new Deadline(task.substring(spaceIndex, byIndex - 1),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            task.substring(byIndex + 4));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    taskList.add(deadline);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    int atIndex \u003d task.indexOf(\"(\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Task event \u003d new Event(task.substring(spaceIndex, atIndex - 1),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            task.substring(atIndex + 4));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            System.out.println(\"Your file has been loaded! :)\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            tempList \u003d new ArrayList\u003cTask\u003e(taskList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return tempList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 141
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected boolean isCorrectFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Takes in a string that is"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     either Todo, Event or Deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.isCorrectFormat \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to get whether that date is in correct format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the boolean isCorrectFormat for the date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean getIsCorrectFormat() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return isCorrectFormat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns tick or cross symbol."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return A tick or cross to symbolize whether the task has been done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to mark the task to done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints a statement informing the user that the bot"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * has added the task into the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printGI() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printIndent();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints the number of tasks in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printNumOfTasks() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printIndent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Now you have \" + Ui.getNumOfTasks() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //Ui.printLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to get the String for whether"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the task is done or not."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the tick or cross in brackets."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints a statement to tell the user that the task has been removed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printRemove() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printIndent();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Noted. I\u0027ve removed this task.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to format the date into the appropriate format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * For example, 10/02/2012 1800 to 10th of February 2012, 6:00 pm."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param date Takes in a valid date to format it."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the correctly formatted date with the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     appropriate strings."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String formatDate(String date) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String formatted \u003d date;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!date.contains(\")\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Date d \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\").parse(date);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String day \u003d new SimpleDateFormat(\"dd\").format(d);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String month \u003d new SimpleDateFormat(\"MMMMMMMMMMMMMMM\").format(d);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String year \u003d new SimpleDateFormat(\"yyyy\").format(d);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String time \u003d new SimpleDateFormat(\"h:mm a\").format(d).toLowerCase();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String endOfDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                int dayInteger \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (dayInteger % 10 \u003d\u003d 1 \u0026\u0026 dayInteger !\u003d 11) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"st\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (dayInteger % 10 \u003d\u003d 2 \u0026\u0026 dayInteger !\u003d 12) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"nd\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (dayInteger % 10 \u003d\u003d 3 \u0026\u0026 dayInteger !\u003d 13) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"rd\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    endOfDate \u003d \"th\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                isCorrectFormat \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                formatted \u003d dayInteger + endOfDate + \" of \" + month + \" \" + year + \", \" + time;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(\"That is the wrong date format! \u003e:-(\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            isCorrectFormat \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return formatted;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 131
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected static ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected Task tasking \u003d new Task(\"\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected Storage store \u003d new Storage(Storage.file);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Overloaded Constructor for Task list in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the event that a array list is available"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * from the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param list Arraylist that contains all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfTasks \u003d list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Deletes the specified tasks off the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Delete command with the which tasks to delete based of their numbering."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String deleteCommand(String text) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int spaceIndex \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(text.substring(spaceIndex + 1, spaceIndex + 2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        tasking.printRemove();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printDelete(taskNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfTasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        store.writeToFile(Storage.file, \"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            store.addToFile(Storage.file, task.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return tasking.printNumOfTasks();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Deletes everything off the task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     or cannot be opened for any other reason."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String deleteAllCommand(String text) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        store.writeToFile(Storage.file, \"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfTasks.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printIndent();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Everything in your list has been removed! \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"Add more tasks to get started again!!!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //Ui.printLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Adds todo task into arraylist and into file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Takes in todo command with task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toDoCommand(String text) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        tasking.printGI();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"1\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Ui.printIndent();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"2\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Task task \u003d new Todo(text.substring(num + 1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"3\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"4\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        store.addToFile(Storage.file, task.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return tasking.printNumOfTasks();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Event command with event and date at which it is and adds"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * it into the arraylist and file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Takes in a event command with the task and date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the user inputs more than the normal"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     number of days/months/time, this error will be thrown out instead."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String eventCommand(String text) throws DukeException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num \u003d text.indexOf(\"/\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num1 \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int dayDate \u003d Integer.parseInt(text.substring(num + 4, num + 6));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int monthDate \u003d Integer.parseInt(text.substring(num + 7, num + 9));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeHour \u003d Integer.parseInt(text.substring(num + 15, num + 17));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeMin \u003d Integer.parseInt(text.substring(num + 17));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (dayDate \u003e 0 \u0026\u0026 dayDate \u003c\u003d 31 \u0026\u0026 monthDate \u003e 0 \u0026\u0026 monthDate \u003c\u003d 12"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 timeHour \u003e 0 \u0026\u0026 timeHour \u003c\u003d 24 \u0026\u0026 timeMin \u003e\u003d 0 \u0026\u0026 timeMin \u003c\u003d 59) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Task task \u003d new Event(text.substring(num1, num - 1),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    text.substring(num + 4));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String taskers \u003d task.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (!taskers.equals(\"Invalid date format!\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                tasking.printGI();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(\"  \" + taskers);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                listOfTasks.add(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                store.addToFile(Storage.file, taskers);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return tasking.printNumOfTasks();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(taskers);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Hmmm?? I\u0027m sorry but there are at most 31 days in a month! \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"And remember, no negative dates allowed as well!!! :)\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Deadline command with deadline task and date at which it is and adds"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * it into the arraylist and file."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param text Takes in a deadline command with the task and date."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException If the user inputs more than the normal"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     number of days/months/time, this error will be thrown out instead."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or cannot be opened for any other reason."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String deadlineCommand(String text) throws DukeException, IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num \u003d text.indexOf(\"/\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int num1 \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int dayDate \u003d Integer.parseInt(text.substring(num + 4, num + 6));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int monthDate \u003d Integer.parseInt(text.substring(num + 7, num + 9));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeHour \u003d Integer.parseInt(text.substring(num + 15, num + 17));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int timeMin \u003d Integer.parseInt(text.substring(num + 17));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (dayDate \u003e 0 \u0026\u0026 dayDate \u003c\u003d 31 \u0026\u0026 monthDate \u003e 0 \u0026\u0026 monthDate \u003c\u003d 12"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 timeHour \u003e 0 \u0026\u0026 timeHour \u003c\u003d 24 \u0026\u0026 timeMin \u003e\u003d 0 \u0026\u0026 timeMin \u003c\u003d 59) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Task task \u003d new Deadline(text.substring(num1, num - 1),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    text.substring(num + 4));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String taskers \u003d task.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (!taskers.equals(\"Invalid date format!\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                tasking.printGI();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(\"  \" + taskers);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                listOfTasks.add(task);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                store.addToFile(Storage.file, taskers);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return tasking.printNumOfTasks();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                Ui.printIndent();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new DukeException(taskers);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Ui.printIndent();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"Hmmm?? I\u0027m sorry but there are at most 31 days in a month! \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"And remember, no negative dates allowed as well!!! :)\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 170
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param description Takes in todo task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to get the string for Todo tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns the formatted string to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     be added into tasklist and file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"[T]\" + super.toString() + \" \" + description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 22
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected TaskList listTask \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    protected Storage store \u003d new Storage(Storage.file);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructor for Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return scan.nextLine();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints the greeting at the initiation of the chat bot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String logo \u003d \"     ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Prints out greeting of the chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"Hello! My name is \\n\" + logo + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    What can I do for you? \\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"I can only do these functions for now: \\n \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Todo \\n\" + \"        Eg. todo __(task)__\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Event \\n\" + \"        Eg. event __(task)__ /at _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Deadline \\n\" + \"        Eg. deadline __(task)__ /by _(dd/MM/yyyy)_(hhmm)__\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Delete \\n\" + \"        Eg. delete __(number)__ or delete all\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Done \\n\" + \"        Eg. done __(number)__\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    Find \\n\" + \"        Eg. find __(keyword)__\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"    List \\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"Ill be adding in more features soon! Please be patient! :)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Scans the input from the user and does the respective"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * command based on the input. Prints out error messages as well."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void nextCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        while (scan.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String text \u003d scan.nextLine().trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (text.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    Ui.printBye();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (text.equals(\"list\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    printList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (text.equals(\"delete all\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    listTask.deleteAllCommand(text);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else if (text.contains(\" \")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    String[] splittedText \u003d text.split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    if (splittedText[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        int num \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        int taskNumber \u003d Integer.parseInt(text.substring(num + 1, num + 2));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        if (taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d TaskList.listOfTasks.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            printDone(taskNumber);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! There is no such task \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                    + \"number in your list of tasks!! Please enter a valid number!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    } else if (splittedText[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        listTask.deleteCommand(text);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    } else if (splittedText[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        ArrayList\u003cString\u003e strList \u003d findCommand(splittedText[1]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        printKeywordList(strList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        if (splittedText[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            listTask.toDoCommand(text);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else if (splittedText[0].equals(\"deadline\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                \u0026\u0026 text.contains(\"/\") \u0026\u0026 text.contains(\"by\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            listTask.deadlineCommand(text);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else if (splittedText[0].equals(\"event\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                \u0026\u0026 text.contains(\"/\") \u0026\u0026 text.contains(\"at\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            listTask.eventCommand(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            printLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            printIndent();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            throw new DukeException(\"☹ OOPSY DAISY!!! Please follow the correct format! :\u003c\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    printLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    printIndent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    switch (text) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty. \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                + \"It must be in proper format (i.e. todo clean table).\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty. \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                + \"It must be in proper format (i.e. deadline return book /by 23 Aug).\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty. \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                + \"It must be in proper format (i.e. event Don\u0027s birthday /at 15 Jan 3pm).\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                printLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints indentation."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Helps to order the output, making it much neater."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void printIndent() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.print(\"    \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints line."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Helps to order the output and makes it"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * much neater."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void printLine() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"_____________________________\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + \"______________________________________\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Ends the chat bot."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    static String printBye() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //printLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Marks a task as done once the user has finished it."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param i To indicate which task number is done."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    static String printDone(int i) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        TaskList.listOfTasks.get(i - 1).markAsDone();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return TaskList.listOfTasks.get(i - 1).toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //printLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * To remove a task if it is not needed anymore."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param i Indicates the task number that is done."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String printDelete(int i) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return TaskList.listOfTasks.get(i - 1).toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //printLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints the list of tasks that has been added by the user."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws FileNotFoundException if there is no such file that contains the tasks."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    static String printList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (TaskList.listOfTasks.isEmpty()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"There is no tasks in your list currently!!!\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            File temp \u003d new File(Storage.file);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Scanner s \u003d new Scanner(temp);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int numbering \u003d 1;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                printIndent();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                System.out.println(numbering + \". \" + s.nextLine());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                numbering++;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //printLine();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Gets the number of task inside the file."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Number of tasks."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static int getNumOfTasks() throws IOException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Storage.countLines(Storage.file);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * When there is nothing in the file, this method"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * will print out to the user, telling them that there"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * is no previous tasks saved in the file."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"Nothing in file!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Method to find the keyword searched"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * by the user."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param wordToFind Keyword entered by user."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns an array list of tasks that contains the keyword."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IOException If the named file exists"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     but is a directory rather than a regular file,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     does not exist but cannot be created, or"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     cannot be opened for any other reason."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DukeException This will be thrown out if there"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     is no matching words to the key word searched"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *     by the user in all the tasks."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ArrayList\u003cString\u003e findCommand(String wordToFind) throws IOException, DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        File f \u003d new File(Storage.file);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArrayList\u003cString\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (Storage.countLines(Storage.file) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DukeException(\"No such word is found in any of the tasks.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            int num \u003d 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String text \u003d sc.nextLine();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (text.contains(wordToFind)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    String task \u003d num + \".\" + text;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    tempList.add(task);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    num++;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"5\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Prints the Start of the message that prints"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * out the list of tasks that matches the keyword"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * inputted by the user."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param list Prints out the array list of tasks"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *             that contains the keyword."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String printKeywordList(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printIndent();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list!\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (String str : list) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            printIndent();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            System.out.println(str);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 282
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void countLinesTest() throws IOException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(1, Storage.countLines(\"test.txt\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String file \u003d \"test1.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Storage store \u003d new Storage(file);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        store.addToFile(file, \"hello\\n yellow\\n mellow\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(3, Storage.countLines(\"test1.txt\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 19
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void formatDateTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(\"23rd of September 1997, 6:27 am\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new Task(\"deadline 2103T Project\").formatDate(\"23/09/1997 0627\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 11
    }
  },
  {
    "path": "src/test/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "test input"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 1
    }
  },
  {
    "path": "src/test/test1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "hello"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " yellow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " mellow"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 3
    }
  }
]
