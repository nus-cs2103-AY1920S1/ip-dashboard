[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    id \u0027idea\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.1\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 19,
      "-": 18
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.savedata.SaveFile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.Printer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.State;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.Response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Main for program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param args  command line arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printString(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // greet"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        State state \u003d new State(SaveFile.loadTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            while (!state.toExit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                for (Response r : Response.values()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    if (r.call(input, state)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (NoSuchElementException ignored) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.print(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 32,
      "-": 3
    }
  },
  {
    "path": "src/main/java/com/core/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.savedata.SaveFile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonArray;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.ReadWriteFiles;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.datetime.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.Printer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.DoableTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public enum Response {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    BYE(\"(?i)^bye\\\\s*\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printString(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        s.toExit \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    LIST(\"(?i)^list\\\\s*\", (j, s) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String finalString \u003d listIndexStreamToString(IntStream.range(0, s.list.size()).boxed(), s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printString(finalString.equalsIgnoreCase(\"\") ? \"You have no tasks\" : finalString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    FIND_BLANK(\"(?i)^find\\\\s*\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printString(\"Did not specify substring to find\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    FIND(\"(?i)^find .+\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String substr \u003d i.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String finalString \u003d listIndexStreamToString(IntStream.range(0,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                s.list.size()).boxed().filter((ti) -\u003e s.list.get(ti).getName().contains(substr)), s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printString(finalString.equalsIgnoreCase(\"\") ? \"No results\" : finalString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    DONE(\"(?i)^done [0-9]+\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int index \u003d getNumber(i) - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (checkValidIndex(index, s)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            s.list.get(index).markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Printer.printString(\"Nice! I\u0027ve marked this task as done:\\n  \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    + s.list.get(index).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            save(s);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    DELETE(\"(?i)^delete [0-9]+\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int index \u003d getNumber(i) - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (checkValidIndex(index, s)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Printer.printString(\"Noted! I\u0027ve removed this task:\\n  \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    + s.list.get(index).toString()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    + \"\\nNow you have \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    + (s.list.size() - 1)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    + \" tasks in the list.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            s.list.remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            save(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    TODO_NO_NAME(\"(?i)^todo\\\\s*\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError(\"The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    TODO(\"(?i)^todo .+\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        addTask(new Todo(i.split(\"todo \", 2)[1]), s);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    EVENT_NO_NAME(\"(?i)^event\\\\s*\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError(\"The description of an event cannot be empty\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    EVENT_NO_TIME(\"^(?i)event (((?!/at).)+$)|(.+ /at\\\\s*$)\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError(\"The date range of an event cannot be empty\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    EVENT(\"(?i)^event .+ /at \\\\d{1,2}/\\\\d{1,2}/\\\\d{4} \\\\d{4} to \\\\d{1,2}/\\\\d{1,2}/\\\\d{4} \\\\d{4}\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String[] parts \u003d splitTwoDelimiters(i, \"(?i)^event \", \"(?i)/at \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String[] dates \u003d parts[1].split(\" to \", 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        addTask(new Event(parts[0], DateTime.parseString(dates[0]),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                DateTime.parseString(dates[1])), s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    EVENT_WRONG_TIME(\"(?i)^event .+ /at .+\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \"The date range must be in the format \u0027DD/MM/YYYY HHMM to DD/MM/YYYY HHMM\u0027\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    DEADLINE_NO_NAME(\"(?i)^deadline\\\\s*\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError(\"The description of a deadline cannot be empty\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    DEADLINE_NO_TIME(\"(?i)^deadline (((?!/by).)+$)|(.+ /by\\\\s*$)\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError(\"The due date of a deadline cannot be empty\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    DEADLINE(\"(?i)^deadline .+ /by .+\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String[] parts \u003d splitTwoDelimiters(i, \"(?i)^deadline \", \"(?i)/by \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        addTask(new Deadline(parts[0], DateTime.parseString(parts[1])), s);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    DEADLINE_WRONG_TIME(\"(?i)^deadline .+ /by .+\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError(\"The date must be in the format \u0027DD/MM/YYYY HHMM\u0027\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    UNKNOWN(\".*\", (i, s) -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printError(\"I\u0027m sorry but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String regex;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ResponseFunc func;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    Response(String r, ResponseFunc f) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        regex \u003d r;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        func \u003d f;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a string and program state, if string matches regex this enum will call its response"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * function."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i input string"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param s state object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return boolean if the string has matched"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean call(String i, State s) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i.matches(regex)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return func.funcCall(i, s);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Assuming input is \".+ [0-9]+\", it splits at whitespace and returns an Integer of the second"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * part of the string."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return integer of second part of string"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static int getNumber(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return Integer.parseInt(input.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given an index and state object, check if index in bounds of list in state object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param index index to check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param s     state object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return False if out of bounds"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static boolean checkValidIndex(int index, State s) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (index \u003c 0 || index \u003e s.list.size() - 1) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Printer.printError(\"That is not a valid task index\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Assuming input is \"(head).*(mid).*\" returns the two texts between them."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param head  head regex match"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param mid   mid regex match"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return array of two text parts"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String[] splitTwoDelimiters(String input, String head, String mid) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String[] parts \u003d input.split(mid, 2);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        parts[0] \u003d parts[0].split(head)[1];"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return parts;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Insert task into list and prints message string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param t task to be added"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param s state object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static void addTask(DoableTask t, State s) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        s.list.add(t);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Printer.printString(\"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + t.toString()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \"\\nNow you have \" + s.list.size()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        save(s);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String listIndexStreamToString(Stream\u003cInteger\u003e indices, State s) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return indices.reduce(\"\", (acc, ti) -\u003e acc"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + ((acc.equalsIgnoreCase(\"\") ? \"\" : \"\\n\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + (ti + 1)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \".\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + s.list.get(ti).toString()), String::concat);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Save state to JsonFile."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param s state"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static void save(State s) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        SaveFile.write(s.list);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 207
    }
  },
  {
    "path": "src/main/java/com/core/ResponseFunc.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * Interface used by Enum to store references to lambdas."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public interface ResponseFunc {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Lambda\u0027s signature interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i input string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param s state object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    boolean funcCall(String i, State s);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 14
    }
  },
  {
    "path": "src/main/java/com/core/State.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.DoableTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " * An instance of the State class is a state of the running program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Flag to determine if program should terminate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean toExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * List of DoableTask."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public ArrayList\u003cDoableTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Initialize with a list of doableTasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param initialList   initial list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public State(ArrayList\u003cDoableTask\u003e initialList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        list \u003d initialList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public State() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 31
    }
  },
  {
    "path": "src/main/java/com/core/savedata/SaveFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.core.savedata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.DoableTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.Printer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.datetime.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonWrongValueTypeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.ReadWriteFiles;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class SaveFile {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static boolean isRootResolved \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final String SAVE_FILE \u003d \"./data/duke.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String root;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Determine root directory of the application, duke for project, directory containing jar"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * for jar files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static void resolveRoot() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        URL thisClassUrl \u003d SaveFile.class.getResource(\"SaveFile.class\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        switch (thisClassUrl.getProtocol()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        case \"file\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            root \u003d Paths.get(thisClassUrl.getPath()).resolve(\"../../../../../../../../\").normalize().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        case \"jar\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                root \u003d Paths.get(new File("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        SaveFile.class.getProtectionDomain().getCodeSource().getLocation().toURI())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        .getPath()).resolve(\"../\").normalize().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"jar is broken as unable to resolve path\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            root \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        isRootResolved \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a list of tasks, convert it to json and write to save file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param list  list of tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void write(ArrayList\u003cDoableTask\u003e list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!isRootResolved) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            resolveRoot();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (DoableTask t : list) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            arr.add(t.toJson());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        ReadWriteFiles.write(Paths.get(root).resolve(SAVE_FILE).normalize().toString(), arr.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Reads the save file and if successful parses into tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  list of tasks or empty if erroneous or file does not exist"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static ArrayList\u003cDoableTask\u003e loadTasks() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!isRootResolved) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            resolveRoot();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return parseJsonFile(ReadWriteFiles.read(Paths.get(root).resolve(SAVE_FILE).normalize().toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given save file\u0027s input string, generate list. Empty list if erroneous."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input json file string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return list"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static ArrayList\u003cDoableTask\u003e parseJsonFile(String input) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        ArrayList\u003cDoableTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                for (JsonValue obj : JsonParser.parseJsonString(input).getArray()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    DoableTask task;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    JsonValue attrObj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    if ((attrObj \u003d obj.getObject().get(Schema.TASK_TODO)) !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        task \u003d new Todo(attrObj.getObject().get(Schema.ATTR_NAME).getString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    } else if ((attrObj \u003d obj.getObject().get(Schema.TASK_EVENT)) !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        task \u003d new Event(attrObj.getObject().get(Schema.ATTR_NAME).getString(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                DateTime.parseString("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        attrObj.getObject().get(Schema.ATTR_EVENT_START)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                                .getString()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                DateTime.parseString(attrObj.getObject().get(Schema.ATTR_EVENT_END)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        .getString()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    } else if ((attrObj \u003d obj.getObject().get(Schema.TASK_DEADLINE)) !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        task \u003d new Deadline(attrObj.getObject().get(Schema.ATTR_NAME).getString(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                DateTime.parseString("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        attrObj.getObject().get(Schema.ATTR_DEADLINE_DUE)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                                .getString()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        Printer.printError(\"Unable to load tasks as file does not match schema\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    if (attrObj.getObject().get(Schema.ATTR_DONE).getBoolean()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        task.markAsDone();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonWrongValueTypeException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Printer.printError("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        \"Unable to load tasks as file does not match schema\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Printer.printError(\"Save File has errors\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 137
    }
  },
  {
    "path": "src/main/java/com/core/savedata/Schema.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.core.savedata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Schema {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TASK_TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TASK_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String TASK_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String ATTR_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String ATTR_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String ATTR_EVENT_START \u003d \"start\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String ATTR_EVENT_END \u003d \"end\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static final String ATTR_DEADLINE_DUE \u003d \"due\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/main/java/com/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.savedata.Schema;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.datetime.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Deadline extends DoableTask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The task\u0027s deadline datetime."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private DateTime deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Create DoableTask of this type with deadline string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param taskName name of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param cal      deadline string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Deadline(String taskName, DateTime cal) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        deadline \u003d cal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * get string representation of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + deadline.toString() + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject toJson() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonObject().put(Schema.TASK_DEADLINE, super.toJson()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                .put(Schema.ATTR_DEADLINE_DUE, deadline.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 39
    }
  },
  {
    "path": "src/main/java/com/tasks/DoableTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.savedata.Schema;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class DoableTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Flag denoting task is done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Create instance of Task with isDone flag."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param taskName name of task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public DoableTask(String taskName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Set isDone to true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get icon based on isDone status."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return icon string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * get string representation of task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject toJson() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.toJson().put(Schema.ATTR_DONE, isDone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 52
    }
  },
  {
    "path": "src/main/java/com/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.savedata.Schema;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.datetime.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Event extends DoableTask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The task\u0027s start range."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private DateTime startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The task\u0027s end range."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private DateTime endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Create DoableTask of this type with dateRange string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param taskName  name of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param start     start of date range"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param end       end of date range"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Event(String taskName, DateTime start, DateTime end) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        startDate \u003d start;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        endDate \u003d end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * get string representation of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + startDate.toString() + \" to \" + endDate.toString() +  \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject toJson() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonObject().put(Schema.TASK_EVENT, super.toJson()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                .put(Schema.ATTR_EVENT_START, startDate.toString())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                .put(Schema.ATTR_EVENT_END, endDate.toString()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 47
    }
  },
  {
    "path": "src/main/java/com/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.savedata.Schema;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Name of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Create a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param taskName name of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        name \u003d taskName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * get string representation of task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * get name string only."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  name string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns a JsonObject representation of this task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  JsonObject"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject toJson() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        obj.put(Schema.ATTR_NAME, name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 48
    }
  },
  {
    "path": "src/main/java/com/tasks/TaskTypes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public enum TaskTypes {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    TODO, EVENT, DEADLINE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 5
    }
  },
  {
    "path": "src/main/java/com/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.json.JsonObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.core.savedata.Schema;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Todo extends DoableTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Create DoableTask of this type."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param taskName name of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * get string representation of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject toJson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new JsonObject().put(Schema.TASK_TODO, super.toJson());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 30
    }
  },
  {
    "path": "src/main/java/com/util/Printer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class Printer {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The spacing after padding for each line of text."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final int MARGIN_LENGTH \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The spacing before the horizontal line begin."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final int PADDING_LENGTH \u003d 4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * The length the right most tip of the horizontal line will span."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final int HORIZONTAL_LINE_LENGTH \u003d 64;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Text to be inserted as indent (used by JSON printing)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final String INDENT \u003d repeatChar(4, \u0027 \u0027);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Text to be inserted before every line of text."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final String MARGIN_AND_PADDING \u003d repeatChar(MARGIN_LENGTH + PADDING_LENGTH,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            \u0027 \u0027);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Text to be inserted before the start of the first line and after the last line."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d repeatChar(PADDING_LENGTH, \u0027 \u0027)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            + repeatChar(HORIZONTAL_LINE_LENGTH - PADDING_LENGTH, \u0027_\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Displays duke logo."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void printDukeLogo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Print with error decorator prefixing the string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be printed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void printError(String str) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.print(formatString(\"☹ OOPS!!! \" + str));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Prints a string with formatting; border, margin and padding."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be printed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void printString(String str) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        System.out.print(formatString(str));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Surround a string with double quotes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be formatted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String surroundQuotes(String str) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\\\"\" + str + \"\\\"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Indent each line with INDENT string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be indented"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String indentString(String str) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return indentString(str, INDENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a specific indent string, append it before each line."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be indented"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param ind indent string"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return formatted string"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String indentString(String str, String ind) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (String s : str.split(\"\\n\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(ind);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(s);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(\"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return formattedString.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Builds a string with borders and margin and padding for each line."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str string to be formatted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting formatted string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String formatString(String str) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        formattedString.append(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        formattedString.append(indentString(str, MARGIN_AND_PADDING));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        formattedString.append(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        formattedString.append(\"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return formattedString.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Generates a string of repeated characters."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param length number of repetitions"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param c      character to be repeated"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting repeated character string"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static String repeatChar(int length, char c) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return String.valueOf(c).repeat(Math.max(0, length));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 127
    }
  },
  {
    "path": "src/main/java/com/util/datetime/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class DateTime extends GregorianCalendar {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct with date time attributes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param year      [0000 - 9999]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param month     [00 - 12]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param day       [00 - X]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param hour      [00 - 23]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param min       [00 - 59]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public DateTime(int year, int month, int day, int hour, int min) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(year, month, day, hour, min);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses input string and returns matching DateTime object if any."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str   input string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      DateTime object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static DateTime parseString(String str) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String[] dateTimeStrings \u003d str.trim().split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        String[] dateStrings \u003d dateTimeStrings[0].split(\"/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int day \u003d Integer.parseInt(dateStrings[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int month \u003d Integer.parseInt(dateStrings[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int year \u003d Integer.parseInt(dateStrings[2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int hour \u003d Integer.parseInt(dateTimeStrings[1].substring(0, 2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        int min \u003d Integer.parseInt(dateTimeStrings[1].substring(2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new DateTime(year, month, day, hour, min);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return get(Calendar.DAY_OF_MONTH) + \"/\" + get(Calendar.MONTH) + \"/\" + get(Calendar.YEAR)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                + \" \" + String.format(\"%tR\", this).replaceAll(\":\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 41
    }
  },
  {
    "path": "src/main/java/com/util/json/JsonArray.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonArray extends ArrayList\u003cJsonValue\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(int value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(double value) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(boolean value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(String value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(JsonObject value) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean add(JsonArray value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.add(new JsonValue(value));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, int value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, double value) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, boolean value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, String value) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, JsonObject value) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public void add(int index, JsonArray value) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.add(index, new JsonValue(value));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns string representation of JsonArray."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean empty \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (JsonValue entry : this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!empty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                formattedString.append(\",\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                empty \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(entry.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"[\\n\" + Printer.indentString(formattedString.toString()) + \"]\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 73
    }
  },
  {
    "path": "src/main/java/com/util/json/JsonFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * 1 - failed due to content of file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * 2 - failed due to wrong prediction of value data type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int errorCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception without message and default errorCode."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with message and errorCode."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param err   errorCode"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(String msg, Integer err) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d err;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Construct the exception with message and default errorCode."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param msg   message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonFormatException(String msg) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        errorCode \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Get error code of object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  errorCode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public int getErrorCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return errorCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 45
    }
  },
  {
    "path": "src/main/java/com/util/json/JsonObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.Printer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonObject extends HashMap\u003cString,JsonValue\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue put(String key, int value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, double value) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, boolean value) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, String value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, JsonObject value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject put(String key, JsonArray value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super.put(key, new JsonValue(value));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Returns string representation of JsonObject."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return  string representation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder formattedString \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean empty \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        for (HashMap.Entry\u003cString, JsonValue\u003e entry : entrySet()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                formattedString.append(\",\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                empty \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String key \u003d JsonParser.formatStringForJson(entry.getKey());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String value \u003d entry.getValue().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            formattedString.append(key).append(\": \").append(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"{\\n\" + Printer.indentString(formattedString.toString()) + \"}\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 56
    }
  },
  {
    "path": "src/main/java/com/util/json/JsonParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static JsonValue parseJsonString(String input) throws JsonFormatException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return processDynamicValue(input.toCharArray(), 0).snd;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json value, which can be of type specified in ValueTypes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * enum."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and DynamicValue; algebraic sum type of all possible ValueTypes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static Pair\u003cInteger,JsonValue\u003e processDynamicValue(char[] input, int i)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        Pair\u003cInteger,JsonValue\u003e obj;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger,Integer\u003e res1 \u003d parseJsonInt(input, i);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            obj \u003d new Pair\u003c\u003e(res1.fst, new JsonValue(res1.snd));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonFormatException e1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Pair\u003cInteger,Double\u003e res2 \u003d parseJsonDouble(input, i);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                obj \u003d new Pair\u003c\u003e(res2.fst, new JsonValue(res2.snd));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonFormatException e2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    Pair\u003cInteger,Boolean\u003e res3 \u003d parseJsonBoolean(input, i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    obj \u003d new Pair\u003c\u003e(res3.fst, new JsonValue(res3.snd));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } catch (JsonFormatException e3) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        Pair\u003cInteger,String\u003e res4 \u003d parseJsonString(input, i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        obj \u003d new Pair\u003c\u003e(res4.fst, new JsonValue(res4.snd));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    } catch (JsonFormatException e4) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            Pair\u003cInteger,JsonObject\u003e res5 \u003d parseJsonObject(input,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            obj \u003d new Pair\u003c\u003e(res5.fst, new JsonValue(res5.snd));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        } catch (JsonFormatException e5) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                Pair\u003cInteger,JsonArray\u003e res6 \u003d parseJsonArray(input,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                obj \u003d new Pair\u003c\u003e(res6.fst, new JsonValue(res6.snd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            } catch (JsonFormatException e6) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                if (e3.getErrorCode() \u003d\u003d 2 \u0026\u0026 e4.getErrorCode() \u003d\u003d 2"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        \u0026\u0026 e5.getErrorCode() \u003d\u003d 2 \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw new JsonFormatException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                            \"input at \" + i + \" is of unknown format\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e4.getErrorCode() \u003d\u003d 2 \u0026\u0026 e5.getErrorCode() \u003d\u003d 2"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                        \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e3;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e5.getErrorCode() \u003d\u003d 2 \u0026\u0026 e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e4;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else if (e6.getErrorCode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                    throw e6;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json array."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and array"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger,JsonArray\u003e parseJsonArray(char[] input, int i)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonArray arr \u003d new JsonArray();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027[\u0027) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(\"Expecting [ at \" + i, 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027[\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(\"Empty array did not close\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // search first value"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (input[i] !\u003d \u0027]\u0027) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] !\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    throw new JsonFormatException(\"Value pairs must be comma separated\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // advance \u0027,\u0027 between value pairs"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger,JsonValue\u003e valuePair \u003d processDynamicValue(input, i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, valuePair.fst);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            arr.add(valuePair.snd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse value"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // process key value pairs"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length || input[i] !\u003d \u0027]\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(\"Array did not close\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027]\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i + 1, arr);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a json object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and object / key value pairs HashMap"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger,JsonObject\u003e parseJsonObject(char[] input, int i)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        JsonObject obj \u003d new JsonObject();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027{\u0027) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(\"Expecting { at \" + i, 2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027{\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(\"Empty object did not close\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // search first key"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean isFirst \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (input[i] !\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (!isFirst) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] !\u003d \u0027,\u0027) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    throw new JsonFormatException(\"Key value pairs must be comma separated\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // advance \u0027,\u0027 between key value pairs"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            String key;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                Pair\u003cInteger,String\u003e keyPair \u003d parseJsonString(input, i);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i \u003d keyPair.fst;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                key \u003d keyPair.snd;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (JsonFormatException ignored) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(\"Object keys must be strings at \" + i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse key"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] !\u003d \u0027:\u0027) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(\"Expected : after key name at \" + i);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, i + 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // find \u0027:\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            Pair\u003cInteger,JsonValue\u003e valuePair \u003d processDynamicValue(input, i);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i \u003d skipWhiteSpace(input, valuePair.fst);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            obj.put(key, valuePair.snd);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            // parse value"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length || input[i] !\u003d \u0027}\u0027) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(\"Object did not close\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        // find \u0027}\u0027"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i + 1, obj);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as an int."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and int"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger,Integer\u003e parseJsonInt(char[] input, int i)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 Character.isDigit(input[i]) || input[i] \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value.append(input[i]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (value.length() \u003e 0 \u0026\u0026 checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Pair\u003c\u003e(i, Integer.parseInt(value.toString()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(\"String ending at \" + i + \" is not an Integer\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        throw new JsonFormatException("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \"Expected Integer but encountered something else at \" + i);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a double."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and double"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger,Double\u003e parseJsonDouble(char[] input, int i)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 Character.isDigit(input[i]) || input[i] \u003d\u003d \u0027e\u0027 || input[i] \u003d\u003d \u0027.\u0027"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                || input[i] \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value.append(input[i]);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (value.length() \u003e 0 \u0026\u0026 checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return new Pair\u003c\u003e(i, Double.parseDouble(value.toString()));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (NumberFormatException ignored) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                throw new JsonFormatException(\"String ending at \" + i + \" is not a Double\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        throw new JsonFormatException(\"Expected Double but encountered something else at \" + i);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a boolean."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and boolean"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger,Boolean\u003e parseJsonBoolean(char[] input, int i)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean value;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027t\u0027 \u0026\u0026 input[i] !\u003d \u0027f\u0027) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException("
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    \"Expected Boolean but encountered something else at \" + i, 2);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i + 3 \u003c input.length \u0026\u0026 input[i] \u003d\u003d \u0027t\u0027 \u0026\u0026 input[i + 1] \u003d\u003d \u0027r\u0027"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \u0026\u0026 input[i + 2] \u003d\u003d \u0027u\u0027 \u0026\u0026 input[i + 3] \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value \u003d true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i +\u003d 4;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else if (i + 4 \u003c input.length \u0026\u0026 input[i] \u003d\u003d \u0027f\u0027 \u0026\u0026 input[i + 1] \u003d\u003d \u0027a\u0027"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                \u0026\u0026 input[i + 2] \u003d\u003d \u0027l\u0027 \u0026\u0026 input[i + 3] \u003d\u003d \u0027s\u0027 \u0026\u0026 input[i + 4] \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            value \u003d false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i +\u003d 5;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    \"Expected Boolean but encountered something else at \" + i);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException("
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    \"Expected Boolean but encountered something else at \" + i);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i, value);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Parses from input[i] onwards as a string with double quotes surround. Escaped double quotes"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * are also replaced with regular double quotes"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index and string"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws JsonFormatException file format error"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static Pair\u003cInteger,String\u003e parseJsonString(char[] input, int i)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throws JsonFormatException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        boolean escape \u003d false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i \u003d skipWhiteSpace(input, i);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (input[i] !\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException("
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    \"Expected starting double quotes for string but encountered something else at \""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                            + i, 2);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        i++;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            if (input[i] \u003d\u003d \u0027\"\u0027 \u0026\u0026 !escape) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else if (input[i] \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 !escape) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                escape \u003d true;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else if (escape) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                if (input[i] \u003d\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(input[i]);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } else if (input[i] \u003d\u003d \u0027n\u0027) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(\u0027\\\\\u0027);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    value.append(input[i]);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                escape \u003d false;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                value.append(input[i]);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (i \u003e\u003d input.length) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException(\"String did not terminate with double quotes\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (!checkIfLegalAfterValue(input[i])) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonFormatException("
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    \"Expected string but encountered something else at \" + i);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return new Pair\u003c\u003e(i, value.toString());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Check if character is a legal possibility after non object, array values."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param c character to test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return True if legal"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static boolean checkIfLegalAfterValue(char c) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return Character.isWhitespace(c) || c \u003d\u003d \u0027,\u0027 || c \u003d\u003d \u0027]\u0027 || c \u003d\u003d \u0027}\u0027 || c \u003d\u003d \u0027:\u0027;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Skip whitespace input[i] onwards till non whitespace encountered."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param input input character array"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param i     index to start parsing"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return resulting index"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private static int skipWhiteSpace(char[] input, int i) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        while (i \u003c input.length \u0026\u0026 Character.isWhitespace(input[i])) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Replace instances of \" and n as escape characters for formatting as json string."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param str   string to format"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      formatted string"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String formatStringForJson(String str) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return str.replaceAll(\"\\\"\", \"\\\\\\\\\\\"\").replaceAll(\"\\n\", \"\\\\\\\\\\n\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 359
    }
  },
  {
    "path": "src/main/java/com/util/json/JsonValue.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonValue {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private ValueTypes type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private int valueInt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private double valueDouble;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private boolean valueBoolean;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private String valueString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonObject valueObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    private JsonArray valueArray;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(int value) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d ValueTypes.INT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueInt \u003d value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(double value) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d ValueTypes.DOUBLE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueDouble \u003d value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(boolean value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d ValueTypes.BOOLEAN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueBoolean \u003d value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(String value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d ValueTypes.STRING;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueString \u003d value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(JsonObject value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d ValueTypes.OBJECT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueObject \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonValue(JsonArray value) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        type \u003d ValueTypes.ARRAY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        valueArray \u003d value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public ValueTypes getType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public int getInt() throws JsonWrongValueTypeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d ValueTypes.INT) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueTypeException(ValueTypes.INT, type);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueInt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public double getDouble() throws JsonWrongValueTypeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d ValueTypes.DOUBLE) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueTypeException(ValueTypes.DOUBLE, type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueDouble;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public boolean getBoolean() throws JsonWrongValueTypeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d ValueTypes.BOOLEAN) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueTypeException(ValueTypes.BOOLEAN, type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueBoolean;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String getString() throws JsonWrongValueTypeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d ValueTypes.STRING) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueTypeException(ValueTypes.STRING, type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonObject getObject() throws JsonWrongValueTypeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d ValueTypes.OBJECT) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueTypeException(ValueTypes.OBJECT, type);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueObject;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public JsonArray getArray() throws JsonWrongValueTypeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (type !\u003d ValueTypes.ARRAY) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            throw new JsonWrongValueTypeException(ValueTypes.ARRAY, type);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return valueArray;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case INT:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Integer.toString(getInt());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case DOUBLE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Double.toString(getDouble());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case BOOLEAN:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return Boolean.toString(getBoolean());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case STRING:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return JsonParser.formatStringForJson(getString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case OBJECT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return getObject().toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            case ARRAY:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return getArray().toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.out.println(\"ERROR: unexpected json value type \" + type);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (JsonWrongValueTypeException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.out.println(\"ERROR: json value type does not match value its holding\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.exit(-1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 115
    }
  },
  {
    "path": "src/main/java/com/util/json/JsonWrongValueTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class JsonWrongValueTypeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    JsonWrongValueTypeException(ValueTypes expected, ValueTypes got) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        super(\"Expecting \" + expected + \", however got \" + got);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 7
    }
  },
  {
    "path": "src/main/java/com/util/json/Pair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "class Pair\u003cInteger, Object\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Integer fst;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Object snd;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public Pair(Integer a, Object b) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        fst \u003d a;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        snd \u003d b;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 12
    }
  },
  {
    "path": "src/main/java/com/util/json/ReadWriteFiles.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class ReadWriteFiles {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path and content, makes directories if don\u0027t exist then writes the file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path    path to file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param content content to write"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static void write(String path, String content) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            bw.write(content);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            System.exit(-1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * Given a path, attempts to read contents of file and return it as string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @param path  path to file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @return      file content string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     * @throws FileNotFoundException    file does not exist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    public static String read(String path) throws FileNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            FileReader fr \u003d new FileReader(file.getAbsoluteFile());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                boolean empty \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    if (!empty) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    sb.append(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                    empty \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 67
    }
  },
  {
    "path": "src/main/java/com/util/json/ValueTypes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "package com.util.json;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public enum ValueTypes {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    INT, DOUBLE, BOOLEAN, STRING, OBJECT, ARRAY"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 5
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "import com.util.Printer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testPrinterSurroundQuotes() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"\\\"hi\\\"\", Printer.surroundQuotes(\"hi\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    void testPrinterIndentString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "        assertEquals(\"    hi\\n\", Printer.indentString(\"hi\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 17
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [T][✘] read book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [T][✘] join sports club"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [T][✓] read book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [T][✓] join sports club"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [T][✘] borrow book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     1.[T][✓] read book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     4.[T][✓] join sports club"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     5.[T][✘] borrow book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "       [E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AHaliq": 69
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 11
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "#if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "#then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "#    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "#    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "#fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "#java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "java -jar ../build/libs/duke-0.1.3.jar \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AHaliq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AHaliq"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "AHaliq": 35
    }
  }
]
