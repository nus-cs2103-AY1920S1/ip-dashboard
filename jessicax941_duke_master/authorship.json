[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Deadline task with the associated description and deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Describes the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param deadline The deadline that the task is due by."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Deadline(String desc, String deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.deadline \u003d stringToDateTime(deadline);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Deadline(String desc, boolean isDone, String deadline) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.deadline \u003d stringToDateTime(deadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDeadline(String deadline) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.deadline \u003d stringToDateTime(deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime stringToDateTime(String deadline) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format(\"[%s][%s] %s (by: %s)\", \"D\", super.getDoneSymbol(), this.desc, this.deadline.format(formatter));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 45
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javax.swing.plaf.metal.MetalIconFactory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents Duke, a personal chatbot assistant."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    //private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ui.hello();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ui.takeInUserInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        return this.list;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void setList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.list \u003d list;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Duke duke \u003d new Duke(\"src/main/java/tasklists.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        duke.hello();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            duke.readFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        //take in user input and print according to user command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            String command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            command \u003d command.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            if (command.equals(\"bye\")) { // user wants to exit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                duke.printExitMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                return; // program terminates"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    duke.execCommand(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    System.out.println(\"\\t\" + e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints out all the tasks in a numbered list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void printList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        for (int i \u003d 0; i \u003c this.list.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            System.out.println(String.format(\"\\t%d.%s\", i + 1, this.list.get(i)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints hello message."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void hello() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        //System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String openingMessage \u003d \"\\tHello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                + \"\\tWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(openingMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Executes the command given by the user. "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command The command input by the user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws InvalidCommandException This exception is thrown when the command is invalid or not recognisable."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void execCommand(String command) throws InvalidCommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String[] commandStringArray \u003d command.trim().split(\" \"); //split by words"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String firstWord \u003d commandStringArray[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            printList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } else if (firstWord.equals(\"done\") \u0026\u0026 commandStringArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            // when the command is done and followed by task number"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            int taskNo \u003d Integer.parseInt(commandStringArray[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            markTaskAsDone(taskNo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } else if (firstWord.equals(\"todo\") || firstWord.equals(\"deadline\") || firstWord.equals(\"event\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            // check if the taskType is a valid command before adding the task to the tasks list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                addTask(command, firstWord);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            } catch (MissingDescriptionException | MissingInputException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                // taskType is valid but missing arguments"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                System.out.println(\"\\t\" + e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } else if (firstWord.equals(\"delete\") \u0026\u0026 commandStringArray.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            // when the command is delete and is followed by task number"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            int taskNo \u003d Integer.parseInt(commandStringArray[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            deleteTask(taskNo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            // taskType is not a valid command, throw IllegalArgumentException"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new InvalidCommandException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Marks a task as done (completed)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskNo The position of the task in the list that is printed out"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *               (not the index of the task in the stored ArrayList)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void markTaskAsDone(int taskNo) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Task taskDone \u003d this.list.get(taskNo - 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        taskDone.markAsDone();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\\n\\t\\t\" + taskDone.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds a task to the tasks list according to the user\u0027s command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command The command that was input by the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskType The type of the task that the user wants to add to the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingDescriptionException This exception is thrown when the type of the task is valid but its"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * description is not to be found."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingInputException This exception is thrown when a certain type of input is not found,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * namely, the deadline of a Deadline task, and the event time/day for an Event task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void addTask(String command, String taskType) throws MissingDescriptionException, MissingInputException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String desc \u003d command.substring(taskType.length()).trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Task task \u003d new Task();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        if (desc.isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            throw new MissingDescriptionException(\"☹ OOPS!!! The description of \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        switch (taskType) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        case (\"todo\"):"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                task \u003d new Todo(desc);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        case (\"deadline\"):"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                if (!desc.contains(\"/by\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    throw new MissingInputException(\"☹ OOPS!!! The deadline cannot be found because /by is missing\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                String[] splitDeadlineDesc \u003d desc.split(\"/by\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                desc \u003d splitDeadlineDesc[0].trim(); // first element in string array is solely the task description"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                // second element in string array is the deadline of the task, unless it is not found"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                String deadline;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    deadline \u003d splitDeadlineDesc[1].trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    // above exception will be thrown when the splitDeadlineDesc only has one element"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    // this means that there is nothing after /by"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    throw new MissingInputException(\"☹ OOPS!!! The deadline cannot be found after /by\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                task \u003d new Deadline(desc, deadline);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        case (\"event\"):"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                if (!desc.contains(\"/at\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    throw new MissingInputException(\"☹ OOPS!!! The event date and time cannot be found because /at is missing\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                String[] splitEventDesc \u003d desc.split(\"/at\"); // first element is simply the string description"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                // second element would be the event time/day, unless it is not found"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                desc \u003d splitEventDesc[0].trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                String when;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    when \u003d splitEventDesc[1].trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    // above exception will be thrown when the splitEventDesc only has one element"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    // this means that there is nothing after /at"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                    throw new MissingInputException(\"☹ OOPS!!! The event date and time cannot be found after /at\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                task \u003d new Event(desc, when);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        default:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        this.list.add(task);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        printAddedTask(task);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints the necessary lines when a task is added to the tasks list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task The task that is being added to the tasks list."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void printAddedTask(Task task) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(\"\\tGot it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", this.list.size()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Deletes a task from the tasks list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskNo The position of the task in the list when it is printed out"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *               (not the index of the task in the stored ArrayList)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void deleteTask(int taskNo) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Task removedTask \u003d this.list.remove(taskNo - 1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(\"\\t  \" + removedTask.toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", this.list.size()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void printExitMessage() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        System.out.println(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    private void readFile(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            String line \u003d sc.nextLine(); // eg. T|0|read book"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            String[] taskDetails \u003d line.split(\",\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            String taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            int booleanInt \u003d Integer.parseInt(taskDetails[1]);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            switch (taskType) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            case \"T\":"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                Todo todo \u003d new Todo(taskDetails[2], booleanInt \u003d\u003d 0);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                this.list.add(todo);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            case \"D\":"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                Deadline deadline \u003d new Deadline(taskDetails[2], booleanInt \u003d\u003d 0, taskDetails[3]);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                this.list.add(deadline);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            case \"E\":"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                Event event \u003d new Event(taskDetails[2], booleanInt \u003d\u003d 0, taskDetails[3]);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                this.list.add(event);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//                break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 246,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class to represent exceptions specific to Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime when;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates an Event task with the associated description and event day and time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Describes the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param when The event day and event time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Event(String desc, String when) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d stringToDateTime(when);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Event(String desc, boolean isDone, String when) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d stringToDateTime(when);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public LocalDateTime getWhen() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.when;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setWhen(String when) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d stringToDateTime(when);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime stringToDateTime(String when) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return LocalDateTime.parse(when, formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format(\"[%s][%s] %s (at: %s)\", \"E\", super.getDoneSymbol(), this.desc, this.when.format(formatter));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 44
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public InvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 7
    }
  },
  {
    "path": "src/main/java/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when a task is missing its description."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public MissingDescriptionException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 11
    }
  },
  {
    "path": "src/main/java/MissingInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when there are missing inputs such as the deadline or event time/day."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MissingInputException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public MissingInputException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 11
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void executeCommand(String command) throws InvalidCommandException, MissingInputException,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            MissingDescriptionException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String[] commandWords \u003d command.trim().split(\" \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String commandType \u003d commandWords[0];"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                taskList.printList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                taskList.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                int taskNumber2 \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                taskList.deleteTask(taskNumber2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                addTask(command, commandType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                ui.exit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new InvalidCommandException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void addTask(String command, String taskType) throws MissingDescriptionException, MissingInputException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String desc \u003d command.substring(taskType.length()).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task task \u003d new Task();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (desc.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingDescriptionException(\"☹ OOPS!!! The description of \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case (\"todo\"):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                task \u003d new Todo(desc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case (\"deadline\"):"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                if (!desc.contains(\"/by\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    throw new MissingInputException(\"☹ OOPS!!! The deadline cannot be found because /by is missing\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String[] splitDeadlineDesc \u003d desc.split(\"/by\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                desc \u003d splitDeadlineDesc[0].trim(); // first element in string array is solely the task description"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // second element in string array is the deadline of the task, unless it is not found"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String deadline;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    deadline \u003d splitDeadlineDesc[1].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    // above exception will be thrown when the splitDeadlineDesc only has one element"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    // this means that there is nothing after /by"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    throw new MissingInputException(\"☹ OOPS!!! The deadline cannot be found after /by\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                task \u003d new Deadline(desc, deadline);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case (\"event\"):"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                if (!desc.contains(\"/at\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    throw new MissingInputException(\"☹ OOPS!!! The event date and time cannot be found because /at is missing\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String[] splitEventDesc \u003d desc.split(\"/at\"); // first element is simply the string description"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // second element would be the event time/day, unless it is not found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                desc \u003d splitEventDesc[0].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                String when;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    when \u003d splitEventDesc[1].trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    // above exception will be thrown when the splitEventDesc only has one element"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    // this means that there is nothing after /at"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    throw new MissingInputException(\"☹ OOPS!!! The event date and time cannot be found after /at\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                task \u003d new Event(desc, when);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 89
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Storage() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Storage.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String line \u003d sc.nextLine(); // eg. T,0,read book"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String[] taskDetails \u003d line.split(\",\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            int booleanInt \u003d Integer.parseInt(taskDetails[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Todo todo \u003d new Todo(taskDetails[2], booleanInt \u003d\u003d 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(todo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Deadline deadline \u003d new Deadline(taskDetails[2], booleanInt \u003d\u003d 0, taskDetails[3]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(deadline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Event event \u003d new Event(taskDetails[2], booleanInt \u003d\u003d 0, taskDetails[3]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    public void addTaskToFile(Task task, String taskType) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        String taskToAppend;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        if (taskType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            taskToAppend \u003d \"T,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            taskToAppend \u003d \"D,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc() + \",\" + ((Deadline)task).getDeadline();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            // task is event type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//            taskToAppend \u003d \"E,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc() + \",\" + ((Event)task).getWhen();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        fw.write(taskToAppend);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//        fw.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void overwriteTasks() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                fileContent +\u003d \"T,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                fileContent +\u003d \"D,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc() + \",\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        + ((Deadline)task).getDeadline().format(formatter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                fileContent +\u003d \"E,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc() + \",\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        + ((Event)task).getWhen().format(formatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fileContent +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        fw.write(fileContent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 85
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Task in the list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String doneSymbol;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.desc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setTask(String desc) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String getDoneSymbol() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.isDone ? \"✓\" : \"x\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected void setDoneSymbol() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.doneSymbol \u003d isDone ? \"✓\" : \"x\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Marks a task as done, and changes the doneSymbol to a check mark."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected void markAsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 52
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList.taskList \u003d taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        printAddedTask(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void markAsDone(int taskNo) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task taskDone \u003d taskList.get(taskNo - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskDone.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\\n\\t\\t\" + taskDone.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskList.remove(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        printDeletedTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task task \u003d taskList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        printDeletedTask(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void printAddedTask(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void printDeletedTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            System.out.println(String.format(\"\\t%d.%s\", i + 1, taskList.get(i)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 62
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Todo with the associated description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Describes the Todo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Todo(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format(\"[%s][%s] %s\", \"T\", super.getDoneSymbol(), this.desc);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 23
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String openingMessage \u003d \"\\tHello! I\u0027m Duke\\n\\tWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(openingMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void takeInUserInput() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            command \u003d command.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                parser.executeCommand(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } catch (InvalidCommandException | MissingInputException | MissingDescriptionException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            storage.overwriteTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 40
    }
  }
]
