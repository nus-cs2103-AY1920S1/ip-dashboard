[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "seedu.duke.model.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for seedu.duke.model.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "whneo97": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "javadoc {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    source +\u003d sourceSets.main.allJava"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    classpath +\u003d configurations.compile"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    archiveVersion \u003d \"0.2.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "run{"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "// Change this to your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Launcher\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "whneo97": 54
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "E | 1 | concert | 21/02/2019 1500-1700"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": "E | 0 | football match | 20/09/2019 2300-0100"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "D | 1 | submit report | 25/09/2019"
      }
    ],
    "authorContributionMap": {
      "whneo97": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Adding Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to add three different types of tasks to the tasklist including tasks of Todo, Deadline and Event type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* Todo: Task that have no date required to be associated with it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* Deadline: Task with a deadline associated with it (may either be a date or both date and time)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* Event: Task that has a date, start time and end time associated with it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "All tasks have an attribute that allows users to view and modify whether it has been completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Listing Tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to list all tasks that have been added to the tasklist. Always shows tasks in order of chronology (date added) until they have been sorted in order of other fields by the user. All tasks in the list are automatically saved into a \u0027data\u0027 folder in the same directory where the Duke program is opened. (this folder will be created if it does not exist.)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Loading Saved Tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "A newly opened session of the Duke program will load tasks that have been saved in the \u0027data\u0027 folder specified under the \u0027Listing Tasks\u0027 feature described above."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Restoration of Deleted Data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "If the data file or folder containing the data file has been deleted halfway through the execution of the program, the program automatically restores the file open the next operation executed (and performs that operation)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Marking Tasks to be Done / Undone"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to mark a tasks or groups of tasks to be completed, or yet to be completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Deleting Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to delete tasks from the tasklist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Finding Tasks using Keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to find tasks using keywords (including type of task, task description, date / time and state of whether task is done / undone)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Sorting Tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to sort tasks by alphabetical order of task type, done state, alphabetical order of task description and chronological order of date / time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Undo and Redo Features"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to revert a list back to a newer or older state. The number of versions to be reverted may be specified by the user. The version of tasklist that has been reverted to will automatically be saved into the tasklist. All versions of tasklists in the session will exist until the user clears the program\u0027s cache or until the program exits."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Clearing of Cache"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to clear the timeline containing the list of tasks, deleting all versions of tasks stored in the timeline, except for the current active version of the tasklist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Generation of Random Tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Allows users to randomly generate a list of tasks for demonstration, examples and testing purposes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Showing of Help"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Users may view the description and usage of any command or group of commands, or view the full list of commands by simply keying in \"help\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Display of Software and Developer Information"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Users may view information about the developer and software by keying in \"about\". Credits to users for external sources of photos labeled to be free for use are also displayed here."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Data Validation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "This Duke program automatically validates input, requiring them to be in the format specified. Precision of validation is such that it checks for the number of days in the month - even for leap years! An error message is displayed to the user in the event that the input data is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### Cross-Platform Compatibility"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "This Duke program is designed to work for Mac, Windows and Linux OS. Presently, the font family feature is known to work best on Mac OS, although the main font used has been selected such that any visible differences when using the program on platforms other than Mac OS are minute and may not be significantly noticeable. This small variation in the display of fonts does not affect the main functionalities of the program, which appears to work homogenously well across different platforms. In the most recent version of this Duke program, the Duke logo has also become completely unaffected, as the implementation now uses an image to the display the logo rather than text."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `about` - Shows information about the developer and this Duke program."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Program displays the developer\u0027s photo and a short message from the developer, followed by brief details of the software, as well as credit for photos labeled free for use that have been used in this Duke program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `about`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`about`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Hi! I\u0027m Weihong, developer for this implementation of Duke - a task-managing chatbot designed at NUS for educational purposes, with details as follows!"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Product Name: Duke"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Version: V2.2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Category: Personal Assistant Chatbot"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Software Requirements: Java 11; Mac / Linux / Windows OS"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Developer: Neo Weihong"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "This product is free for non-commercial use and its code is publicly available open-source via: https://github.com/whneo97/duke."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Space background by Andy Holmes (https://unsplash.com/photos/LUpDjlJv4_c)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "User profile icon by Smashicons (https://www.flaticon.com/authors/smashicons)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Duke profile icon by Freepik (https://www.flaticon.com/authors/freepik)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Hope you\u0027ll enjoy trying out this simple program!"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `bye` - Instructs the program to exit."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Program displays a goodbye message and waits for 0.9 seconds (for user to read the message) before closing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `bye`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`Bye. Hope to see you again soon!`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `clearcache` - allows user to clear all stored versions of the tasklist except for the current active version."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Removes all versions of task lists in the timeline used for undo and redo operations, except for the current version. Since this operation cannot be under, after the user\u0027s command, the program will prompt for user to confirm by keying in \u0027CoNfiRMtOclEaR\u0027 before proceeding. This operation may be useful if the size of the timeline happens to get too large and slows down other operational procedures. The key will not be recognised on it\u0027s own without first  entering \u0027clearcache\u0027. The process is aborted if input right after \u0027clearcache\u0027 does not match the required key and the user will have to enter \u0027clearcache\u0027 again if he/ she intends to re-initiate the process."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `clearcache`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`clearcache`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "WARNING: THIS ACTION CANNOT BE UNDONE. Once executed, all versions other than the current version of the tasklist will be deleted and the undo / redo command will no longer be able to retrieve them even within this same session."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "To confirm clearing of cache, type \"CoNfiRMtOclEaR\" with the same lettering cases. Otherwise, input any other character or string of text to cancel this operation."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "User confirmation:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`CoNfiRMtOclEaR`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`All versions of task lists in the undo / redo timeline except for the current task has been removed as requested.`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `deadline` - Adds a deadline into the tasklist."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Adds a deadline into the tasklist, and displays a confirmation message to the user if addition of the deadline into the tasklist is successful, with the new number of tasks in the tasklist."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `deadline [task] /by [DD/MM/YYYY]`, or `deadline [task] /by [DD/MM/YYYY] [HHMM]`, where dates and times (24-hour clock) are valid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`deadline submit presentation slides /by 23/12/2019`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  [D][ ] submit presentation slides (by: 23/12/2019)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `delete` - Deletes a task or multiple tasks from the tasklist."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Deletes a task or groups of tasks from the tasklist, and displays a confirmation message to the user if deletion of the task from the tasklist is successful, with the new number of tasks in the tasklist."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `delete [number representing task in tasklist]` or "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`delete [range1, range2, range3, ...]` or `delete all` to remove all tasks."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`delete 6-7, 1`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Noted. I\u0027ve removed these tasks:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1.[D][ ] submit report on buying and selling (by: 20/09/2019 2359)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "2.[T][ ] buy chocolate"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "3.[T][ ] buy milk"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `done` - Marks a task or multiple tasks from the tasklist to be completed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Marks a task or groups of tasks from the tasklist to be done, and displays a confirmation message to the user if marking of the task as done in the tasklist is successful."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `done [number representing task in tasklist]` or "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`done [range1, range2, range3, ...]` or `done all` to mark all tasks as done."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`done 2, 4-5`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Nice! I\u0027ve marked these tasks as done:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1.[E][+] concert (at: 21/02/2019 1500-1700)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "2.[D][+] submit report (by: 25/09/2019)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "3.[E][+] annual concert (at: 25/02/2020 2030-2230)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `event` - Adds an event into the tasklist."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Adds an event into the tasklist, and displays a confirmation message to the user if addition of the event into the tasklist is successful, with the new number of tasks in the tasklist."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `event [task] /at [DD/MM/YYYY] [HHMM]`, where dates and times (24-hour clock) are valid."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`event annual concert /at 21/02/2020 1930-2100`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  [E][ ] annual concert (at: 25/02/2020 2030-2230)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `find` - Find tasks in the tasklist given keywords."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Finds tasks in the tasklist using given keywords specified by the user. Keywords are not case sensitive and could be names of tasks, substrings of it, type of tasks, date in DD/MM/YYYY format, time in HHMM format, whether or not the task is done in the form `done`, `not done`, or `undone`, or   `at` (for events) / `by` (for deadlines)."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `find [keyword]`. "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`find buy`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1.[T][ ] buy milk"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "2.[T][ ] buy chocolate"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "3.[D][ ] submit report on buying and selling (by: 20/09/2019 2359)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `help` - Displays commands and their descriptions."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Shows a list of specified commands or all known commands so far, sorted in alphabetical order."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `help` or `help [command1] [command2] etc.`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`help about bye unknown todo`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "bye: Instructs the program to exit."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format \u0027bye\u0027."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "eg. bye"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "todo: Adds a todo into the tasklist."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format \u0027todo [task]\u0027."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "eg. todo buy bread"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "unknown: Unknown command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Note that all commands are NOT case sensitive."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Can\u0027t find what you\u0027re looking for?"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Input \u0027help\u0027 for the full list of commands known to the this program and information on their usage."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "You may also refer to this program\u0027s user guide via: http://whneo97.github.io/duke"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `list` - Lists all tasks in the tasklist stored."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Displays a list of all tasks stored in the current tasklist. If the tasklist has yet to be sorted, it is by default sorted in chronological order (i.e. newest item is added to the back of the list)."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `list`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Input \u0027help\u0027 for the full list of commands known to the this program and information on their usage."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1.[T][ ] buy milk"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "2.[E][ ] concert (at: 21/02/2019 1500-1700)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "3.[E][ ] football match (at: 20/09/2019 2300-0100)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "4.[D][+] submit report (by: 25/09/2019)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "5.[E][ ] annual concert (at: 25/02/2020 2030-2230)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "6.[T][ ] buy chocolate"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "7.[D][ ] submit report on buying and selling (by: 20/09/2019 2359)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `random` - Generates a random list of tasks."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Generates a list of tasks that are randomly generated. Users are required to specify the number of random tasks to generate. This command OVERRIDES the existing list. An overriden list, however, may be retrieved using the \u0027undo\u0027 command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `random [size of random list]`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`random 5`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Here are your randomly-generated list of Tasks:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1.[E][ ] rand  8cu7 xZnrw 8h (at: 27/11/4256 0244-1601)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "2.[T][+] rand  M7FG VYi"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "3.[T][ ] rand  sVZDcm nP"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "4.[E][ ] rand  w0e6 T (at: 20/09/1140 1330-0725)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "5.[E][+] rand  COPJ mn (at: 17/02/4833 1119-0405)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "To revert back to the previous version of the TaskList, use the \u0027undo\u0027 command or input \u0027help\u0027 for more information on all commands known to Duke."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `redo` - Reverts tasklist to a newer version / newer versions."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Reverts, if possible, the tasklist to the version before the most recent undo command was executed, or executes redo the number of times specified by the user."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `redo` (performs redo once) or `redo [number of times to redo]`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`redo 2`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Redo successful. Current task list is now 2 versions newer than the one before redo was executed."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Input \u0027list\u0027 to see the version of the tasklist we have retrieved and saved for you."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `sort` - Sorts the list based on the specified criteria."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Sorts the list (and saves it) based on the criteria requested for by the user. Criteria include alphabetical order of task type, done state, alphabetical order of task description and chronological order of date / time."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `sort [criteria]`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "List of `[criteria]`: "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `description`: Sorts the list of tasks by order of task descriptions in alphabetical order."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `revdescription`: Sorts the list of tasks by order of task descriptions in reversed alphabetical order."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `type`: Sorts the list of tasks by order of type of task in alphabetical order."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `revtype`: Sorts the list of tasks by order of type of task in reversed alphabetical order."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `date`: Sorts the list of tasks by order of date from soonest to latest."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `revdate`: Sorts the list of tasks by order of date from latest to soonest."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `id`: Sorts the list of tasks by order of creation from earliest to latest."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `revid`: Sorts the list of tasks by order of creation from latest to earliest."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `done`: Sorts the list of tasks by order of done status with done tasks arranged first."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": "* `undone`: Sorts the list of tasks by order of done status with undone tasks arranged first."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`sort revdate`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Sorting successful! Here are the tasks in your list:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1.[T][ ] buy chocolate"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "2.[T][ ] buy milk"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "3.[E][ ] annual concert (at: 25/02/2020 2030-2230)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": "4.[D][+] submit report (by: 25/09/2019)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": "5.[D][ ] submit report on buying and selling (by: 20/09/2019 2359)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": "6.[E][ ] football match (at: 20/09/2019 2300-0100)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": "7.[E][ ] concert (at: 21/02/2019 1500-1700)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `todo` - Adds a todo into the tasklist."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Adds a todo into the tasklist, and displays a confirmation message to the user if addition of the todo into the tasklist is successful, with the new number of tasks in the tasklist."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `todo [task]`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`todo buy bread`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": "  [T][ ] buy bread"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Now you have 8 tasks in the list."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `undo` - Reverts tasklist to an older version / older versions."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Reverts, if possible, the tasklist to the version before the most recent command was executed, or executes undo the number of times specified by the user."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `undo` (performs undo once) or `undo [number of times to undo]`."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`undo 2`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Undo successful. Current task list is now 2 versions older than the one before undo was executed."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Input \u0027list\u0027 to see the version of the tasklist we have retrieved and saved for you."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "whneo97"
        },
        "content": "### `undone` - Marks a task or multiple tasks from the tasklist as yet to be completed."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Marks a task or groups of tasks from the tasklist to be undone, and displays a confirmation message to the user if marking of the task as undone in the tasklist is successful."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Requires input to be in the format `done [number representing task in tasklist]` or "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`undone [range1, range2, range3, ...]` or `undone all` to mark all tasks as undone."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whneo97"
        },
        "content": "`undone 4`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Nice! I\u0027ve marked this task as undone:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "whneo97"
        },
        "content": "[D][ ] submit report (by: 25/09/2019)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whneo97"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "whneo97": 393
    }
  },
  {
    "path": "duke-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "todo buy bread"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "todo buy milk"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "event hello"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /at 12/12/2912 0000"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 15/20/2019"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 15/12/2019 2345"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 15/12/2019 2359"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 15/12/2019 0000"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 15/12/2019 2360"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 15/12/2019 2459"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 00/12/2019 2359"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 00/12/000 2359"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 00/12/-10 2/359"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline return book /by 15/12/2019"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline buy cake /by 14/12/2019"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "event project meeting /at 31/12/2019 2015-2359"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline project meeting /by 12/08/2019 1400"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline /by 1400"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "event /at 14/14/2918"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "todo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "list 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "done -19"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "done a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "done 20"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "delete 109"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "delete -0as1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "todo hello"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "whneo97": 38
    }
  },
  {
    "path": "duke-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/seedu/duke/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "java -classpath ../bin seedu.duke.model.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "whneo97": 34
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":init"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":end"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":omega"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":init"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":end"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": ":omega"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 6e6ace130121eba10a3559454d8092300c7518d0"
      }
    ],
    "authorContributionMap": {
      "whneo97": 171
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.MainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A GUI for seedu.duke.model.Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Start method called to start the Duke program by building the necessary JavaFx components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param stage A Stage taken in where the GUI of Duke program is run."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert fxmlLoader !\u003d null : \"fxmlLoader for Main class is null\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            scene.getStylesheets().addAll(this.getClass().getResource(\"/view/style.css\").toExternalForm());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            stage.setTitle(\"Duke V2.4\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a DukeException object that extends the Exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an exception occurred that is relevant for this Duke program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DukeException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DukeException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/commandexceptions/EmptyCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.commandexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a EmptyCommandException object that extends the InvalidCommandException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an empty command was received by the Duke program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class EmptyCommandException extends InvalidCommandException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of EmptyCommandException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public EmptyCommandException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of EmptyCommandException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public EmptyCommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/commandexceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.commandexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a EmptyCommandException object that extends the DukeException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an invalid command has been received by the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * This may refer to the entire command or the first word of the full command used to instruct the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of EmptyCommandException that stores the error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of EmptyCommandException that stores both the error message and cause."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidCommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/commandexceptions/InvalidTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.commandexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidTaskDescriptionException object that extends the InvalidCommandException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a given task description is invalid (eg. empty for commands requiring task descriptions,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * or non-empty for commands requiring empty task descriptions)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidTaskDescriptionException extends InvalidCommandException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTaskDescriptionException that stores the error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTaskDescriptionException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTaskDescriptionException that stores both the error message and cause."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTaskDescriptionException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/dateandtimeexceptions/InvalidDateAndTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.dateandtimeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidDateAndTimeException object that extends the DukeException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a given date or time to be parsed is in the wrong format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidDateAndTimeException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidDateAndTimeException that stores the error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidDateAndTimeException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidDateAndTimeException that stores both the error message and cause."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidDateAndTimeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/dateandtimeexceptions/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.dateandtimeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidDateException object that extends the DukeException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a given date to be parsed is in the wrong format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidDateException extends InvalidDateAndTimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidDateException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidDateException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidDateException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidDateException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/dateandtimeexceptions/InvalidTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.dateandtimeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidTimeException object that extends the DukeException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a given time to be parsed is in the wrong format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidTimeException extends InvalidDateAndTimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTimeException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTimeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTimeException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTimeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/historyexceptions/CannotRedoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.historyexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a public class CannotRedoException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " object that extends the DukeException class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an error when a client of the Duke program encounters an exception while attempting to access newer versions "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * of TaskLists. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class CannotRedoException extends HistoryException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class CannotRedoException extends DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " that stores the error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CannotRedoException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class CannotRedoException extends DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": " that stores both the error message and cause."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CannotRedoException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/historyexceptions/CannotUndoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.historyexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a public class CannotUndoException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " object that extends the DukeException class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an error when a client of the Duke program encounters an exception while attempting to access history"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * of TaskLists."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class CannotUndoException extends HistoryException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class CannotUndoException extends DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " that stores the error message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CannotUndoException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class CannotUndoException extends DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": " that stores both the error message and cause."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public CannotUndoException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/historyexceptions/HistoryException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.historyexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a public class HistoryException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " object that extends the DukeException class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an error when a client of the Duke program is attempting to traverse through the timeline of TaskLists."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class HistoryException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class HistoryException extends DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " that stores the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public HistoryException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class HistoryException extends DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": " that stores both the error message and cause."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public HistoryException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/historyexceptions/InvalidClearCacheKeyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.historyexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a public class InvalidClearCacheKeyException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " object that extends the DukeException class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an error when the key used to clear the task list history of a Duke instance is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidClearCacheKeyException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class InvalidClearCacheKeyException extends DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     that stores the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidClearCacheKeyException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of public class InvalidClearCacheKeyException extends DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     that stores both the error message and cause."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidClearCacheKeyException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/listexceptions/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.listexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a DuplicateTaskException object that extends the DukeException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a Task to be created already exists in the TaskList it is to be added to."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DuplicateTaskException that stores the error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DuplicateTaskException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DuplicateTaskException that stores both the error message and cause."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DuplicateTaskException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/listexceptions/InvalidListIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.listexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidListIndexException object that extends the DukeException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a given list index is in the wrong format, or given list index exceeds the size of the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidListIndexException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListIndexException that stores the error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidListIndexException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListIndexException that stores both the error message and cause."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidListIndexException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/listexceptions/InvalidListRangeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.listexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidListRangeException object that extends the InvalidListIndexException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a given list range is in the wrong format, or given list indexes exceeds the size of the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidListRangeException extends InvalidListIndexException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListRangeException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidListRangeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListRangeException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidListRangeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/listexceptions/InvalidNumberFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.listexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidNumberFormatException object that extends the DukeException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a number keyed in as input is invalid."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * May be used to specify that a TaskList size is invalid (eg. not a natural number) or"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * specify that the number of versions to traverse in a TaskListHistory is invalid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidNumberFormatException extends DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidNumberFormatException that stores the error message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidNumberFormatException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidNumberFormatException that stores both the error message and cause."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidNumberFormatException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/listexceptions/InvalidSortCriteriaException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.listexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidListIndexException object that extends the DukeException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a given sort criteria is in the wrong format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidSortCriteriaException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListIndexException that stores the error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidSortCriteriaException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidSortCriteriaException that stores both the error message and cause."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidSortCriteriaException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/loadexceptions/FileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.loadexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a FileNotFoundException object that extends the LoadException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that the file cannot be found when the program is attempting to load the file."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class FileNotFoundException extends LoadException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of FileNotFoundException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public FileNotFoundException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of FileNotFoundException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public FileNotFoundException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/loadexceptions/InvalidDoneStatusException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.loadexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidListIndexException object that extends the LoadException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that a done status read from the Storage file while loading is invalid (i.e. neither 0 nor 1)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidDoneStatusException extends LoadException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListIndexException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidDoneStatusException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListIndexException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidDoneStatusException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/loadexceptions/InvalidTaskTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.loadexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidTaskTypeException object that extends the LoadException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that an invalid task type was read from the Storage file while loading."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidTaskTypeException extends LoadException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTaskTypeException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTaskTypeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTaskTypeException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTaskTypeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/loadexceptions/InvalidTokenNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.loadexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidTokenNumberException object that extends the LoadException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals that an invalid number of tokens was read from the Storage file while loading."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class InvalidTokenNumberException extends LoadException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTokenNumberException that stores the error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTokenNumberException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidTokenNumberException that stores both the error message and cause."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public InvalidTokenNumberException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/loadexceptions/LoadException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.loadexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a InvalidListIndexException object that extends the LoadException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an exception that occurred while loading the file from Storage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class LoadException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListIndexException that stores the error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public LoadException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of InvalidListIndexException that stores both the error message and cause."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public LoadException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/commons/exceptions/storageexceptions/SavingUnsuccessfulException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.commons.exceptions.storageexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a SavingUnsuccessfulException object that extends the LoadException class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Signals an exception that occurred while the program is attempting to save data into the Storage file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class SavingUnsuccessfulException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of SavingUnsuccessfulException that stores the error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message for users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public SavingUnsuccessfulException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of SavingUnsuccessfulException that stores both the error message and cause."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in and stores the display message and a Throwable cause for users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Message that indicates to users details regarding the exception."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param cause Throwable cause that chains this exception to the exception (or other Throwable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *              that gave rise to it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public SavingUnsuccessfulException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/AboutCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that displays information about this Duke program to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AboutCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes an AboutCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message that shows information about this Duke program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList that was being used by a client of this command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message showing information about this Duke program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks !\u003d null : \"TaskList that is to be displayed is null.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ui.showAboutMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.listexceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that adds Tasks into the TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method that executes commands by adding tasks into the TaskLst."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Stores information on the task to be created, so the task can be created when the execute method is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * called by a client of this class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String[] strArr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String taskString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private DateAndTime dateAndTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of AddCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of AddCommand relevant information required to create an AddCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param command String representation of a single-word command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString String representation of task description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTime DateAndTime object storing the date and times relevant to the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                    If the task does not require any date or time, null may be passed in as an argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public AddCommand(String command, String taskString, DateAndTime dateAndTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !command.equals(\"\") : \"String attribute storing command of an Add command created is empty.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !taskString.equals(\"\") : \"Task description of an Add command created is empty.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskString \u003d taskString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes an AddCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies a given TaskList by adding the task defined by its attributes to it."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves the updated TaskList to the given Storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating successful addition after addition process has been completed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to which a given task is to be added by this command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful addition of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList and is to be modified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                upon successful addition of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Task task \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (tasks.hasExistingTask(command, taskString, dateAndTime)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new DuplicateTaskException(\"The same task already exists in the list!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                task \u003d new Todo(taskString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                task \u003d new Deadline(taskString, dateAndTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                task \u003d new Event(taskString, dateAndTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int sizeBefore \u003d tasks.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int sizeAfter \u003d tasks.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert sizeAfter !\u003d sizeBefore : \"Task was called to be added to TaskList but \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"size of TaskList remained unchanged.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert sizeAfter \u003d\u003d sizeBefore + 1 : \"One item was meant to be added to the TaskList \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"but the difference in sizes of the lists before and after is not 1.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String addedMessage \u003d task.addedMessage(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showAddedMessage(addedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert ui.getOutput().equals(addedMessage) : \"Task was added to a TaskList \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"but output does not tally with added message.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert isExit() \u003d\u003d false : \"An Add command is exhibiting behaviour that instructs the program to exit.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DukeException(\"Execution of command unsuccessful.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 88
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/ClearCacheCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.commandexceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.historyexceptions.InvalidClearCacheKeyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that allows the client to clear the entire cache of version history."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method that executes commands by clearing the history of this Command\u0027s Duke instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * This command CANNOT BE UNDONE."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Stores information on the Duke instance, so TaskListHistory of Duke is emptied."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class ClearCacheCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static boolean clearCommandRequested;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String userKey;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String requiredKey \u003d \"CoNfiRMtOclEaR\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of ClearCacheCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of ClearCacheCommand relevant information required to create a ClearCacheCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Attribute is a reference to instance of Duke for which to perform clear cache operation(s)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param duke Duke instance for which to perform clear cache operation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param userKey Key that a client of this class inputs to confirm on whether or not the ClearCacheCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                should proceed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException If initialisation of the Duke instance as an attribute is unsuccessful."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public ClearCacheCommand(Duke duke, String userKey) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.userKey \u003d userKey;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a ClearCacheCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Begins a fresh TaskListHistory with a given TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating successful clearing of cache after cache clearing process has been completed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to start the new TaskListHistory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful clearing of this Duke\u0027s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *           task history."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks !\u003d null : \"TaskList that is to be displayed is null.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!clearCommandRequested \u0026\u0026 userKey.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ui.showClearCacheConfirmationRequest();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                clearCommandRequested \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (clearCommandRequested \u0026\u0026 userKey.equals(requiredKey)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                duke.resetTaskListHistory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                clearCommandRequested \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ui.showClearCacheConfirmation();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (clearCommandRequested) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                clearCommandRequested \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidClearCacheKeyException(\"Input key to clear cache is invalid. Clearing of cache is\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \" not initialised and the process has been aborted.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DukeException(\"Execution of command unsuccessful.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether or not a user has requested for TaskListHistory to be cleared."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean denoting if a user has requested for TaskListHistory to be cleared."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean getClearCommandRequested() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return clearCommandRequested;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets whether or not a user has requested for TaskListHistory to be cleared."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param clearCommandRequested A boolean denoting if a user has requested for TaskListHistory to be cleared."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static void setClearCommandRequested(boolean clearCommandRequested) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ClearCacheCommand.clearCommandRequested \u003d clearCommandRequested;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the required key the user needs to enter in order to confirm clearing of TaskListHistory."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String literal required for the user to key in to be able to confirm clearing of TaskListHistory."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String getRequiredKey() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return ClearCacheCommand.requiredKey;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines an abstract Command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains an executable method that all extensions of Command must include."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method defines whether or not the command should cause the program to exit."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a Command object using information stored in instance attributes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies a given Tasklist and Storage based on implementation of concrete class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * May possibly display a message indicating successful execution after process is completed, depending on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * implementation of concrete class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to which a given task is to be modified by this command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful exeuction of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList and is to be modified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                upon successful execution of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether or not the Command instructs the program to exit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Defines that a command causes the program to continue running unless overridden."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean representing whether or not the Command instructs the program to exit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 35
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.Validation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that removes Tasks from the TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method that executes commands by removing tasks from the TaskLst."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Stores information on the task to be removed, so the task can be removed when the execute method is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * called by a client of this class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String taskString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of DeleteCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString String representation of task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DeleteCommand(String taskString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskString \u003d taskString.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a DeleteCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies a given TaskList by deleting the task(s) defined by its attributes to it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves the updated TaskList to the given Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating successful removal after removal process has been completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to which a given task is to be removed by this command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful removal of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList and is to be modified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                upon successful removal of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ArrayList\u003cArrayList\u003cInteger\u003e\u003e rangeList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (taskString.toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ArrayList\u003cInteger\u003e all \u003d new ArrayList\u003c\u003e(List.of(0, tasks.size() - 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                rangeList \u003d new ArrayList\u003c\u003e(List.of(all));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                rangeList \u003d Validation.getValidatedListRange(tasks, taskString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String deletedMessage \u003d tasks.removeRanges(rangeList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showDeletedMessage(deletedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert ui.getOutput().equals(deletedMessage) : \"Task(s) was/ were deleted from a TaskList \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"but output does not tally with deleted message.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert isExit() \u003d\u003d false : \"A Delete command is exhibiting behaviour that instructs the program to exit.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DukeException(\"Execution of command unsuccessful.\" + ex.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.Validation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that marks Tasks in the TaskList as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method that executes commands by marking tasks in the TaskLst as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Stores information on the task to be marked as done, so the task can be marked as done when the execute method is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * called by a client of this class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String taskString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of DoneCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString String representation of task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DoneCommand(String taskString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskString \u003d taskString.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a DoneCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies a given TaskList by marking the task defined by its attributes as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves the updated TaskList to the given Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating successful marking after marking process has been completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to which a given task is to be marked as done by this command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful marking of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList and is to be modified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                upon successful marking of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ArrayList\u003cArrayList\u003cInteger\u003e\u003e rangeList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (taskString.toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ArrayList\u003cInteger\u003e all \u003d new ArrayList\u003c\u003e(List.of(0, tasks.size() - 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                rangeList \u003d new ArrayList\u003c\u003e(List.of(all));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                rangeList \u003d Validation.getValidatedListRange(tasks, taskString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String doneMessage \u003d tasks.markAsDone(rangeList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showDoneMessage(doneMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert ui.getOutput().equals(doneMessage) : \"Task was marked as done \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"but output does not tally with done message.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert isExit() \u003d\u003d false : \"A Done command is exhibiting behaviour that instructs the program to exit.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DukeException(\"Execution of command unsuccessful.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that instructs the program to exit."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes an ExitCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating exiting of the program before the program exits."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList that was being used by a client of this command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message before the program exits."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ui.showExitMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert isExit() \u003d\u003d true : \"An exit command is not instructing the program to exit.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns information that the ExitCommand instructs the program to exit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Defines that the ExitCommand causes the program to exit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean representing that the ExitCommand instructs the program to exit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that lists out all Tasks in the TaskList to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    String taskString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of FindCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of FindCommand relevant search information required to create a FindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString String representation of search description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public FindCommand(String taskString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !taskString.equals(\"\") : \"Keywords for search are empty but no exception is thrown \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"when creating a FindCommand object.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskString \u003d taskString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a FindCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message that shows the String representation of the TaskList containing search results when called."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList that was being used by a client of this command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message showing the String representation of the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *           given TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList searchResults \u003d tasks.find(taskString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert searchResults !\u003d null : \"TaskList returned by search results is null.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ui.showSearchResults(searchResults);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that lists out command definitions specified."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Instructs users on how to use commands of this program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // A list of constant definitions and usage instructions for all commands known to the program that may be of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // help to a user who requests for these definitions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String TODOHELP \u003d \"todo: Adds a todo into the tasklist.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027todo [task]\\\u0027.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. todo buy bread\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String DEADLINEHELP \u003d \"deadline: Adds a deadline into the tasklist.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027deadline [task] /by [DD/MM/YYYY]\\\u0027, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"or \\\u0027deadline [task] /by [DD/MM/YYYY] [HHMM]\\\u0027, where dates and times (24-hour clock) are valid.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. deadline finish homework /by 15/09/2019\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. deadline submit assignment /by 16/09/2019 2200\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String EVENTHELP \u003d \"event: Adds an event into the tasklist.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027event [task] /at [DD/MM/YYYY] [HHMM]\\\u0027, \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"where dates and times (24-hour clock) are valid.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. event upcoming concert /at 22/09/2019 1500-1600\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String DONEHELP \u003d \"done: Marks a task or multiple tasks in the tasklist as done.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027done [number representing task in tasklist]\\\u0027 or \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"\\\u0027done [range1, range2, range3, ...] or \\\u0027done all\\\u0027 to mark all tasks as done.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. done 2-4, 6, 8-9\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. done all\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String UNDONEHELP \u003d \"undone: Marks a task or multiple tasks in the tasklist as undone.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027done [number representing task in tasklist]\\\u0027 or \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"\\\u0027undone [range1, range2, range3, ...]\\\u0027 or \\\u0027undone all\\\u0027 to mark all tasks as undone.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. undone 2-4, 6, 8-9\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. undone all\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String DELETEHELP \u003d \"delete: Deletes a task or multiple tasks from the tasklist.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027delete [number representing task in tasklist]\\\u0027 or \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"\\\u0027delete [range1, range2, range3, ...]\\\u0027 or \\\u0027delete all\\\u0027 to remove all tasks.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. delete 2-4, 6, 8-9\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. delete all\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String LISTHELP \u003d \"list: Lists all tasks in the tasklist stored.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027list\\\u0027.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. list\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FINDHELP \u003d \"find: Finds tasks in the tasklist given keywords.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027find [keyword]\\\u0027.\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Keywords could be name of tasks, substrings of it, type of tasks, date in DD/MM/YYYY format, \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"time in HHMM format, whether or not the task is done in the form \\\u0027done\\\u0027, \\\u0027not done\\\u0027, \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            +  \"or \\\u0027undone\\\u0027, or   `at` (for events) / `by` (for deadlines).\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Keywords are not case-sensitive.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. find buy milk\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. find event\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. find 15/12/2019\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. find 2019\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. find done\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. find undone\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. find not done\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String UNDOHELP \u003d \"undo: Reverts, if possible, the tasklist to the version before the most \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"recent command was executed, or executes undo the number of times specified by the user.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027undo\\\u0027 (performs undo once) or \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"\\\u0027undo [number of times to undo]\\\u0027.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. undo\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. undo 5\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String REDOHELP \u003d \"redo: Reverts, if possible, the tasklist to the version before the most \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"recent undo command was executed, or executes redo the number of times specified by the user.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027redo\\\u0027 (performs redo once) or \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"\\\u0027redo [number of times to redo]\\\u0027.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. redo\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. redo 5\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String SORTHELP \u003d \"sort: Sorts the list (and saves it) based on the criteria requested for by \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"the user.\\n\" + \"Requires input to be in the format \\\u0027sort [criteria]\\\u0027.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Criteria include: \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- description: Sorts the list of tasks by order of task descriptions in alphabetical order.\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- revdescription: Sorts the list of tasks by order of task descriptions in \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"reversed alphabetical order.\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- type: Sorts the list of tasks by order of type of task in alphabetical order.\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- revtype: Sorts the list of tasks by order of type of task in reversed alphabetical order.\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- date: Sorts the list of tasks by order of date from soonest to latest.\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- revdate: Sorts the list of tasks by order of date from latest to soonest.\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- id: Sorts the list of tasks by order of creation from earliest to latest.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- revid: Sorts the list of tasks by order of creation from latest to earliest.\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- done: Sorts the list of tasks by order of done status with done tasks arranged first.\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"- undone: Sorts the list of tasks by order of done status with undone tasks arranged first.\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. sort description\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. sort date\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. sort revid\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. sort undone\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. sort type\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String RANDOMHELP \u003d \"random: Generates a random list of tasks.\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027random [size of random list]\\\u0027.\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Note: This command OVERRIDES the existing list. An overriden list, however, may be retrieved \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"using the \\\u0027undo\\\u0027 command.\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. random 1000\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String BYEHELP \u003d \"bye: Instructs the program to exit.\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027bye\\\u0027.\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. bye\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String HELPHELP \u003d \"help: Shows a list of specified commands or all known commands so far, \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"sorted in alphabetical order.\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027help\\\u0027 or \\\u0027help [command1] [command2] etc.\\\u0027.\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. help\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. help todo sort unknown undo bye \";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String ABOUTHELP \u003d \"about: Shows information about the developer and this Duke program.\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027about\\\u0027.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. about\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String CLEARCACHEHELP \u003d \"clearcache: Removes all versions of task lists in the timeline used \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"for undo and redo operations, except for the current version.\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"WARNING: THIS OPERATION CANNOT BE UNDONE.\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"Requires input to be in the format \\\u0027clearcache\\\u0027. \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"The program will thereafter prompt for user to confirm by keying in \\\u0027CoNfiRMtOclEaR\\\u0027 before \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"proceeding. This operation may be useful if the size of the timeline happens to get too large and \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"slows down other operational procedures. The key will not be recognised on it\u0027s own without first \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \" entering \\\u0027clearcache\\\u0027. The process is aborted if input right after \\\u0027clearcache\\\u0027 does not match the \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"required key and the user will have to enter \\\u0027clearcache\\\u0027 again if he/ she intends to re-initiate \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"the process.\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. clearcache\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"* program prompts for confirmation *\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"eg. CoNfiRMtOclEaR\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String UNKNOWN \u003d \"Unknown command.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String ADDITIONALINFO \u003d \"Note that all commands are NOT case sensitive.\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String FURTHERPROMPT \u003d \"Can\u0027t find what you\u0027re looking for?\\nInput \\\u0027help\\\u0027 \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"for the full list of commands known to the this program and information on their usage.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final String USERGUIDE \u003d \"You may also refer to this program\u0027s user guide via: \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"http://whneo97.github.io/duke\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String taskString;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of HelpCommand."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of HelpCommand relevant search information required to create a HelpCommand."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString String representation of keywords user needs help with."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public HelpCommand(String taskString) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskString \u003d taskString;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String containing compiled definitions for commands requested by a client that calls this method."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in variable number of arguments depending on the number of commands required by the user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param requestedCommandList A list of Strings containing possible commands the user needs help with."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String containing compiled definitions for commands the user needs help with."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String getHelpDefinitions(String...requestedCommandList) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String out \u003d \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Arrays.sort(requestedCommandList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (String requestedCommand : requestedCommandList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (requestedCommand.equals(\"todo\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d TODOHELP;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d DEADLINEHELP;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"event\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d EVENTHELP;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d DONEHELP;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"undone\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d UNDONEHELP;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"delete\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d DELETEHELP;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d LISTHELP;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"find\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d FINDHELP;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d UNDOHELP;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"redo\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d REDOHELP;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"sort\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d SORTHELP;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"random\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d RANDOMHELP;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"about\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d ABOUTHELP;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"clearcache\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d CLEARCACHEHELP;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"bye\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d BYEHELP;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (requestedCommand.equals(\"help\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d HELPHELP;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                out +\u003d requestedCommand + \": \" + UNKNOWN;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            out +\u003d \"\\n\\n\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return out.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a HelpCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message that shows all help information requested"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList that was being used by a client of this command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message showing all command definitions requested."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String helpDefinitions;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (taskString.equals(\"\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            helpDefinitions \u003d getHelpDefinitions(\"todo\", \"deadline\", \"event\", \"done\", \"undone\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \"delete\", \"list\", \"find\", \"undo\", \"redo\", \"sort\", \"random\", \"about\", \"clearcache\", \"bye\", \"help\")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"\\n\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + ADDITIONALINFO;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            helpDefinitions \u003d getHelpDefinitions(taskString.split(\" \")) + \"\\n\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + ADDITIONALINFO + \"\\n\\n\" + FURTHERPROMPT;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        helpDefinitions +\u003d \"\\n\\n\" + USERGUIDE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ui.showHelpMessage(helpDefinitions);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 212
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that lists out all Tasks in the TaskList to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a ListCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message that shows the String representation of the given TaskList when called."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList that was being used by a client of this command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message showing the String representation of the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *           given tasklist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks !\u003d null : \"TaskList that is to be displayed is null.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showEmptyTaskListMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showTaskList(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/RandomCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that lists out all Tasks in the TaskList to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class RandomCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    int size;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of RandomCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of RandomCommand relevant search information required to create a RandomCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param size Size of the TaskList to be randomly generated, specified by a client of this class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public RandomCommand(int size) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a ListCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message that shows the String representation of the given TaskList when called."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList that was being used by a client of this command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message showing the String representation of the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *           given tasklist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        (new DeleteCommand(\"all\")).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            tasks.add(Task.generateRandomTask());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks !\u003d null : \"TaskList that is to be displayed is null.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ui.showRandomTaskList(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        storage.save(tasks, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/RedoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.historyexceptions.CannotRedoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that allows the client to redo actions by commands that have been reverted by undo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method that executes commands by reverting to the a version of a TaskList that has previously "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * been undone."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Stores information on the Duke instance, so the TaskList of the Duke instance may be reverted to a state before"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * undo was executed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int iterations;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of RedoCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of RedoCommand relevant information required to create an RedoCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Attribute is a reference to instance of Duke for which to perform redo operation(s)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param duke Duke instance for which to perform redo operation(s)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param iterations Number of times to perform undo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException If initialisation of the Duke instance as an attribute is unsuccessful."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public RedoCommand(Duke duke, int iterations) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.iterations \u003d iterations;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes an RedoCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies a given TaskList by reverting to a previous version stored in memory before UndoCommand was executed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves the reverted TaskList to the given Storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating successful redo after redo process has been completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to be reverted by this command to a state before it was undone."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful redo of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList and is to be modified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                upon successful redo of the previous operation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks !\u003d null : \"TaskList that is to be displayed is null.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList resTasks \u003d tasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int i \u003d 0; i \u003c iterations; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    resTasks \u003d this.duke.getTaskListHistory().redo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } catch (CannotRedoException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (i \u003e 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        this.duke.setTaskList(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        ui.showMaxRedoMessageReached(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        storage.save(resTasks, ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        throw ex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.duke.setTaskList(resTasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showRedoMessage(iterations);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DukeException(\"Execution of command unsuccessful.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 72
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that lists out all Tasks in the TaskList to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    String sortCriteria;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of SortCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of SortCommand relevant information required to create an SortCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param sortCriteria String representation of criteria required to sort Tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public SortCommand(String sortCriteria) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !sortCriteria.equals(\"\") : \"Task description of an Add command created is empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.sortCriteria \u003d sortCriteria.toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes a SortCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message that shows the String representation of the given TaskList sorted by given criteria."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList that was being used by a client of this command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message showing the String representation of the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *           given tasklist that have been sorted by a requested criteria."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks !\u003d null : \"TaskList that is to be displayed is null.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showEmptyTaskListMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            tasks.sort(sortCriteria);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showSortedTaskList(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.historyexceptions.CannotUndoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that allows the client to undo previous commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method that executes commands by reverting to the previous version of a TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Stores information on the Duke instance, so the TaskList of the Duke instance may be reverted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int iterations;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of UndoCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores to attributes of UndoCommand relevant information required to create an UndoCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Attribute is a reference to instance of Duke for which to perform undo operation(s)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param duke Duke instance for which to perform undo operation(s)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param iterations Number of times to perform undo."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException If initialisation of the Duke instance as an attribute is unsuccessful."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public UndoCommand(Duke duke, int iterations) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.iterations \u003d iterations;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes an UndoCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies a given TaskList by reverting to a previous version stored in memory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves the reverted TaskList to the given Storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating successful undo after undo process has been completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to be reverted by this command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful undo of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList and is to be modified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                upon successful undo of the previous operation."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks !\u003d null : \"TaskList that is to be displayed is null.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList resTasks \u003d tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int i \u003d 0; i \u003c iterations; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    resTasks \u003d this.duke.getTaskListHistory().undo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } catch (CannotUndoException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (i \u003e 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        this.duke.setTaskList(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        ui.showMaxUndoMessageReached(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        storage.save(resTasks, ui);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        throw ex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.duke.setTaskList(resTasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showUndoMessage(iterations);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.save(resTasks, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DukeException(\"Execution of command unsuccessful.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 70
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/command/UndoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.Validation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Command object that marks Tasks in the TaskList as undone."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a method that executes commands by marking tasks in the TaskLst as undone."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Stores information on the task to be marked as done, so the task can be marked as done when the execute method is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * called by a client of this class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class UndoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String taskString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Creates an instance of UndoneCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString String representation of task description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public UndoneCommand(String taskString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskString \u003d taskString.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /** Executes an UndoneCommand object using information stored in instance attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Modifies a given TaskList by marking the task defined by its attributes as undone."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves the updated TaskList to the given Storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays a message indicating successful marking after marking process has been completed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to which a given task is to be marked as undone by this command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui with methods that are called to display a message upon successful marking of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage that contains saved String representation of the given TaskList and is to be modified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                upon successful marking of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException if execution of the command is unsuccessful."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ArrayList\u003cArrayList\u003cInteger\u003e\u003e rangeList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (taskString.equals(\"all\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ArrayList\u003cInteger\u003e all \u003d new ArrayList\u003c\u003e(List.of(0, tasks.size() - 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                rangeList \u003d new ArrayList\u003c\u003e(List.of(all));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                rangeList \u003d Validation.getValidatedListRange(tasks, taskString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String undoneMessage \u003d tasks.markAsUndone(rangeList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showUndoneMessage(undoneMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert ui.getOutput().equals(undoneMessage) : \"Task was marked as undone \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"but output does not tally with undone message.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert isExit() \u003d\u003d false : \"An Undone command is exhibiting behaviour that instructs the program to exit.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            storage.save(tasks, ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new DukeException(\"Execution of command unsuccessful.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.commandexceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.loadexceptions.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.AboutCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.ClearCacheCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.RandomCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.SortCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.UndoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.DeadlineValidation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.EventValidation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.LoadValidation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.Validation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.Duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Todo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Parse object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains methods to parse contents in storage files and user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a Command object given a full line of text."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param fullCommand Line of instructions presumably from user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param duke Instance of Duke which calls this method and contains the relevant attribute for TaskList history."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Command object based on information extracted from full command given."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException If full command taken in is invalid and cannot be used to return any Command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Command parse(String fullCommand, Duke duke) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Scanner sc \u003d new Scanner(fullCommand.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!sc.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyCommand(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String command \u003d sc.next();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!command.equals(ClearCacheCommand.getRequiredKey())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            command \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String taskString \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskString \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert taskString.equals(\"\") : \"Command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert taskString.equals(\"\") : \"Description for command not meant to have any description is non-empty \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Task Description for a Task is empty in Parser but \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"no exception was thrown.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new AddCommand(\"todo\", taskString, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String[] descriptionAndDateTime \u003d DeadlineValidation.getValidatedDescriptionAndDateTime(taskString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskString \u003d descriptionAndDateTime[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String dateTimeString \u003d descriptionAndDateTime[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            DateAndTime dateAndTime \u003d DeadlineValidation.getValidatedDateAndTime(dateTimeString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Task Description for a Task is empty in Parser but \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"no exception was thrown.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert dateAndTime.getDate() !\u003d null : \"Deadline has no Date in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new AddCommand(\"deadline\", taskString, dateAndTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String[] descriptionAndDateTime \u003d EventValidation.getValidatedDescriptionAndDateTime(taskString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskString \u003d descriptionAndDateTime[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String dateTimeString \u003d descriptionAndDateTime[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            DateAndTime dateAndTime \u003d EventValidation.getValidatedDateAndTime(dateTimeString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Task Description is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert dateAndTime.getDate() !\u003d null : \"Event has no Date in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert dateAndTime.getTimeStart() !\u003d null : \"Event has no start time in Parser but \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"no exception was thrown.\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert dateAndTime.getTimeEnd() !\u003d null : \"Event has no end time in Parser but \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"no exception was thrown.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new AddCommand(\"event\", taskString, dateAndTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Index for find command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new FindCommand(taskString);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Index for done command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DoneCommand(taskString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"undone\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Index for undone command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new UndoneCommand(taskString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Index for delete command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DeleteCommand(taskString);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"sort\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Index for delete command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new SortCommand(taskString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"random\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyTaskString(command, taskString);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int size \u003d Validation.getValidatedNaturalNumber(taskString, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !taskString.equals(\"\") : \"Index for delete command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new RandomCommand(size);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"help\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new HelpCommand(taskString);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"undo\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int numberOfTimes \u003d taskString.toLowerCase().equals(\"all\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? duke.getTaskListHistory().getCurrIndex()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Validation.getValidatedNaturalNumber(taskString, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new UndoCommand(duke, numberOfTimes);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"redo\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int numberOfTimes \u003d taskString.toLowerCase().equals(\"all\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? duke.getTaskListHistory().getSize() - duke.getTaskListHistory().getCurrIndex() - 1"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : Validation.getValidatedNaturalNumber(taskString, true);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new RedoCommand(duke,numberOfTimes);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"about\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new AboutCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (command.equals(\"clearcache\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new ClearCacheCommand(duke, \"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (ClearCacheCommand.getClearCommandRequested()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new ClearCacheCommand(duke, command);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Validation.ensureNonEmptyCommand(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert !command.equals(\"\") : \"Command is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a TaskList of Tasks given a Storage containing the storage-format String representation of a TaskList."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates Tasks based on tokens from the Storage and adds them to the TaskList to be returned"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage containing the storage-format String representation of a TaskList to be parsed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return TaskList of Tasks extracted from the given Storage."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException If there are invalid tokens in the Storage that cannot be converted to Tasks or"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                       adding the Tasks into the TaskList is unsuccessful."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static TaskList parse(Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            File file \u003d new File(storage.getFilePath());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                String[] arr \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                String type \u003d LoadValidation.getValidatedTaskType(arr[0].trim());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                assert type.equals(\"T\") || type.equals(\"D\") || type.equals(\"E\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        : \"Exception meant to be thrown for wrong Task type \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"but exception was not thrown.\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                LoadValidation.ensureValidNumberOfTokens(type, arr);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                assert arr.length \u003d\u003d 3 || arr.length \u003d\u003d 4 : \"Exception meant to be thrown for invalid number of tokens \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"but exception was not thrown.\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                boolean isDone \u003d LoadValidation.getValidatedDoneStatus(arr[1].trim()) \u003d\u003d 1 ? true : false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                String taskString \u003d arr[2].trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                DateAndTime dateAndTime \u003d null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Validation.ensureNonEmptyTaskString(type, taskString);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                assert !taskString.equals(\"\") : \"Task Description is empty in Parser but no exception was thrown.\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    dateAndTime \u003d EventValidation.getValidatedDateAndTime(arr[3]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    assert dateAndTime !\u003d null : \"DateAndTime of Task parsed in Parser is invalid \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                            + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    taskList.add(new Event(taskString, dateAndTime, isDone));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    dateAndTime \u003d DeadlineValidation.getValidatedDateAndTime(arr[3]);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    assert dateAndTime !\u003d null : \"DateAndTime of Task parsed in Parser is invalid \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                            + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    taskList.add(new Deadline(taskString, dateAndTime, isDone));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    taskList.add(new Todo(taskString, isDone));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new FileNotFoundException(\"We cannot find your file.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 203
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/validation/DeadlineValidation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.commandexceptions.InvalidTaskDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.dateandtimeexceptions.InvalidDateAndTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.dateandtimeexceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a DeadlineValidation class containing static methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Validates Strings parsed to create a Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Inherits methods from Validation class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DeadlineValidation extends Validation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String array of two elements containing task description and date / time respectively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param descriptionAndDateTimeString String in the form [task description] [\" /by \"] [date and optional time]."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String array of two elements containing task description and date / time respectively."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTaskDescriptionException If the format of the String entered is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String[] getValidatedDescriptionAndDateTime(String descriptionAndDateTimeString)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws InvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Validation.getValidatedDescriptionAndDateTime(descriptionAndDateTimeString, \" /by \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String array of two elements containing date and time respectively."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTimeString String in the form of either [date] or [date] [time]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String array of two elements containing task description and date / time respectively."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidDateAndTimeException If the format of the String entered is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static DateAndTime getValidatedDateAndTime(String dateAndTimeString) throws InvalidDateAndTimeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] dateTimeArr \u003d dateAndTimeString.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dateTimeArr.length \u003e 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidDateAndTimeException(\"Please ensure date format is either in DD/MM/YYYY format or \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"DD/MM/YYYY HHMM format (24 hours).\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Date date \u003d getValidatedDate(dateTimeArr[0]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dateTimeArr.length \u003e 1 \u0026\u0026 dateTimeArr[1].length() \u003e 4) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTimeException(\"Please ensure time format is in HHMM format (24 hours). \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"Note that there can only be one single argument for time in a Deadline type of Task.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Time time \u003d dateTimeArr.length \u003e 1 ? getValidatedTime(dateTimeArr[1]) : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert date !\u003d null : \"Validated date and time returned for an \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"event contain null DateAndTime objects.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DateAndTime(date, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new DateAndTime(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/validation/EventValidation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.commandexceptions.InvalidTaskDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.dateandtimeexceptions.InvalidDateAndTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.dateandtimeexceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines an EventValidation class containing static methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Validates strings parsed to create an Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Inherits methods from Validation class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class EventValidation extends Validation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String array of two elements containing task description, date, start and end time respectively."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param descriptionAndDateTimeString String in the form [task description] [\" /at \"] [start time] [\"-\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                                     [\"end time]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String array of two elements containing task description, date, start and end time respectively."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTaskDescriptionException If the format of the String entered is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String[] getValidatedDescriptionAndDateTime(String descriptionAndDateTimeString)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws InvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return Validation.getValidatedDescriptionAndDateTime(descriptionAndDateTimeString, \" /at \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String array of three elements containing date, start time and end time respectively."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTimeString String in the form of [date] [start time] [end time]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String array of three elements containing date, start time and end time respectively."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidDateAndTimeException If the format of the String entered is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static DateAndTime getValidatedDateAndTime(String dateAndTimeString) throws InvalidDateAndTimeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] dateTimeArr \u003d dateAndTimeString.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dateTimeArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidDateAndTimeException(\"Please ensure date format is in DD/MM/YYYY HHMM-HHMM \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"format (24 hours).\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Date date \u003d getValidatedDate(dateTimeArr[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] timeArr \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (timeArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTimeException(\"Please ensure time format is in HHMM-HHMM format (24 hours).\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Time timeStart \u003d getValidatedTime(timeArr[0]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Time timeEnd \u003d getValidatedTime(timeArr[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert date !\u003d null \u0026\u0026 timeStart !\u003d null \u0026\u0026 timeEnd !\u003d null : \"Validated date and time returned for an \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"event contain null DateAndTime objects.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new DateAndTime(date, timeStart, timeEnd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/validation/LoadValidation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.loadexceptions.InvalidDoneStatusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.loadexceptions.InvalidTaskTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.loadexceptions.InvalidTokenNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a LoadValidation class containing static methods."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Validates strings parsed from the file pointed to by the file path of a Storage object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Inherits methods from Validation class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class LoadValidation extends Validation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a validated Type of Task represented by a single-character String."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param type Type of task represented by a single-character String."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Validated Type of Task based on given type of Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTaskTypeException If input type of Task is invalid or does not correspond to any"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                                  known Type of Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String getValidatedTaskType(String type) throws InvalidTaskTypeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!(type.equals(\"T\") || type.equals(\"D\") || type.equals(\"E\"))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTaskTypeException(\"Incorrect Type in Load File\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert type.equals(\"T\") || type.equals(\"D\") || type.equals(\"E\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : \"Exception meant to be thrown for wrong Task type \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"but exception was not thrown.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns either 1 or 0, representing whether a Task has been marked as done (completed)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param doneStatus String of either \"0\" or \"1\", with the latter representing that a Task has been marked as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An integer 1 or 0, representing the state of whether a Task has been marked as done in the storage file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidDoneStatusException If doneStatus is anything other than the String \"0\" or \"1\"."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static int getValidatedDoneStatus(String doneStatus) throws InvalidDoneStatusException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            int res \u003d Integer.parseInt(doneStatus);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!(res \u003d\u003d 0 || res \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert res \u003d\u003d 0 || res \u003d\u003d 1 : \"Exception meant to be thrown for wrong done status \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"but exception was not thrown.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return res;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidDoneStatusException(\"Invalid Done Status in Load File\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures that there are valid number of tokens in a line of text in the Storage file representing a Task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param type String representation of Task type in the Storage file, denoted by a single letter."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param arr An array containing words from a line of text separated by spaces, with elements"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *            representing tokens."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTokenNumberException If the number of tokens fails to correspond to that of it\u0027s Task type"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                                     in the line of text."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static void ensureValidNumberOfTokens(String type, String[] arr) throws InvalidTokenNumberException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if ((type.equals(\"D\") || type.equals(\"E\")) \u0026\u0026 arr.length !\u003d 4) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTokenNumberException(\"Incorrect Number of Tokens in Load File\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (type.equals(\"T\") \u0026\u0026 arr.length !\u003d 3) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTokenNumberException(\"Incorrect Number of Tokens in Load File\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert arr.length \u003d\u003d 3 || arr.length \u003d\u003d 4 : \"Exception meant to be thrown for invalid number of tokens \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but exception was not thrown.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 69
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/validation/Validation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.logic.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.commandexceptions.EmptyCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.commandexceptions.InvalidTaskDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.dateandtimeexceptions.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.dateandtimeexceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.listexceptions.InvalidListIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.listexceptions.InvalidListRangeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.listexceptions.InvalidNumberFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Validation class containing static methods."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Validates strings parsed for general purposes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Includes validation for commands, dates, times and lists."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Validation {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String array of two elements containing task description, date, start and end time respectively."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param descriptionAndDateTimeString String in the form [task description] [split token] [date and time]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param splitToken String representing the token that is meant to split the given line of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                   descriptionAndDateTimeString into description and date/ time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String array of two elements containing task description, date and time respectively."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTaskDescriptionException If the format of the String entered is invalid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String[] getValidatedDescriptionAndDateTime(String descriptionAndDateTimeString, String splitToken)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws InvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !splitToken.equals(\"\") : \"A split between description and date/time was requested \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but the split token to be used was empty.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!descriptionAndDateTimeString.contains(splitToken)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTaskDescriptionException(\"Please separate deadline description and date/time by \\\"\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + splitToken + \"\\\". \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"Note that date/time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] arr \u003d descriptionAndDateTimeString.split(splitToken);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTaskDescriptionException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert arr.length \u003d\u003d 2 : \"Invalid length of description and date/ time String \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but exception was not thrown.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new String[]{arr[0], arr[1]};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures a command not meant to trailing strings following it does not have any."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Trailing spaces will be automatically removed by the program."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param command String representation of a single-word command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Description of a task, following a single-word command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTaskDescriptionException If taskString taken in is non-empty."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static void ensureEmptyTaskString(String command, String taskString) throws InvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (!taskString.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTaskDescriptionException(\"There cannot be any additional characters after the \\\"\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + command + \"\\\" command\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \" (other than trailing spaces).\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert taskString.equals(\"\") : \"Exception meant to be thrown for non-empty task description \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but an exception was not thrown\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures a command or task requiring trailing string(s) following it has it / them."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param task Task or single-word command that requires a following description."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Description of a task, following a single-word command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTaskDescriptionException If taskString taken in is empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static void ensureNonEmptyTaskString(String task, String taskString) throws InvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (taskString.equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (task.equals(\"delete\") || task.equals(\"done\") || task.equals(\"random\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidTaskDescriptionException(\"The index for a \" + task + \" command cannot be empty.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (task.charAt(0) \u003d\u003d \u0027a\u0027 || task.charAt(0) \u003d\u003d \u0027e\u0027 || task.charAt(0) \u003d\u003d \u0027i\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || task.charAt(0) \u003d\u003d \u0027o\u0027 || task.charAt(0) \u003d\u003d \u0027u\u0027) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidTaskDescriptionException(\"The description of an \" + task + \" cannot be empty.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidTaskDescriptionException(\"The description of a \" + task + \" cannot be empty.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !taskString.equals(\"\") : \"Exception meant to be thrown for empty task description \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but an exception was not thrown\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures that a user does not enter an empty line of command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param command String representation of a single-word command to the program."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws EmptyCommandException If user inputs an empty line of command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static void ensureNonEmptyCommand(String command) throws EmptyCommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (command.equals(\"\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new EmptyCommandException(\"Command cannot be empty.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !command.equals(\"\") : \"Exception meant to be thrown for empty command \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but an exception was not thrown\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a validated natural number from a String."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString String to be converted to a positive non-zero integer."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param canBeEmpty Denotes whether the String taken in is allowed to be empty, in which case a value of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                   1 will be returned."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A validated natural number converted from the given String."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidNumberFormatException If the numeric representation of the given String is not a natural number."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static int getValidatedNaturalNumber(String taskString, boolean canBeEmpty)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws InvalidNumberFormatException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (taskString.equals(\"\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (!canBeEmpty) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidNumberFormatException(\"Please enter only a valid natural number after the intended \" "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"command (separated by a space).\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int n \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            n \u003d Integer.parseInt(taskString);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (n \u003c\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return n;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidNumberFormatException(\"Please enter only a valid natural number after the intended \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \" command (separated by a space).\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a validated Date object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures that input String is in valid DD/MM/YYYY format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures there are at most 12 months in a year."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures the day of the month in the year entered is valid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param date String representation of a date in DD/MM/YYYY format."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Validated Date object containing the day, month, year of the date parameter."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidDateException If the date entered is invalid."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Date getValidatedDate(String date) throws InvalidDateException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (date.length() !\u003d 10) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidDateException(\"Please ensure date format is in DD/MM/YYYY\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] dateArr \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dateArr.length !\u003d 3) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidDateException(\"Please ensure date format is in DD/MM/YYYY\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int day \u003d 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int month \u003d 0;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int year \u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            day \u003d Integer.parseInt(dateArr[0]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            month \u003d Integer.parseInt(dateArr[1]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            year \u003d Integer.parseInt(dateArr[2]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (day \u003c 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"Calendar day must start from 1\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (month \u003c 1) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"Calendar month must start from 1\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (year \u003c 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"Calendar year must start from 0\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (month \u003e 12) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"There cannot be more than 12 months in a year.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidDateException(\"Please ensure date format is in DD/MM/YYYY\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if ((month \u003c\u003d 7 \u0026\u0026 month % 2 !\u003d 0) || (month \u003e 7 \u0026\u0026 month % 2 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (day \u003e 31) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"There cannot be more than 31 days in \" + Date.getMonth(month));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (month !\u003d 2) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (day \u003e 30) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"There cannot be more than 30 days in \" + Date.getMonth(month));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (Date.isLeapYear(year) \u0026\u0026 day \u003e 29) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"There cannot be more than 29 days in \" + Date.getMonth(month) + \" \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + year + \".\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (!Date.isLeapYear(year) \u0026\u0026 day \u003e 28) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidDateException(\"There cannot be more than 28 days in \" + Date.getMonth(month) + \" \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + year + \".\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 31 : \"Day in Date object to be created is out of range \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d 12 : \"Month in Date object to be created is out of range \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert year \u003e\u003d 0 : \"Year in Date object to be created is out of range \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Date(day, month, year);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a validated Time object."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures that input String is in valid HHMM format."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures hours is not more than 23 and minutes is not more than 59."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param time String representation of a time in HHMM format."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Validated Time object containing the day, month, year of the time parameter."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidTimeException If the time entered is invalid."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Time getValidatedTime(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTimeException(\"Please ensure time format is in HHMM format (24 hours).\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int hour \u003d 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int minute \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            minute \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (hour \u003c 0 || minute \u003c 0) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTimeException(\"Please ensure time format is in HHMM format (24 hours).\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (hour \u003e 23) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTimeException(\"Please check that hours is not more than 23.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (minute \u003e 59) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidTimeException(\"Please check that minutes is not more than 59.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert hour \u003e\u003d 0 \u0026\u0026 hour \u003c 24 : \"Hour of Time object to be created is out of range \""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 59 : \"Minute of Time object to be created is out of range \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return new Time(hour, minute);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an ArrayList of ranges represented by ArrayLists of size 2 denoting start and end indexes of a TaskList."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList of which the validated range is to be returned."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param rangeList String representation of a range in the format of ranges separated by commas."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                  eg. \"3-4, 5-6, 9, 10-11\"."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An ArrayList of ranges represented by ArrayLists of size 2 denoting start and end indexes of a TaskList."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidListIndexException If the TaskList range given is invalid. eg. \"3-5-1\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cInteger\u003e\u003e getValidatedListRange(TaskList tasks, String rangeList)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throws InvalidListIndexException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] ranges \u003d rangeList.split(\",\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e outputRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (String range : ranges) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String[] rangeArray \u003d range.trim().split(\"-\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ArrayList\u003cInteger\u003e intRange \u003d new ArrayList\u003c\u003e(2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (rangeArray.length \u003e 2) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidListRangeException(\"Please ensure ranges of numbers are separated by \""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"commas, and each range contains at most one dash.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (rangeArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                int index \u003d getValidatedListIndex(tasks, rangeArray[0]);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    intRange.add(index);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                int startIndex \u003d getValidatedListIndex(tasks, rangeArray[0]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                int endIndex \u003d getValidatedListIndex(tasks,rangeArray[1]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (startIndex \u003e endIndex) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    throw new InvalidListRangeException(\"The starting number of a list range cannot be more than \""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                            + \"the ending number.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                assert startIndex \u003c\u003d endIndex : \"Starting index of the list is more than the ending index, \""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"but no exception was thrown.\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                intRange.add(startIndex);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                intRange.add(endIndex);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert intRange.size() \u003d\u003d 2 : \"ArrayList containing range of numbers has more or less than the \""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"required number of two elements (representing start and end index.\";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            outputRange.add(intRange);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return outputRange;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a validated index for the given list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Takes in a string and ensures that it is a valid positive integer within the range of the given TaskList "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * (numbered from 1 to n in a TaskList of size n)."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Ensures that any n that is returned will be able to access the TaskList without encountering a general"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * number format exception that will cause the program to terminate in the event that the index is invalid or"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * out of bounds."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Post-condition: A client of this method may use the returned value to access tasks in the TaskList "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * if the String representing the index of the item in the taskList is valid."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList of which the validated index is to be returned."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param k String that represents the ith element of the TaskList (k ranges from 1 to n)."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An integer value i that can be used to access the item in the taskList (i ranges from 0 to n - 1)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidListIndexException If k is less than 0, more than the size of the list or"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                                   cannot be parsed as an integer."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static int getValidatedListIndex(TaskList tasks, String k) throws InvalidListIndexException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (k.equals(\"\")) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidListIndexException(\"Please enter a valid numerical value after the intended command\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \" (separated by a space).\\n\" + \"The number cannot be empty for this command.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int n \u003d 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            n \u003d Integer.parseInt(k);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (n \u003c\u003d 0 || n \u003e tasks.size()) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                tasks.get(n - 1);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                assert false : \"Duke exception was to be thrown to handle invalid list index but \""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"was not thrown. Instead, \" + e.getClass().getCanonicalName() + \" was thrown.\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return n - 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidListIndexException(\"Please enter a valid numerical value from 1 to the taskList\u0027s size\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \" after the intended command (separated by a space).\\n\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"There is currently 1 task in the list.\\n\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"Try entering \\\"list\\\" to view the full list of tasks.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                throw new InvalidListIndexException(\"Please enter a valid numerical value from 1 to the taskList\u0027s size\""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \" after the intended command (separated by a space).\\n\""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"There are currently \" + tasks.size() + \" tasks in the list.\\n\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"Try entering \\\"list\\\" to view the full list of tasks.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 341
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.RandomCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.command.UndoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskListHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines the Duke class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains the main method that is called to run the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TaskListHistory taskListHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of Duke with a default location of storage files."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Files are stored in a text file, inside the current folder where Duke is currently being run."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + (System.getProperty(\"os.name\").startsWith(\"Windows\") ? \"\\\\data\\\\duke.txt\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                : \"/data/duke.txt\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of Duke with it\u0027s Storage for loading and saving data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param filePath Directory where the data file is located or is to be located."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        taskListHistory \u003d new TaskListHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert tasks !\u003d null : \"Duke TaskList is not initialised.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskListHistory.add(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Runs an iteration of the Duke program."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Performs the necessary input command given an input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores modified Tasks to a history of TaskLists for undo and redo functions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param input String representation of input from the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private void run(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            String fullCommand \u003d input;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Command c;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            c \u003d Parser.parse(fullCommand, this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert c !\u003d null : \"Command object to be executed is null.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert tasks !\u003d null : \"TaskList of this Duke instance is null.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert ui !\u003d null : \"Ui of this Duke instance is null.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert storage !\u003d null : \"Storage of this Duke instance is null.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (c instanceof AddCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || c instanceof DoneCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || c instanceof UndoneCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || c instanceof DeleteCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || c instanceof SortCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || c instanceof RandomCommand) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                taskListHistory.add(tasks);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the response of Duke after calling it\u0027s run method."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param input String representation of input from the user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return The response of Duke obtained from it\u0027s Ui after calling the run method of Duke."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert input !\u003d null : \"User input is null.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert input instanceof String : \"User input is not a String.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        run(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return ui.getOutput();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the Ui attribute of this instance of Duke."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Ui instance employed by this Duke object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert ui !\u003d null : \"Ui of this Duke instance is null.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a TaskListHistory object stored in this instance of Duke."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A TaskListHistory object stored in this instance of Duke that contains the timeline of all captured"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *         TaskLists through different operations."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskListHistory getTaskListHistory() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return taskListHistory;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether Duke has been called to exit after the most recent command."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean tha denotes whether or not Duke has been called to terminate by user command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the TaskList stored in this instance of Duke to be the given one in the TaskList parameter."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to replace the current TaskList stored in this instance of Duke."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Resets TaskListHistory to contain only the current TaskList."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * WARNING: This action CANNOT be undone."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void resetTaskListHistory() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskListHistory \u003d new TaskListHistory();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        taskListHistory.add(tasks);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "whneo97": 139
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/dateandtime/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.dateandtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Date object containing a day, month and year attribute."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Date implements Comparable\u003cDate\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of Date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param day Day of the month starting from 1 to the last day of the month."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param month Numerical representation of a month from 1 to 12."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param year Year beginning from 0 AD."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Date(int day, int month, int year) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of the month from its numerical representation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param month Numerical representation of a month from 1 to 12."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of the month (eg. January) converted from its numerical representation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String getMonth(int month) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d 12 : \"Month for which String representation is requested is out of range.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return month \u003d\u003d 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"January\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"February\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 3"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"March\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 4"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"April\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 5"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"May\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 6"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"June\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 7"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"July\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 8"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"August\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 9"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"September\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 10"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"October\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 11"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"November\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : month \u003d\u003d 12"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"December\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether a given year is a leap year."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param year Integer year between 0-9999."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean of whether or not the given year is a leap year."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (year % 400 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int compareTo(Date other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (this.year \u003c other.year) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.year \u003e other.year) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.month \u003c other.month) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.month \u003e other.month) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.day \u003c other.day) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.day \u003e other.day) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of a Date instance."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of a Date instance in DD/MM/YYYY format."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d 31 : \"Day in Date object is out of range.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d 12 : \"Month in Date object is out of range.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert year \u003e\u003d 0 : \"Year in Date object is out of range.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return String.format(\"%02d\", day)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"/\" + String.format(\"%02d\", month)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"/\" + String.format(\"%04d\", year);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 105
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/dateandtime/DateAndTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.dateandtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a DateAndTime object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Consists of different combination of Date and Time objects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DateAndTime implements Comparable\u003cDateAndTime\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Time timeStart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Time timeEnd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DateAndTime in [Date] format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a Date object as it\u0027s attribute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param date Date object representing the date stored by an instance of this class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DateAndTime(Date date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DateAndTime in [Date] [Time] format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a Date and Time object (ending time) as it\u0027s attributes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param date Date object representing the date stored by an instance of this class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param timeEnd Time object representing the ending time stored by an instance of this class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DateAndTime(Date date, Time timeEnd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.timeEnd \u003d timeEnd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DateAndTime in [Date] [Time] [Time] format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a Date and two Time objects (both starting and ending time) as it\u0027s attributes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param date Date object representing the date stored by an instance of this class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param timeStart Time object representing the starting time stored by an instance of this class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param timeEnd Time object representing the ending time stored by an instance of this class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DateAndTime(Date date, Time timeStart, Time timeEnd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(date, timeEnd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.timeStart \u003d timeStart;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a Date object stored as an attribute of this DateAndTime instance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Date object representing the date stored in this DateAndTime instance."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a Time object (starting time) stored as an attribute of this DateAndTime instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Time object representing the starting Time stored in this DateAndTime instance."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Time getTimeStart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return timeStart;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a Time object (ending time) stored as an attribute of this DateAndTime instance."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Time object representing the ending Time stored in this DateAndTime instance."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Time getTimeEnd() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return timeEnd;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int compareTo(DateAndTime other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (this.date.compareTo(other.date) \u003c 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.date.compareTo(other.date) \u003e 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.timeStart !\u003d null \u0026\u0026 other.timeStart !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return this.timeStart.compareTo(other.timeStart);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.timeStart \u003d\u003d null \u0026\u0026 other.timeStart !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (this.timeEnd !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return this.timeEnd.compareTo(other.timeStart);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.timeStart !\u003d null \u0026\u0026 other.timeStart \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.timeStart \u003d\u003d null \u0026\u0026 this.timeEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (this.timeEnd !\u003d null \u0026\u0026 other.timeEnd !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (this.timeEnd.compareTo(other.timeEnd) \u003c 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else if (this.timeEnd.compareTo(other.timeEnd) \u003e 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (this.timeEnd \u003d\u003d null \u0026\u0026 other.timeEnd !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of a DateAndTime instance."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of a DateAndTime instance, with Time followed by Date."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert date !\u003d null : \"DateAndTime object is empty.\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (timeEnd \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"\" + date;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.timeStart \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"\" + date + \" \" + timeEnd;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"\" + date + \" \" + timeStart + \"-\" + timeEnd;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 112
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/dateandtime/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.dateandtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Time object containing hour and minute as attributes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Time implements Comparable\u003cTime\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int hour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int minute;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of Time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param hour Hour component of the 24 hour clock."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param minute Minute component of the 24 hour clock."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Time(int hour, int minute) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.minute \u003d minute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int compareTo(Time other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (this.hour \u003c other.hour) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.hour \u003e other.hour) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.minute \u003c other.minute) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this.minute \u003e other.minute) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of a Time instance."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of a Time instance in HHMM format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert hour \u003e\u003d 0 \u0026\u0026 hour \u003c 24 : \"Hour of Time object is out of range.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 59 : \"Minute of Time object is out of range.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return String.format(\"%02d\", hour) + String.format(\"%02d\", minute);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Deadline object that represents a deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Inherits attributes and methods from Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a Deadline object with a task description and due date (and possibly time)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTime DateAndTime object representing the date (and possibly time) which the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                    with given deadline is due by."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Deadline(String taskString, DateAndTime dateAndTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(Type.DEADLINE, taskString, dateAndTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert dateAndTime !\u003d null : \"Deadline instance created does not contain \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"DateAndTime attribute\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a Deadline object with a task description, due date (and possibly time) and isDone state."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Allows a client of this client to define whether this Deadline has been completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of the Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTime DateAndTime object representing the date (and possibly time) which the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                    with given deadline is due by."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param isDone A boolean that denotes whether or not the Deadline to be created has already been completed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Deadline(String taskString, DateAndTime dateAndTime, boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(taskString, dateAndTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert dateAndTime !\u003d null : \"Deadline instance created does not contain \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"DateAndTime attribute\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.setIsDone(isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.getIsDone() \u003d\u003d isDone : \"Done status of Task differs from status intended to be set.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of a Deadline instance."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of a Deadline instance, including the date (and possibly time)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.getDateAndTime() !\u003d null : \"String representation of Deadline instance returned does not contain \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"DateAndTime attribute\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return super.toString() + \" (by: \" + this.getDateAndTime() + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines an Event object that represents a event task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Inherits attributes and methods from Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an Event object with a task description, along with date and time of Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTime DateAndTime object representing the date and time during which the Event is occurring."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Event(String taskString, DateAndTime dateAndTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(Type.EVENT, taskString, dateAndTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert dateAndTime !\u003d null : \"Event instance created does not contain \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"DateAndTime attribute\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a Deadline object with a task description, along with date and time of Event, and isDone state."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Allows a client of this client to define whether this Event has been completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of the Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTime DateAndTime object representing the date and time during which the the Event is occurring."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param isDone A boolean that denotes whether or not the Event to be created has already been completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Event(String taskString, DateAndTime dateAndTime, boolean isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(taskString, dateAndTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert dateAndTime !\u003d null : \"Event instance created does not contain \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"DateAndTime attribute\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.setIsDone(isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.getIsDone() \u003d\u003d isDone : \"Done status of Task differs from status intended to be set.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of an Event instance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of an Event instance, including the date, start and end time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.getDateAndTime() !\u003d null : \"String representation of Event instance returned does not contain \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"DateAndTime attribute\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return super.toString() + \" (at: \" + this.getDateAndTime() + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Task object that represents a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public enum Type {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TODO, DEADLINE, EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String taskString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private DateAndTime dateAndTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private boolean markedAsDelete \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static int count;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int listIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    // Comparators used to compare Task objects based on different criteria."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e stringComparator \u003d Comparator.comparing((Task x) -\u003e x.taskString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e revStringComparator \u003d stringComparator.reversed();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e dateAndTimeComparator \u003d (Task x, Task y)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        -\u003e x.dateAndTime \u003d\u003d null \u0026\u0026 y.dateAndTime \u003d\u003d null ? stringComparator.compare(x, y)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : x.dateAndTime \u003d\u003d null ? 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : y.dateAndTime \u003d\u003d null ? -1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : x.dateAndTime.compareTo(y.dateAndTime) \u003e 0 ? 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : x.dateAndTime.compareTo(y.dateAndTime) \u003c 0 ? -1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : stringComparator.compare(x, y);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e revDateAndTimeComparator \u003d (Task x, Task y)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        -\u003e x.dateAndTime \u003d\u003d null \u0026\u0026 y.dateAndTime \u003d\u003d null ? stringComparator.compare(x, y)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : x.dateAndTime \u003d\u003d null ? -1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : y.dateAndTime \u003d\u003d null ? 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : x.dateAndTime.compareTo(y.dateAndTime) \u003e 0 ? -1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : x.dateAndTime.compareTo(y.dateAndTime) \u003c 0 ? 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : stringComparator.compare(x, y);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e doneComparator \u003d (Task x, Task y)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        -\u003e x.isDone \u0026\u0026 !y.isDone ? -1 : y.isDone \u0026\u0026 !x.isDone ? 1 : stringComparator.compare(x, y);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e undoneComparator \u003d (Task x, Task y)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        -\u003e y.isDone \u0026\u0026 !x.isDone ? -1 : x.isDone \u0026\u0026 !y.isDone ? 1 : stringComparator.compare(x, y);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e idComparator \u003d Comparator.comparingInt((Task x) -\u003e x.id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e revIdComparator \u003d idComparator.reversed();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e typeComparator \u003d (Task x, Task y)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        -\u003e x.type.toString().compareTo(y.type.toString()) \u003d\u003d 0"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ? stringComparator.compare(x, y)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : x.type.toString().compareTo(y.type.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static Comparator\u003cTask\u003e revTypeComparator \u003d (Task x, Task y)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        -\u003e x.type.toString().compareTo(y.type.toString()) \u003d\u003d 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ? stringComparator.compare(x, y)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        : y.type.toString().compareTo(x.type.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a Task object with a task description, type and date / time if any."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param type Type of Task to be created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTime DateAndTime object representing the date and time associated with this task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                    If there is no DateAndTime associated with this task, a client of this class may pass in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                    null for this parameter."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Task(Type type, String taskString, DateAndTime dateAndTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskString \u003d taskString;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Task.count++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.id \u003d Task.count;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an entirely new Task object copy with the same attributes as that of this Task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Copy of this Task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Task copy() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DateAndTime dateAndTime \u003d this.getDateAndTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (dateAndTime !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.dateAndTime \u003d new DateAndTime(dateAndTime.getDate(), dateAndTime.getTimeStart(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    dateAndTime.getTimeEnd());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Task copy;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (this instanceof Todo) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            copy \u003d new Todo(this.taskString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (this instanceof Event) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            copy \u003d new Event(this.taskString, dateAndTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            copy \u003d new Deadline(this.taskString, dateAndTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        copy.id \u003d this.id;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        copy.isDone \u003d this.isDone;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        copy.markedAsDelete \u003d this.markedAsDelete;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String that indicates that this Task instance has been added to the given TaskList."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Indicates also the updated number of tasks in the given TaskList"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Pre-condition: This Task has indeed been added to the given TaskList."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to which this Task has been added."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String indicating that this Task instance has been added to the given TaskList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String addedMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String s \u003d \"Got it. I\u0027ve added this task:\\n  \" + this + \"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Now you have \" + tasks.size();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d \" task in the list.\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }  else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d \" tasks in the list.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert tasks.size() \u003e 0 : \"Task is claimed to have been added to TaskList but TaskList contains less than \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"1 item.\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String that indicates that this Task instance has been removed from the given TaskList."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Indicates also the updated number of tasks remaining in the given TaskList"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Pre-condition: This Task has indeed been removed to the given TaskList."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to which this Task has been removed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String indicating that this Task instance has been removed from the given TaskList."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String deletedMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String s \u003d \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + this + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (tasks.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d \"Now you have 1 task in the list.\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String that indicates that this Task instance has been marked as done."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Pre-condition: This Task has indeed been marked as done."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String indicating that this Task instance has been marked as done."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String doneMessage() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n  \" + this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the task description of this Task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Task description of this Task stored in the taskString attribute."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getTaskString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert taskString !\u003d null : \"Task does not have a task description\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return taskString;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the state of whether the Task has been marked as done (completed)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean stored in the isDone attribute denoting whether the Task has been marked as done (completed)."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the type of Task stored in this Task instance\u0027s type attribute."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Represented by Type constant."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Type of task stored in this Task instance\u0027s type attribute."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a DateAndTime object stored in this Task instance\u0027s dateAndTime attribute."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns null if this Task has no date and time associated with it."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return DateAndTime object stored in this Task instance\u0027s dateAndTime attribute."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public DateAndTime getDateAndTime() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the boolean of whether this Task instance is to be marked as delete."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return True or false boolean on whether this Task instance is to be marked as delete."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean getMarkedAsDelete() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return markedAsDelete;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets this instance of task to be marked as deleted."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Post-requisite: The Duke program will delete all tasks that have been marked to be deleted."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void markAsDelete() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        markedAsDelete \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the state of whether this Task has been completed."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param isDone A boolean passed in by a client of this method to determine whether this Task has been marked as"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *               done."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.isDone \u003d\u003d isDone : \"State of whether Task has been completed was intended to be set \""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but was not set by system.\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a comparator that compares tasks based on the tasks\u0027 DateAndTime attribute."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A DateAndTime Comparator of this class."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getDateAndTimeComparator() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return dateAndTimeComparator;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a reversed comparator that compares tasks based on the tasks\u0027 DateAndTime attribute."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A reversed DateAndTime Comparator of this class (latest date first)."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getRevDateAndTimeComparator() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return revDateAndTimeComparator;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a comparator that compares tasks based on their done status. (done tasks sorted first.)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A done status comparator of this class that arranges done tasks first."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getDoneComparator() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return doneComparator;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a comparator that compares tasks based on their done status. (undone tasks sorted first.)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A done status comparator of this class that arranges undone tasks first."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getUndoneComparator() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return undoneComparator;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a comparator that compares tasks based on the order which they are created."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An id comparator of this class that arranges tasks in order of their id."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getIdComparator() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return idComparator;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a reversed comparator that compares tasks based in reverse order which they are created."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A reversed id comparator of this class that arranges tasks in reverse order of their id."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getRevIdComparator() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return revIdComparator;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a comparator that compares tasks based on their type, in alphabetical order."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A Type comparator of this class that arranges tasks in order of their type."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getTypeComparator() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return typeComparator;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a reversed comparator that compares tasks based on their type, in reverse alphabetical order."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A reversed Type comparator of this class that arranges tasks in reverse order of their type."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getRevTypeComparator() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return revTypeComparator;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a comparator that compares tasks based on the tasks\u0027 descriptions."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A task description comparator of this class."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getStringComparator() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return stringComparator;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a reversed comparator that compares tasks based on the tasks\u0027 descriptions."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A task description comparator of this class (reverse alphabetical order)."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Comparator\u003cTask\u003e getRevStringComparator() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return revStringComparator;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Generates a random Task with random attributes."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Each random Task has a randomly generated integer ID in its description."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Randomly generated task of random type, task description and date/ time."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static Task generateRandomTask() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // Generates Task description id from random alphabets, numerical digits and spaces."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String id \u003d \"\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        char[] randCharBox \u003d new char[62];"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i++) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            randCharBox[i] \u003d (char) (i + 65);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int j \u003d 26; j \u003c 36; j++) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            randCharBox[j] \u003d (char) (j + 22);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int k \u003d 36; k \u003c 62; k++) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            randCharBox[k] \u003d (char) (k + 61);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int lastIndexOfSpace \u003d 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randIdSize \u003d 5 + rand.nextInt(10);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c randIdSize; i++) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (i \u003e lastIndexOfSpace + 3) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                boolean generateSpace \u003d rand.nextBoolean();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (generateSpace \u003d\u003d true) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    id +\u003d \" \";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    lastIndexOfSpace \u003d i;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            id +\u003d randCharBox[rand.nextInt(61)];"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        boolean randIsDone \u003d rand.nextBoolean();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String taskString \u003d \"rand \" + \" \" + id;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        // Randomly generates whether date of Deadline is DD/MM/YYYY format or DD/MM/YYYY HHMM format."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randDateFormat \u003d rand.nextInt(2);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randYear \u003d rand.nextInt(10000);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randMonth \u003d 1 + rand.nextInt(12);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int numOfDays \u003d randMonth \u003d\u003d 2"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? (Date.isLeapYear(randYear) ? 29 : 28)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : (randMonth \u003c\u003d 7 \u0026\u0026 randMonth % 2 !\u003d 0) || (randMonth \u003e 7 \u0026\u0026 randMonth % 2 \u003d\u003d 0)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? 31"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : 30;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randDay \u003d 1 + rand.nextInt(numOfDays);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randStartHour \u003d rand.nextInt(24);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randStartMin \u003d rand.nextInt(60);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randEndHour \u003d rand.nextInt(24);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randEndMin \u003d rand.nextInt(60);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Date randDate \u003d new Date(randDay, randMonth, randYear);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Time randStartTime \u003d new Time(randStartHour, randStartMin);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Time randEndTime \u003d new Time(randEndHour, randEndMin);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int randType \u003d rand.nextInt(3);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Type type \u003d randType \u003d\u003d 0 ? Type.TODO : randType \u003d\u003d 1"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? Type.EVENT : Type.DEADLINE;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (type \u003d\u003d Type.TODO) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            task \u003d new Todo(taskString, randIsDone);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (type \u003d\u003d Type.DEADLINE) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            DateAndTime randDateAndTime \u003d randDateFormat \u003d\u003d 0"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    ? new DateAndTime(randDate)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    : new DateAndTime(randDate, randEndTime);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            task \u003d new Deadline(taskString, randDateAndTime, randIsDone);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            DateAndTime randDateAndTime \u003d new DateAndTime(randDate, randStartTime, randEndTime);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            task \u003d new Event(taskString, randDateAndTime, randIsDone);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of a Task instance."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Formats the String to be returned such that it contains the Task\u0027s as type, state of whether it has been"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * completed, and task description in this order."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of a Task instance."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert taskString !\u003d null : \"Task does not have a task description\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String doneString \u003d isDone \u003d\u003d true ? \"[+]\" : \"[ ]\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return \"[\" + type.toString().charAt(0) + \"]\" + doneString + \" \" + this.taskString;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 390
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.listexceptions.InvalidSortCriteriaException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a TaskList object that stores instances of Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a TaskList with the same contents as the TaskList of the given Storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param storage Storage from which this TaskList is to copy its initial content of Tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList sourceList \u003d storage.getTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c sourceList.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.taskList.add(sourceList.get(i).copy());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert sourceList.size() \u003d\u003d this.size() : \"Size of TaskList copied from Storage differs from \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"size of original TaskList in Storage.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a TaskList with an initial capacity of 100;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Initialises an ArrayList of Tasks with initial capacity of 100 to implement this TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a copy of an existing TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskList TaskList with contents to be copied into this TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            this.add(taskList.get(i).copy());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert taskList.size() \u003d\u003d this.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Removes the given Task from this TaskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param task Task to be removed from this TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void remove(Task task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int sizeBefore \u003d taskList.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        taskList.remove(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int sizeAfter \u003d taskList.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert sizeAfter !\u003d sizeBefore : \"Task was called to be removed from TaskList but \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"size of TaskList remained unchanged.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert sizeAfter \u003d\u003d sizeBefore - 1 : \"One item was meant to be removed from the TaskList \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but the difference in sizes of the lists before and after is not 1.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Adds the given Task to this TaskList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param task Task to be added to this TaskList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int sizeBefore \u003d taskList.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int sizeAfter \u003d taskList.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert sizeAfter !\u003d sizeBefore : \"Task was called to be added to TaskList but \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"size of TaskList remained unchanged.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert sizeAfter \u003d\u003d sizeBefore + 1 : \"One item was meant to be added to the TaskList \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"but the difference in sizes of the lists before and after is not 1.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a done message after a / multiple Task(s) have been marked as done in this TaskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param rangeList ArrayList of ranges, represented by ArrayLists containing two elements each."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                  First element represents starting index while second element represents ending index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                  (both inclusive)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A done message after a / multiple Task(s) have been marked as done from this TaskList."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *         Indicates to client successful marking of Task(s) as done and lists out"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *         all Task(s) that have been marked as done."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String markAsDone(ArrayList\u003cArrayList\u003cInteger\u003e\u003e rangeList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList doneTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (ArrayList\u003cInteger\u003e range : rangeList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int i \u003d range.get(0); i \u003c\u003d range.get(1); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Task task \u003d get(i);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                task.setIsDone(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                doneTasks.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (doneTasks.size() \u003d\u003d this.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"Nice! I\u0027ve marked all tasks as done.\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (doneTasks.size() \u003e 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"Nice! I\u0027ve marked these tasks as done:\\n\" + doneTasks + \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"Nice! I\u0027ve marked this task as done:\\n\" + doneTasks.get(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns an undone message after a / multiple Task(s) have been marked as undone in this TaskList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param rangeList ArrayList of ranges, represented by ArrayLists containing two elements each."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                  First element represents starting index while second element represents ending index"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                  (both inclusive)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An undone message after a / multiple Task(s) have been marked as undone from this TaskList."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *         Indicates to client successful marking of Task(s) as undone and lists out"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *         all Tasks(s) that have been marked as undone."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String markAsUndone(ArrayList\u003cArrayList\u003cInteger\u003e\u003e rangeList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList undoneTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (ArrayList\u003cInteger\u003e range : rangeList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int i \u003d range.get(0); i \u003c\u003d range.get(1); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Task task \u003d get(i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                task.setIsDone(false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                undoneTasks.add(task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (undoneTasks.size() \u003d\u003d this.size()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"Nice! I\u0027ve marked all tasks as undone.\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (undoneTasks.size() \u003e 1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"Nice! I\u0027ve marked these tasks as undone:\\n\" + undoneTasks;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"Nice! I\u0027ve marked this task as undone:\\n\" + undoneTasks.get(0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a deleted message after a / multiple Task(s) have been deleted from this TaskList."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param rangeList ArrayList of ranges, represented by ArrayLists containing two elements each."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                  First element represents starting index while second element represents ending index"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                  (both inclusive)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A deleted message after a / multiple Task(s) have been deleted from this TaskList."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *         Indicates to client successful deletion and lists out all Task(s)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *         that have been deleted."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String removeRanges(ArrayList\u003cArrayList\u003cInteger\u003e\u003e rangeList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (ArrayList\u003cInteger\u003e range : rangeList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int i \u003d range.get(1); i \u003e\u003d range.get(0); i--) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.get(i).markAsDelete();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList deletedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d this.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Task task \u003d this.get(i);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (task.getMarkedAsDelete() \u003d\u003d true) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                deletedTasks.add(task);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                int sizeBefore \u003d this.size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.remove(task);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                int sizeAfter \u003d this.size();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                assert sizeAfter !\u003d sizeBefore : \"Task was called to be removed from TaskList but \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"size of TaskList remained unchanged.\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                assert sizeAfter \u003d\u003d sizeBefore - 1 : \"One item was meant to be removed from the TaskList \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"but the difference in sizes of the lists before and after is not 1.\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Collections.reverse(deletedTasks.taskList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int prevSize \u003d this.size();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (deletedTasks.size() \u003d\u003d prevSize) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return \"Noted. I\u0027ve removed all tasks in the task list.\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (deletedTasks.size() \u003e 1) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s \u003d \"Noted. I\u0027ve removed these tasks:\\n\" + deletedTasks + \"\\n\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s \u003d \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + deletedTasks.get(0) + \"\\n\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d \"Now you have 1 task in the list.\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d \"Now you have \" + this.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the size of this TaskList."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An integer representing the number of Tasks in this TaskList."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int res \u003d taskList.size();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert res \u003e\u003d 0 : \"TaskList size returned is less than zero.\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the Task at the specified position of this TaskList."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param i Position of the Task to be retrieved, from index 0 to n-1 in a TaskList of n elements."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Task at given index of this TaskList."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Task get(int i) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert task !\u003d null \u0026\u0026 task instanceof Task : \"Invalid Task returned from TaskList.\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a TaskList with search results for this TaskList."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Search keywords may contain the task description of tasks to be searched for,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * the status of whether tasks have been marked as done, the types of task, date / time"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * (in DD/MM/YYYY and HHMM format respectively), and separator keywords for the type of task"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * (eg. \"at\" for event and \"by\" for deadline)."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * If none of the task descriptions, types, done statuses, dates/ times etc. of all the tasks match the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * search keyword, the method returns an empty TaskList."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Keywords to be used to search this TaskList for relevant Tasks."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return TaskList containing keywords searched for in the given taskString."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskList find(String taskString) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList searchResults \u003d new TaskList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Task task \u003d taskList.get(i);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // If search keywords contain the task description or vice versa."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // the task is added to the list of search results."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (task.getTaskString().contains(taskString)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || taskString.contains(task.getTaskString())) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // If search keyword is \"done\" (i.e. search for tasks which have been marked as completed,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // the task is added to the list of search results if it has been marked as done."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (task.getIsDone() \u003d\u003d true \u0026\u0026 taskString.equals(\"done\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // If search keyword is \"undone\" or \"not done\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // (i.e. search for tasks which have yet to be marked as completed),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // the task is added to the list of search results if it has yet to be marked as done."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (task.getIsDone() \u003d\u003d false \u0026\u0026 (taskString.equals(\"undone\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || taskString.contains(\"not done\"))) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // If search keywords contain type of task (eg. deadline, event etc.),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // the task is added to the list of search results if it\u0027s type matches the type to be searched for."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // Type of task can be in any case (uppercase / lowercase)."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (task.getType().toString().toLowerCase().contains(taskString.toLowerCase())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || taskString.toLowerCase().contains(task.getType().toString().toLowerCase())) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // If search keywords are contained in the date (DD/MM/YYYY format) or time (HHMM format) attributes"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // of the task, the task is added to the list of search results."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (task.getDateAndTime() !\u003d null"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 task.getDateAndTime().toString().contains(taskString)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || taskString.contains(task.getTaskString())) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // If search keyword is \"at\" for an event-type task or search keyword is \"by\" for an event-type task,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // the task is added to the list of search results if it is an event-type or"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            // deadline type task respectively."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if ((task.getType().toString().equals(\"EVENT\") \u0026\u0026 taskString.equals(\"at\"))"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    || (task.getType().toString().equals(\"DEADLINE\") \u0026\u0026 taskString.equals(\"by\"))) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sorts this TaskList of Tasks based on the given criteria by a client that calls this method."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param criteria Client\u0027s request on the order criteria by which to sort the Tasks in this TaskList by."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws InvalidSortCriteriaException If Duke does not understand the criteria it is given to sort"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                                      this TaskList."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void sort(String criteria) throws InvalidSortCriteriaException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (criteria.equals(\"description\")) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getStringComparator());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"revdescription\")) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getRevStringComparator());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"date\")) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getDateAndTimeComparator());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"revdate\")) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getRevDateAndTimeComparator());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"done\")) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getDoneComparator());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"undone\")) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getUndoneComparator());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"id\")) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getIdComparator());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"revid\")) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getRevIdComparator());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"type\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getTypeComparator());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (criteria.equals(\"revtype\")) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            taskList.sort(Task.getRevTypeComparator());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new InvalidSortCriteriaException(\"Sort criteria not found.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns whether or not a Task with given attributes already exists in the TaskList."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param command Type of Task belonging to the Task for which client intends to find duplicates for."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of given Task for which client intends to find duplicates for."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param dateAndTime Date and / or Time of given Task for which client intends to find duplicates for."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return A boolean on whether or not a Task with given attributes already exists in the TaskList."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public boolean hasExistingTask(String command, String taskString, DateAndTime dateAndTime) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            Task task \u003d this.get(i);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (command.equals(task.getType().toString().toLowerCase())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    \u0026\u0026 task.getTaskString().equals(taskString)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (task.getDateAndTime() !\u003d null \u0026\u0026 dateAndTime !\u003d null) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    if (task.getDateAndTime().compareTo(dateAndTime) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else if (task.getDateAndTime() \u003d\u003d null \u0026\u0026 dateAndTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the String representation of a TaskList instance."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Formats elements in the TaskList as a list, numbered from 1 to n, where n is the size of the taskList."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of a TaskList instance."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String out \u003d \"\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            out +\u003d count + \".\" + task + \"\\n\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert count - 1 \u003d\u003d taskList.size() : \"TaskList numbering does not match size of TaskList\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return out.trim();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 341
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/task/TaskListHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.historyexceptions.CannotRedoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.historyexceptions.CannotUndoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a TaskList history object that stores all created instances of TaskLists in memory."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Saves all TaskList until program exits."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class TaskListHistory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int curr \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ArrayList\u003cTaskList\u003e listOfTaskLists;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a TaskListHistory instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Initialises an empty list of TaskLists that will be used to store TaskLists."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskListHistory() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.listOfTaskLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Adds a TaskList to TaskListHistory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskList TaskList that is to be added to this TaskListHistory object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void add(TaskList taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        TaskList copy \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (curr \u003d\u003d listOfTaskLists.size() - 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            listOfTaskLists.add(copy);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            curr++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            curr++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            listOfTaskLists.set(curr, copy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        size \u003d curr + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the previous version oft the TaskList from the list of stored TaskLists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Next older TaskList from the list of saved TaskLists."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws CannotUndoException If there are no older versions of TaskLists stored in TaskList history"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                             to be returned."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskList undo() throws CannotUndoException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (curr \u003c\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new CannotUndoException(\"Cannot undo. There are no older versions of the TaskList stored in \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"memory.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            curr--;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new TaskList(listOfTaskLists.get(curr));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the next newer version oft the TaskList from the list of stored TaskList before it was reverted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Next most recent TaskList from the list of saved TaskLists."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws CannotRedoException If there are no newer versions of TaskLists stored in TaskList history"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     *                             to be returned."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskList redo() throws CannotRedoException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (curr \u003d\u003d size - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new CannotRedoException(\"Cannot redo. There are no newer versions of the TaskList stored in \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    + \"memory.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            curr++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return new TaskList(listOfTaskLists.get(curr));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the index of the current active copy of the TaskList."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Index ranges from 0 to the size of TaskListHistory - 1."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Index of current active copy of TaskList in TaskListHistory."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int getCurrIndex() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return this.curr;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the size of TaskListHistory."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Number of stored TaskLists in TaskListHistory."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return this.size;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns String representation of TaskListHistory."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays all tasks stored in the the saved list of Tasks and the current version of TaskList being used."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of list of all Tasks stored in TaskListHistory."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String s \u003d \"-------------------------TASKLIST HISTORY START-------------------------\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int n \u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (TaskList taskList : listOfTaskLists) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d \"\\nTASKLIST NUMBER \" + n + \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (n \u003d\u003d curr + 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                s +\u003d \"CURRENT IS HERE\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            s +\u003d taskList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            n++;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        s +\u003d \"\\n-------------------------TASKLIST HISTORY END----------------------------\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 112
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Todo object that represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Inherits attributes and methods from Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a Todo object with a task description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of the todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Todo(String taskString) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        super(Type.TODO, taskString, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert taskString !\u003d null : \"Task does not have a task description\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.getDateAndTime() \u003d\u003d null : \"Task of type Todo has a DateAndTime attribute that \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"violates the intended properties of a Todo object.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a Todo object with a task description and isDone state."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Allows a client of this client to define whether this Todo has been completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param taskString Task description of the Todo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param isDone A boolean that denotes whether or not the Todo to be created has already been completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Todo(String taskString, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this(taskString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert taskString !\u003d null : \"Task does not have a task description\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.setIsDone(isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.getIsDone() \u003d\u003d isDone : \"Done status of Task differs from status intended to be set.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert this.getDateAndTime() \u003d\u003d null : \"Task of type Todo has a DateAndTime attribute that \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"violates the intended properties of a Todo object.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.loadexceptions.LoadException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.storageexceptions.SavingUnsuccessfulException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Contains a file path and TaskList stored in the file that the file path points to."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String dirPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static final char DIRSEPARATOR \u003d System.getProperty(\"os.name\").startsWith(\"Windows\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ? \u0027\\\\\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            : \u0027/\u0027;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates a Storage object given a file path."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores the file path as an attribute of this particular instance of the Storage class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param filePath String representation of file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.dirPath \u003d getDirAsString(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String representation of the directory the file at filePath is in."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param filePath Path of file to get directory of."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of the directory the file at filePath is in."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String getDirAsString(String filePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        for (int i \u003d filePath.length() - 2; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (filePath.charAt(i) \u003d\u003d DIRSEPARATOR) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String res \u003d filePath.substring(0, index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert res !\u003d null \u0026\u0026 !res.equals(\"\") : \"Directory returned by filepath is empty.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a new Storage object that contains TaskList of Tasks parsed from the file path of this storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Storage object containing TaskList of Tasks parsed from this storage\u0027s file path attribute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException If reading an existing file or creating a new file is unsuccessful."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Storage load() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            File dir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (file.createNewFile()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                this.taskList \u003d Parser.parse(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert this.taskList !\u003d null : \"Storage load method did not create any TaskList\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IOException | DukeException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new LoadException(\"Error loading specified file.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Saves given TaskList to the file located at this Storage\u0027s file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList of Tasks, presumably stored in current memory."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param ui Ui instance used by a client that calls this method."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @throws DukeException If writing to the original file at this Storage\u0027s file path is unsuccessful."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void save(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            File dir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            boolean directoryIsCreated \u003d dir.mkdir();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            boolean fileIsCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                char type \u003d task.getType().toString().charAt(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                char isDone \u003d task.getIsDone() \u003d\u003d true ? \u00271\u0027 : \u00270\u0027;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                String taskString \u003d task.getTaskString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                DateAndTime dateAndTime \u003d task.getDateAndTime();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                String out \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                if (task.getDateAndTime() !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    out \u003d type + \" | \" + isDone + \" | \" + taskString + \" | \" + dateAndTime + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    out \u003d type + \" | \" + isDone + \" | \" + taskString + \"\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                fileWriter.append(out);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            if (directoryIsCreated) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ui.showNotification(\"Original storage directory no longer exists!\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"BUT don\u0027t worry! We have restored a new one in it\u0027s place in the same location and \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"performed the required operation. :)\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            } else if (fileIsCreated) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ui.showNotification(\"Original storage file no longer exists!\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"BUT don\u0027t worry! We have restored a new one in it\u0027s place in the same location and \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                        + \"performed the required operation. :)\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            throw new SavingUnsuccessfulException(\"Critical Error: Saving Unsuccessful.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the file path of this Storage instance as a String."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return This Storage\u0027s filePath attribute."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert filePath !\u003d null \u0026\u0026 !filePath.equals(\"\") : \"File path returned by Storage object is empty.\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the TaskList stored in this instance of Storage."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return This Storage\u0027s taskList attribute."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert taskList !\u003d null : \"TaskList returned by Storage object is empty.\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 147
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A custom control using FXML that represents a dialog box."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Dialog box consists of an ImageView to represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of DialogBox that stores a String and an Image."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param text String representing a message from a party in a conversation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param img An avatar representing the party who sent the given input message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert fxmlLoader !\u003d null : \"fxmlLoader for DialogBox is null\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dialog.setFont(Font.font(\"Calibri\", 14));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dialog.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dialog.setPadding(new Insets(0,0,0,7));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a DialogBox object that represents the User\u0027s part of the dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param text String representation of text input from the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param img Image representing the user in the chat application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return DialogBox object representing the User\u0027s part of the dialog."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert img !\u003d null : \"User profile image is null.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //Colour Experimentation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //db.dialog.setTextFill(Color.rgb(150, 255, 160));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a DialogBox object that represents Duke\u0027s part of the dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param text String representation of text input from Duke."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param img Image representing Duke in the chat application."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return DialogBox object representing Duke\u0027s part of the dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert img !\u003d null : \"Duke profile image is null.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //Colour Experimentation:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //if (!text.equals(Ui.showLogo())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //db.dialog.setTextFill(Color.rgb(255, 255, 180));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 92
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/LogoDialog.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A custom control using FXML that represents a dialog box containing the Duke Logo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Dialog box consists of an ImageView to represent the speaker\u0027s face another ImageView to represent the Duke Logo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class LogoDialog extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ImageView logo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of LogoDialog that stores two Images representing the Duke logo and avatar respectively."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param logo Image representing the Duke logo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param img An avatar representing the party who sent the given input message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private LogoDialog(Image logo, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/LogoDialog.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert fxmlLoader !\u003d null : \"fxmlLoader for LogoDialog is null\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        this.logo.setImage(logo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a LogoDialog object that represents Duke\u0027s part of the dialog."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param logo Image representing the Duke logo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param img Image representing Duke in the chat application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return LogoDialog object representing Duke\u0027s part of the dialog."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static LogoDialog getDukeLogo(Image logo, Image img) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert img !\u003d null : \"Duke profile image is null.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert logo !\u003d null : \"Duke logo image is null.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        var db \u003d new LogoDialog(logo, img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.Duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //Icon made by Smashicons (https://www.flaticon.com/authors/smashicons) from www.flaticon.com"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    //Icon made by Freepik (https://www.flaticon.com/authors/freepik) from www.flaticon.com"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Image developerImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Developer.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Image exceptionImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Oops.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Image logoImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/LogoV3.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Initialises the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Binds height of the dialog container to the scrollPane."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Displays to the user the welcome message of Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                LogoDialog.getDukeLogo(logoImage, dukeImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Sets the Duke instance to be the version of Duke program to be run."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param d A version of Duke to be run from this instance of MainWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing seedu.duke.model.Duke\u0027s reply."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Appends the two dialog boxes to the dialog container."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private void handleUserInput() throws InterruptedException, DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert userImage !\u003d null : \"User profile image is null.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert dukeImage !\u003d null : \"Duke profile image is null.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Image outputImage \u003d dukeImage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (Ui.aboutMessage().equals(response)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert dukeImage !\u003d null : \"Developer profile image is null.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            outputImage \u003d developerImage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        } else if (response.startsWith(\"OOPS!\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            assert dukeImage !\u003d null : \"Exception duke image is null.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            outputImage \u003d exceptionImage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                DialogBox.getDukeDialog(response, outputImage)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        if (duke.getIsExit()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(0.9));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 93
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Defines a Ui class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Interacts with user of the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private static String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates an instance of Ui."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Initialises a Scanner object stored in the sc attribute of this Ui."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String that displays the Duke Logo to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of Duke Logo to be displayed to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String showLogo() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !logo.equals(\"\") : \"Logo to be displayed to user is an empty String.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a message to display to the user an About message about this Duke program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return An about message to display to the user information about this Duke program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String aboutMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String intro \u003d \"Hi! I\u0027m Weihong, developer for this implementation of Duke - \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"a task-managing chatbot designed at NUS for educational purposes, with details as follows!\\n\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String productInfo \u003d \"Product Name: Duke\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Version: V2.4\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Category: Personal Assistant Chatbot\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Software Requirements: Java 11; Mac / Linux / Windows OS\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Developer: Neo Weihong\\n\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String codeInfo \u003d \"This product is free for non-commercial use and its code is \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"publicly available open-source via: https://github.com/whneo97/duke.\\n\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String credits \u003d \"Space background by Andy Holmes (https://unsplash.com/photos/LUpDjlJv4_c)\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"User profile icon by Smashicons (https://www.flaticon.com/authors/smashicons)\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Duke profile icon by Freepik (https://www.flaticon.com/authors/freepik)\\n\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String conclusion \u003d \"Hope you\u0027ll enjoy trying out this simple program!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return intro + productInfo + codeInfo + credits + conclusion;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns a String that displays the welcome message to the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return String representation of the welcome message to be displayed to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public static String showWelcome() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !logo.equals(\"\") : \"Welcome message to be displayed to user is an empty String.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return \"\\nHello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the next line of text obtained from user input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Next line of text obtained from user input via Scanner stored in sc attribute."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores the separator line between program inputs / outputs to be displayed to the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a loading error message to be displayed to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Pre-condition: An error is thrown to the client that calls this method, specifically when loading a file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Error loading specified file.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a notification message to be displayed to the user with the given message."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Pre-condition: A notification is to be displayed to client that calls this method."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Notification message that is to be displayed to a client that calls this method."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showNotification(String message) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output +\u003d \"\\n\\nNotification: \" + message;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores an error message to be displayed to the user with the given message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Pre-condition: An error is thrown to the client that calls this method."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param message Error message from Exception that is thrown to a client that calls this method."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"OOPS!!! \" + message + \"\\n\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Input \\\u0027help [command1] [command2] etc.\\\u0027 for usage information of requested commands or \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"simply input \\\u0027help\\\u0027 for the full list of commands known to this program.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user that a Task has been added to a TaskList."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Presumably called by the Task class when a client adds it to a TaskList."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param addedMessage Message to indicate to the user that a Task has been added to a TaskList."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showAddedMessage(String addedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d addedMessage;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user that a Task has been removed from a TaskList."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Presumably called by the Task class when a client removes it from a TaskList."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param deletedMessage Message to indicate to the user that a Task has been removed from a TaskList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showDeletedMessage(String deletedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d deletedMessage;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user that a Task has been marked as done (completed)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Presumably called by the Task class when a client marks it as done."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param doneMessage Message to indicate to the user that a Task has been marked as done."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showDoneMessage(String doneMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d doneMessage;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user that a Task has been marked as undone (yet to complete)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Presumably called by the Task class when a client marks it as undone."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param undoneMessage Message to indicate to the user that a Task has been marked as undone."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showUndoneMessage(String undoneMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d undoneMessage;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to the be displayed to the user the message that a search on a TaskList has been completed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Completed message is followed by search results."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param searchResults TaskList containing list of search results based on keyword from user input."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showSearchResults(TaskList searchResults) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + searchResults;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user the String representation of a TaskList."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Presumably called along with the toString method of the TaskList class."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to be displayed as its String representation."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + tasks.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user the String representation of a randomly generated TaskList."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Presumably called along with the toString method of the TaskList class."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks Randomly generated TaskList to be displayed as its String representation."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showRandomTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Here are your randomly-generated list of Tasks:\\n\" + tasks"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"\\n\\n\" + \"To revert back to the previous version of the TaskList, use the \\\u0027undo\\\u0027 command or input \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"\\\u0027help\\\u0027 for more information on all commands known to Duke.\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user the String representation of a TaskList that has just been sorted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Presumably called along with the toString method of the TaskList class after a TaskList has been sorted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param tasks TaskList to be displayed as its String representation."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showSortedTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Sorting successful! Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + tasks.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user that the tasklist is currently empty."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showEmptyTaskListMessage() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"You currently have no tasks in the task list!\\n\\nYou may add a Todo, Deadline or Event to the \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"tasklist. Input \\\u0027help\\\u0027 to find out more.\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to be displayed to the user the String representations of all definitions of commands requested."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param helpDefinitions Definitions and usage of the commands to be displayed to the user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showHelpMessage(String helpDefinitions) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d helpDefinitions;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a messsage to be displayed to the user an exit message."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * This message is displayed before the program terminates."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showExitMessage() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the current input of this instance of Ui."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Current input taken in and stored in this instance of Ui."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Returns the current output of this instance of Ui."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @return Current output stored in this instance of Ui."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assert !this.output.equals(\"\") : \"Output displayed to user is empty\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        return this.output;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user that execution of the undo command is successful."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param iterations Number of times undo was performed on the TaskList."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showUndoMessage(int iterations) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String numberOfVersions \u003d iterations \u003d\u003d 1 ? \"1 version\" : iterations + \" versions\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Undo successful. Current task list is now \" + numberOfVersions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \" older than the one before undo was executed.\\n\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Input \\\u0027list\\\u0027 to see the version of the tasklist we have retrieved and saved for you.\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user that undo cannot be performed as many times as requested."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The earliest version of the TaskList stored in memory is retrieved instead."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param iterations Number of times undo was performed on the TaskList."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showMaxUndoMessageReached(int iterations) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String numOfUndosPerformed \u003d iterations \u003d\u003d 1"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"once\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : iterations \u003d\u003d 2"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"twice\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : iterations \u003d\u003d 3"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"thrice\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : \"\" + iterations + \" times\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"We couldn\u0027t undo as many times as you requested. However we have performed undo \""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + numOfUndosPerformed + \" to revert to the earliest version of the TaskList stored in memory.\\n\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Input \\\u0027list\\\u0027 to see the version of the tasklist we have retrieved and saved for you.\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user that execution of the redo command is successful."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param iterations Number of times redo was performed on the TaskList."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showRedoMessage(int iterations) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String numberOfVersions \u003d iterations \u003d\u003d 1 ? \"1 version\" : iterations + \" versions\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Redo successful. Current task list is now \" + numberOfVersions"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \" newer than the one before redo was executed.\\n\\n\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Input \\\u0027list\\\u0027 to see the version of the tasklist we have retrieved and saved for you.\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user that redo cannot be performed as many times as requested."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * The latest version of the TaskList stored in memory is retrieved instead."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * @param iterations Number of times redo was performed on the TaskList."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showMaxRedoMessageReached(int iterations) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String numOfRedosPerformed \u003d iterations \u003d\u003d 1"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"once\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : iterations \u003d\u003d 2"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"twice\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : iterations \u003d\u003d 3"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                ? \"thrice\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                : \"\" + iterations + \" times\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"We couldn\u0027t redo as many times as you requested. However we have performed redo \""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + numOfRedosPerformed + \" to revert to the latest version of the TaskList stored in memory.\\n\\n\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Input \\\u0027list\\\u0027 to see the version of the tasklist we have retrieved and saved for you.\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user an About message about this Duke program."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showAboutMessage() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d Ui.aboutMessage();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user a confirmation method to clear Task history used for undo and redo"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * operations."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showClearCacheConfirmationRequest() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"Are you sure you want to remove all task history?\\n\\n\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"WARNING: THIS ACTION CANNOT BE UNDONE. Once executed, all versions other than the current version \""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"of the tasklist will be deleted and the undo / redo command will no longer be able to retrieve \""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"them even within this same session.\\n\\nTo confirm clearing of cache, type \\\"CoNfiRMtOclEaR\\\" with \""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"the same lettering cases. Otherwise, input any other character or string of text to cancel this \""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"operation.\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Stores a message to display to the user that all TaskLists in TaskList history except for the current one"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * has been cleared."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void showClearCacheConfirmation() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        output \u003d \"All versions of task lists in the undo / redo timeline except for the current task has been \""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"removed as requested.\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 323
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" styleClass \u003d \"dialogBox\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \u003cFont name\u003d\"Calibri\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"76.0\" fitWidth\u003d\"76.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 20
    }
  },
  {
    "path": "src/main/resources/view/LogoDialog.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003cfx:root maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"76.0\" fitWidth\u003d\"76.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cImageView fx:id\u003d\"logo\" fitHeight\u003d\"90.0\" fitWidth\u003d\"203.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \u003cInsets left\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "whneo97": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"anchorPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"647.214\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hvalue\u003d\"1.0\" maxHeight\u003d\"Infinity\" pannable\u003d\"true\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background: transparent;\" styleClass\u003d\"scrollables\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "whneo97": 18
    }
  },
  {
    "path": "src/test/java/seedu/duke/dateandtime/DateAndTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.dateandtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DateAndTimeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Date date \u003d new Date(1, 4, 2018);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Time time \u003d new Time(17, 42);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Assertions.assertEquals(\"01/04/2018 1742\", new DateAndTime(date, time).toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/dateandtime/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.dateandtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetMonth() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Assertions.assertEquals(\"February\", Date.getMonth(2));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"29/02/2019\", new Date(29, 2, 2019).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/dateandtime/TimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.dateandtime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class TimeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Assertions.assertEquals(\"2359\", new Time(23, 59).toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Assertions.assertEquals(\"dir1/dir2\", Storage.getDirAsString(\"dir1/dir2/dummyFile.txt/\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Deadline dummyDeadline \u003d new Deadline(\"dummyString\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            new DateAndTime(new Date(1, 3, 2014)));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Deadline dummyDeadline2 \u003d new Deadline(\"dummyString\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            new DateAndTime(new Date(2, 4, 2024), new Time(14, 4)), true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[D][ ] dummyString (by: 01/03/2014)\", dummyDeadline.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString2() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[D][+] dummyString (by: 02/04/2024 1404)\", dummyDeadline2.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Event dummyEvent \u003d new Event(\"dummyString\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            new DateAndTime(new Date(7, 5, 2031), new Time(12, 32),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    new Time(15, 13)));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Event dummyEvent2 \u003d new Event(\"dummyString\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "            new DateAndTime(new Date(3, 12, 2064),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                    new Time(12, 34), new Time(23, 54)), true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[E][ ] dummyString (at: 07/05/2031 1232-1513)\", dummyEvent.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString2() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[E][+] dummyString (at: 03/12/2064 1234-2354)\", dummyEvent2.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 30
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Task dummyTask \u003d new Todo(\"dummyTaskString\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Task dummyTask2 \u003d new Todo(\"dummyTaskString2\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TaskList dummyTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyAdd() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"1.[T][ ] dummyTaskString\", dummyTasks.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyRemove() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.remove(dummyTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"\", dummyTasks.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGet() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[T][ ] dummyTaskString\", dummyTasks.get(0).toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummySize() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(1, dummyTasks.size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"1.[T][ ] dummyTaskString\\n2.[T][ ] dummyTaskString2\", dummyTasks.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 49
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Task dummyTask \u003d new Todo(\"dummyTaskString\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private TaskList dummyTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyAddedMessage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String s \u003d \"Got it. I\u0027ve added this task:\\n  [T][ ] dummyTaskString\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Now you have 1 task in the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(s, dummyTask.addedMessage(dummyTasks));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyDeletedMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.add(dummyTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTasks.remove(dummyTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String s \u003d \"Noted. I\u0027ve removed this task:\\n[T][ ] dummyTaskString\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"Now you have 0 tasks in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(s, dummyTask.deletedMessage(dummyTasks));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyDoneMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTask.setIsDone(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String s \u003d \"Nice! I\u0027ve marked this task as done:\\n  [T][+] dummyTaskString\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(s, dummyTask.doneMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetTaskString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"dummyTaskString\", dummyTask.getTaskString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetIsDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        dummyTask.setIsDone(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(true, dummyTask.getIsDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(Task.Type.TODO, dummyTask.getType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetDateAndTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(null, dummyTask.getDateAndTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[T][ ] dummyTaskString\", dummyTask.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 64
    }
  },
  {
    "path": "src/test/java/seedu/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Todo dummyTodo \u003d new Todo(\"dummyString\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private Todo dummyTodo2 \u003d new Todo(\"dummyString2\", true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[T][ ] dummyString\", dummyTodo.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyToString2() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"[T][+] dummyString2\", dummyTodo2.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/validation/DeadlineValidationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.DeadlineValidation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class DeadlineValidationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedDescriptionAndDateTimeString() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] arr \u003d DeadlineValidation.getValidatedDescriptionAndDateTime(\"dummyTaskString /by 01/03/2010\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"dummyTaskString\", arr[0]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"01/03/2010\", arr[1]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedDateAndTime() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DateAndTime dummyDateAndTime \u003d DeadlineValidation.getValidatedDateAndTime(\"13/12/2019 0807\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"13/12/2019 0807\", dummyDateAndTime.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/validation/EventValidationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.EventValidation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.DateAndTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class EventValidationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedDescriptionAndDateTimeString() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        String[] arr \u003d EventValidation.getValidatedDescriptionAndDateTime(\"dummyTaskString /at \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                + \"03/01/2017 1400-1600\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"dummyTaskString\", arr[0]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"03/01/2017 1400-1600\", arr[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedDateAndTime() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        DateAndTime dummyDateAndTime \u003d EventValidation.getValidatedDateAndTime(\"11/14/2011 0905-0745\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(\"11/14/2011 0905-0745\", dummyDateAndTime.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/validation/LoadValidationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.LoadValidation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class LoadValidationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedTaskType() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Assertions.assertEquals(\"T\", LoadValidation.getValidatedTaskType(\"T\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedDoneStatus() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals(1, LoadValidation.getValidatedDoneStatus(\"1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/validation/ValidationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "package seedu.duke.validation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.logic.validation.Validation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.model.dateandtime.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import seedu.duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class ValidationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedDate() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Assertions.assertEquals((new Date(13, 9, 2018)).toString(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Validation.getValidatedDate(\"13/09/2018\").toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void dummyGetValidatedTime() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        assertEquals((new Time(11, 55)).toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "                Validation.getValidatedTime(\"1155\").toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whneo97": 25
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "whneo97": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/seedu.duke.model.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whneo97"
        },
        "content": "java -classpath ../bin seedu.duke.model.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whneo97"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whneo97"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whneo97"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whneo97"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whneo97"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "whneo97": 34
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.seedu.duke.model.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whneo97"
        },
        "content": "       mainClassName \u003d seedu"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whneo97"
        },
        "content": "│     └─seedu/duke/seedu.duke.model.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 167,
      "whneo97": 3
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `seedu.duke.model.Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class seedu.duke.model.Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        Application.launch(seedu.duke.model.Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "whneo97": 3
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whneo97"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for seedu.duke.model.Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "In this tutorial, we will be creating a GUI for seedu.duke.model.Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whneo97"
        },
        "content": "![Mockup for seedu.duke.model.Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whneo97"
        },
        "content": "![seedu.duke.model.Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class seedu.duke.model.Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whneo97"
        },
        "content": "![seedu.duke.model.Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whneo97"
        },
        "content": "        stage.setTitle(\"seedu.duke.model.Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whneo97"
        },
        "content": "![seedu.duke.model.Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "whneo97": 8
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whneo97"
        },
        "content": "For seedu.duke.model.Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whneo97"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and seedu.duke.model.Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whneo97"
        },
        "content": "public class seedu.duke.model.Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing seedu.duke.model.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    return \"seedu.duke.model.Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whneo97"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and seedu.duke.model.Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whneo97"
        },
        "content": "You have successfully implemented a fully functional GUI for seedu.duke.model.Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 236,
      "whneo97": 7
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Let\u0027s return to seedu.duke.model.Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whneo97"
        },
        "content": "As part of the effort to separate the code handling seedu.duke.model.Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private seedu.duke.model.Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    public void setDuke(seedu.duke.model.Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whneo97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing seedu.duke.model.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whneo97"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `seedu.duke.model.Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whneo97"
        },
        "content": " * A GUI for seedu.duke.model.Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whneo97"
        },
        "content": "    private seedu.duke.model.Duke duke \u003d new seedu.duke.model.Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 286,
      "whneo97": 8
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whneo97"
        },
        "content": "1. Create a folder `[project root]\\text-validation-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\seedu.duke.model.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   java -classpath ..\\bin seedu.duke.model.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/seedu.duke.model.Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whneo97"
        },
        "content": "   java -classpath ../bin seedu.duke.model.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "whneo97": 5
    }
  }
]
