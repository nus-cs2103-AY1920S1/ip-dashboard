[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a Gui for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "gachia": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "version \u00270.2\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "run {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "    standardInput \u003d System.in;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "    enableAssertions \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "gachia": 42
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "# *Duke*: User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "## Description"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "Duke is a friendly dog who helps remind you of your future tasks, so that you keep on track!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "### *Adding Tasks* "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "Duke is able to remember your tasks! There are 3 types of tasks available to add:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "1) Normal To-do tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "2) Tasks with deadlines"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "3) Events with location"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "### *Marking Tasks*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "Duke is able to mark a task as completed! Stay on top with your task list with it!"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "### *Find Tasks*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "Tell Duke what you wish to search and Duke can tell you the tasks that matches it!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `todo \u003cTask Name\u003e` - Adds a default To-do task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "Adds a *task* into the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "`todo Thing to do`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "`[T][✘] Thing to do`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `deadline \u003cTask Name\u003e /by \u003cDate and Time\u003e` - Adds a To-do task with a deadline"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "Adds a task with a *deadline* into the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "Format of inputted date and time is D/MM/YYYY HHmm."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "`deadline Thing to do /by 2/09/2019 1249`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "`[D][✘] Thing to do (by: 2 September 2019, 12:39PM)`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `event \u003cEvent Name\u003e /at \u003cVenue\u003e` - Adds a Event task with location"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "Adds a *event* with a location into the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "`event Event /at place`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "`[E][✘] Event (at: place)`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `delete \u003cTask Number\u003e` - Deletes task at selected index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "Deletes the task at the selected index from the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "`delete 5`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "`I\u0027ve removed this task: [T][✘] example`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `done \u003cTask Number\u003e` - Marks a task at selected index as completed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "Marks the task at the selected index as completed, with a tick, from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": "`I\u0027ve marked this task as done: [T][✓] example`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `find \u003cTask Number\u003e` - Finds tasks that matches the search term"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "Finds any tasks from the list that matches the search term."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gachia"
        },
        "content": "`find exam`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gachia"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gachia"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gachia"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gachia"
        },
        "content": "1. [T][✘] exam"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gachia"
        },
        "content": "2. [T][✘] example"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gachia"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `list` - Displays the task list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gachia"
        },
        "content": "Shows the user their task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gachia"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gachia"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gachia"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gachia"
        },
        "content": "1. [T][✘] example"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gachia"
        },
        "content": "2. [D][✓] example 2 (by: 15 September 2018, 12:39PM)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gachia"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `help` - Displays a help message"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gachia"
        },
        "content": "Ask Duke for the list of commands you can use if you are forgetful or new to the system."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gachia"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gachia"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gachia"
        },
        "content": "### `exit` - Closes the chat bot"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gachia"
        },
        "content": "Say goodbye to Duke as it goes to sleep. The application window does not"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gachia"
        },
        "content": "close so that the user may reference the chat log. Duke also saves the list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gachia"
        },
        "content": "for the next session."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gachia"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gachia"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gachia"
        },
        "content": "## References"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gachia"
        },
        "content": "References of images used:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gachia"
        },
        "content": "https://unsplash.com/photos/w1v8XeHnkuI"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gachia"
        },
        "content": "https://unsplash.com/photos/SLi2gBpbRZU"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gachia"
        },
        "content": "https://www.freepik.com/free-vector/cute-dog-breeds_803197.htm#page\u003d1\u0026query\u003ddog\u0026position\u003d21"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "gachia": 121
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "gachia": 17
    }
  },
  {
    "path": "src/main/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "D true project 1/16 September 2019, 11:59PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "E false dance party/The Coop"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "D false project 2/20 November 2019, 11:59PM"
      }
    ],
    "authorContributionMap": {
      "gachia": 5
    }
  },
  {
    "path": "src/main/java/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for adding Tasks and its subclasses."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A subclass of Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    final String timePattern \u003d \"d MMMM yyyy, h:mma\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(timePattern);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to add a Deadline object into the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * It will throw an exception if the user inputs are unrecognisable for the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * method to execute correctly."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Add Task Message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If inputs are invalid and format of subsequent fields is wrong"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String[] userWords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        userWords \u003d input.split(\"/by\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (userWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"OOPS!!! The date/time of a deadline cannot be empty or is wrongly typed.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "            LocalDateTime dateObj \u003d LocalDateTime.parse(userWords[1].trim(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "            String date \u003d dateObj.format(dateTimeFormat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return tasks.addTask(new Deadline(userWords[0].trim(), date));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Could not recognise date and time. Please follow the format: dd/mm/yyyy HHmm.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 45
    }
  },
  {
    "path": "src/main/java/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for adding Tasks and its subclasses."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A subclass of Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to add an Event object into the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * It will throw an exception if the user inputs are unrecognisable for the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * method to execute correctly."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Add Task Message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If inputs are empty and format of subsequent fields is wrong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String[] userWords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "        userWords \u003d input.split(\"/at\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (userWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"OOPS!!! The venue of an event cannot be empty or is wrongly typed.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return tasks.addTask(new Event(userWords[0].trim(), userWords[1].trim()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 37
    }
  },
  {
    "path": "src/main/java/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for adding Tasks and its subclasses."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A subclass of Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to add a To Do object into the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * It will throw an exception if the user inputs are unrecognisable for the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * method to execute correctly."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Add Task Message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If input is empty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return tasks.addTask(new Task(input));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 30
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the user input as a Command object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected boolean hasExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Default Constructor to set hasExit boolean variable to false."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Will be set to true if ExitCommand is called."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "        hasExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Abstract method for the sub-classes of Command to use. This method will execute"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * differently based on the sub-class called."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If there is an error"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    abstract String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns boolean variable hasExit for checking exit status."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return hasExit boolean variable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return hasExit;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 36
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents a different type of Task called Deadline that holds an additional"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * parameter for date and time."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of deadline and due date and time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param by   The due date and time of the Deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Deadline(String desc, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor with additional parameter to set its completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc   The description of the Deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param by     The due date and time of the Deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param isDone The boolean variable to note if Deadline is completed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Deadline(String desc, String by, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden writeFormat method to specify that it is a Deadline"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * when saving the data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Format for saving data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"D \" + isDone + \" \" + description + \"/\" + by;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden toString method to print out Deadline object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Printing format of Deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"[D]\" + super.getTask() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 52
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for deleting Tasks for the list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to delete a Task object from the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * The method will check the user input for a valid index and deletes the selected"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Task object from the list. It will throw an exception if the index is invalid."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Delete Task Message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If deletion \u003c 0 or \u003e size of list or input is empty"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Please specify a task number.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int deletion \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (deletion \u003c 0 || deletion \u003e tasks.getTaskList().size()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Task not found.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return tasks.deleteTask(deletion);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 30
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TextArea text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor for generating a DialogBox. Takes in a string input to display as text and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * a image as a display picture."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param txt String text input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param img A display image"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private DialogBox(String txt, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "        text.setText(txt);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Method for flipping the properties of a DialogBox for display purposes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ObservableList\u003cNode\u003e temp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "        Collections.reverse(temp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "        getChildren().setAll(temp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Static method for creating a DialogBox for user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param txt String text input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param img A display image"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static DialogBox getUserDialog(String txt, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return new DialogBox(txt, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Static method for creating a DialogBox for Duke\u0027s messages."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param txt String text input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param img A display image"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static DialogBox getDukeDialog(String txt, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "        var db \u003d new DialogBox(txt, img);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 74
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for setting Tasks as completed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to mark a Task object as completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * The method will check the user input for a valid index and change the selected"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Task object\u0027s isDone boolean variable to true."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * It will throw an exception if the index is invalid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Done Task Message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If taskNo \u003c 0 or \u003e size of list or input is empty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Please specify a task number.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int taskNo \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (taskNo \u003c 0 || taskNo \u003e tasks.getTaskList().size()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Task not found.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return tasks.setDoneTask(taskNo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 31
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Main class responsible for running Duke Chatbot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor of Duke class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String filePath \u003d \"dukeList.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "            taskList \u003d new TaskList(storage.loadData(), ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Method for interpreting Commands and returning Duke\u0027s replies to the DialogBox."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input User input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Duke\u0027s reply message based on input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "            String fullCommand \u003d input;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "            String[] commandArr \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "            Command c \u003d Parser.parse(commandArr[0].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "            if (commandArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "                return c.execute(storage, taskList, ui, \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return c.execute(storage, taskList, ui, commandArr[1].trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "    // Legacy code for starting up Duke in Command Line"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Method to start up Duke Chatbot."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "                c.execute(storage, taskList, ui);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "    */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "        new Duke(\"src/main/data/example.txt\").run();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "gachia": 81
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents Exceptions from the Duke project."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to print custom error messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param error Error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 14
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents a different type of Task called Event that holds an"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * additional parameter for the venue."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of event and venue."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param at   The venue of the Event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Event(String desc, String at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor with additional parameter to set its completion status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc   The description of the Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param at     The venue of the Event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param isDone The boolean variable to note if Event is completed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Event(String desc, String at, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden writeFormat method to specify that it is a Event"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * when saving the data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Format for saving data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"E \" + isDone + \" \" + description + \"/\" + at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden toString method to print out Event object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Printing format of Event"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"[E]\" + super.getTask() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 52
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for exiting the Duke Chatbot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to save the list data to the specified"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * text file. The method will set the hasExit boolean variable to true, call"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * the saveData method from storage and return a Goodbye Message for DialogBox."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return goodbye message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        hasExit \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage.saveData(tasks.getTaskList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 24
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for searching Tasks with a specified keyword."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to search for Task objects whose"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * description matches the search term. The method will output all Tasks that"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * contain the search term in the description. It will throw an exception if"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * the search term is empty."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing method and user input field"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input of search term"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Search Task Message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If searchTerm is empty"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Search term cannot be blank.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return tasks.searchTaskList(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 27
    }
  },
  {
    "path": "src/main/java/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden start method from Application to setup the FXML properties for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * GUI and the stage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param stage Stage object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "            stage.setTitle(\"Duke: Your Task Assistant Dog\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            stage.getIcons().add(new Image(Gui.class.getResourceAsStream(\"/images/dukeIcon.png\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 38
    }
  },
  {
    "path": "src/main/java/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for helping the user use the Chatbot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method from Command to return the help message for the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * The help message details can be found in /data folder."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Help Message from UI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If help file is unable to be read in showHelp()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return ui.showHelp();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 22
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A launcher class to start the Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "        Application.launch(Gui.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the Command for printing out all of the tasks in the list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A sub-class of Command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overridden execute method to print out all of the tasks inside the list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * using the method from TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param storage Storage object for saving purposes"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param tasks   Contains the list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param ui      Holds Ui printing methods and user input field"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param input   User input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return TaskList Message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String execute(Storage storage, TaskList tasks, Ui ui, String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return tasks.showTaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 21
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": " * The MainWindow Controller, which provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/userPic.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukePic.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Method to initialize several properties upon launch. Creates the opening"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * message for Duke as well."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(ui.showWelcome(), dukeImage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Method to initialise Duke in MainWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param d Duke object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Takes in the user\u0027s input and creates two dialog boxes. One contains the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * and the other contains Duke\u0027s reply to the input. Input is cleared after"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "        if (input.equals(\"exit\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "            sendButton.setDisable(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "            userInput.setDisable(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 66
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Responsible for interpreting Commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Checks user input for a Command and returns the associated Command class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param userCmd The command from user input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If user input is an invalid command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public static Command parse(String userCmd) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "        switch (userCmd) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new AddToDoCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new AddEventCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new AddDeadlineCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Invalid Command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 37
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the read and write of data into a text file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to specify the file path of the text file used"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * for saving and loading of Tasks for the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param filePath directory of text file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns a ArrayList of Task type for Duke to use as an initial list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Data is obtained from a text file with a specific format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return List of Tasks to be used"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException When format is wrong and filePath is invalid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "            // Code to load example list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "            InputStream in \u003d this.getClass().getClassLoader().getResourceAsStream(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "             */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "            //System.out.println(f.getAbsolutePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "                String type \u003d sc.next();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "                switch (type) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    boolean done \u003d sc.nextBoolean();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    String taskName \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    list.add(new Task(taskName, done));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    done \u003d sc.nextBoolean();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    taskName \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    String[] userWords \u003d taskName.split(\"/\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    list.add(new Deadline(userWords[0], userWords[1], done));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    done \u003d sc.nextBoolean();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    taskName \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    userWords \u003d taskName.split(\"/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    list.add(new Event(userWords[0], userWords[1], done));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "                    throw new DukeException(\"Wrong type used inside of save file\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"File not found. Generating empty list...\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Saves all of the Tasks inside the list into a text file for future usage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * It will throw an exception if the file path was not specified in storage upon initialisation."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * However, an IOException is thrown instead of DukeException to be able"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * to exit the program despite not saving."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param list List of Tasks used in Duke"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "            String data \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": "                data +\u003d t.writeFormat() + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fw.write(data);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gachia"
        },
        "content": "            System.out.println(\"Failed to save data. File path may not have been specified.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 95
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the tasks the user enters into Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of the Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc The description of the Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to set the description of the Task and whether it is done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param desc   The description of the Task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param isDone The boolean variable to note if Task is completed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Task(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.description \u003d desc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns a Tick or X symbol based on whether the Task is completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return The status icon of the Task object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Sets the boolean variable isDone to true, marking the Task as completed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the description of the Task with its status."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Task description and status in the format of \"[Status] description\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String output \u003d \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the boolean variable isDone of the Task object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return status of task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the Task\u0027s description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return description of Task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the Task object in a String format for saving into a text file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return description and status of Task for saving"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String writeFormat() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"T \" + isDone + \" \" + description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Overrides toString method for printing Task object, which includes Task type."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return display format of Task, \"[T][Status] description\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return \"[T]\" + getTask();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 91
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Represents the list of tasks that Duke holds."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to generate an empty ArrayList of Task type and takes Ui for print functionality."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public TaskList(Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Constructor to take in a populated ArrayList of Task type (i.e. from text file)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * and takes Ui for print functionality."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param list ArrayList of Task Type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Adds a Task object into the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param task A Task object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return confirmation message of task being added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return ui.showAdd(task, list.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Deletes a Task from the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param deleteIndex Index of selected Task Object, 1-based index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return confirmation message of task being deleted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String deleteTask(int deleteIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "        assert deleteIndex \u003c\u003d list.size() : \"deleteIndex should not be larger than amount of tasks in list\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "        Task temp \u003d list.remove(deleteIndex - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return ui.showDelete(temp, list.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns selected Task object from list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param taskIndex Index of selected Task object, 1-based index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Task object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return list.get(taskIndex - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints out the list of tasks that Duke holds."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String message \u003d \"Yip! Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": "            message +\u003d \"\\n\" + (i + 1) + \".\" + list.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints out the Tasks whose description matches the search term."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param searchTerm Keyword by user for search"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return list of tasks with matching search term"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String searchTaskList(String searchTerm) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String message \u003d \"Bork! Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int noOfSearches \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "            if (list.get(i).getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": "                message +\u003d \"\\n\" + noOfSearches + \".\" + list.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gachia"
        },
        "content": "                noOfSearches +\u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gachia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Sets boolean variable isDone of selected Task object to true."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param doneIndex Index of selected Task object, 1-based index"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return confirmation message of task being done"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String setDoneTask(int doneIndex) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gachia"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gachia"
        },
        "content": "        // Code for testing assertion"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gachia"
        },
        "content": "        doneIndex \u003d 20;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gachia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gachia"
        },
        "content": "        assert doneIndex \u003c\u003d list.size() : \"doneIndex should not be larger than amount of tasks in list\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gachia"
        },
        "content": "        list.get(doneIndex - 1).markAsDone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return ui.showDone(list.get(doneIndex - 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the list of tasks that Duke holds as an object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return ArrayList of Task type"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 118
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": " * Handles the printing of Duke messages."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "    final String lineSpace \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    final String helpFilePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Default Constructor to initialise Scanner object for user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        helpFilePath \u003d \"data/help.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints out Welcome Message for the launch of Duke Chatbot."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return welcome message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        final String startMessage \u003d \"Bark Bark! I\u0027m Duke, Your Task Assistant Dog.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"What can I do for you?\\n\" + \"If you need help, type \u0027help\u0027 in the field.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return startMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints Goodbye Message when user closes the Duke Chatbot."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return goodbye message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String endMessage \u003d \"Woof! Your list has been saved. Hope to see you again!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return endMessage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a specified error message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param error Message of error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Message of error"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showError(String error) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a message when tasks are added."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param task Task being added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param listSize Size of list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Message of successful add"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showAdd(Task task, int listSize) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String message \u003d \"Bark! I\u0027ve added this task:\\n\" + task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"\\nNow you have \" + listSize + \" tasks in the list.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a message when tasks are set to done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param task Task selected to be done"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Message of marking done"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showDone(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String message \u003d \"Ruff! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a message when tasks are deleted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param task Task selected for deletion"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @param listSize Size of list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Message of successful deletion"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showDelete(Task task, int listSize) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String message \u003d \"Arf! I\u0027ve removed this task:\\n\" + task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gachia"
        },
        "content": "                + \"\\nNow you have \" + listSize + \" tasks in the list.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a help message that lists the available commands the user is able"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * to type. Message is read from a text file in /data folder."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return Help Message"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @throws DukeException If file is unable to be read"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String showHelp() throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gachia"
        },
        "content": "            InputStream in \u003d this.getClass().getClassLoader().getResourceAsStream(helpFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gachia"
        },
        "content": "            Scanner sc \u003d new Scanner(in);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gachia"
        },
        "content": "            String helpMessage \u003d sc.useDelimiter(\"\\\\A\").next();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gachia"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gachia"
        },
        "content": "            return helpMessage;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gachia"
        },
        "content": "            throw new DukeException(\"Failed to load help text file\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Prints a straight line for clarity purposes."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Legacy code for Command Line display."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.out.print(lineSpace);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Reads the user input and returns a String."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Legacy code for Command Line display."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gachia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * @return User input"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String userCmd \u003d sc.next();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return userCmd;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the description of Task specified in the user input."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Use only after reading the initial command input of the user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public String readDesc() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String desc \u003d sc.nextLine();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gachia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Returns the index of the Task specified in the user input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gachia"
        },
        "content": "     * Use only after reading the initial command input of the user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gachia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gachia"
        },
        "content": "    public int readIndex() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gachia"
        },
        "content": "        int index \u003d sc.nextInt();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gachia"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 153
    }
  },
  {
    "path": "src/main/resources/data/example.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "D true project 1/16 September 2019, 11:59PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "E false dance party/The Coop"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "T true join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "D false project 2/20 November 2019, 11:59PM"
      }
    ],
    "authorContributionMap": {
      "gachia": 5
    }
  },
  {
    "path": "src/main/resources/data/help.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "Woooof! Here are the list of commands that you can use:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "  - todo \u003ctask name\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "      (saves a default To-Do task)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "  - deadline \u003ctask name\u003e /by \u003cdate and time in D/MM/YYYY HHmm\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "      (saves a To-Do task with a deadline)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "  - event \u003cevent name\u003e /at \u003cvenue\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "      (saves an Event task with a location)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "  - delete \u003ctask number\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "      (deletes a task from your list)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "  - done \u003ctask number\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "      (marks a task as done)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "  - list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "      (displays your task list)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "  - find \u003ctask name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "      (find tasks with the search term)"
      }
    ],
    "authorContributionMap": {
      "gachia": 15
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cURL value\u003d\"@application.css\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003cTextArea fx:id\u003d\"text\" editable\u003d\"false\" maxHeight\u003d\"110.0\" maxWidth\u003d\"260.0\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"110.0\" prefWidth\u003d\"260.0\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cFont name\u003d\"Calibri\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "      \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"110.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gachia": 31
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cURL value\u003d\"@application.css\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gachia": 23
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void testTodoExecute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d \"test ToDo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "            AddToDoCommand ac \u003d new AddToDoCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ac.execute(storage, taskList, ui, input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to add item into list\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void testDeadlineExecute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d \"test Deadline /by 08/08/2022 2359\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gachia"
        },
        "content": "            AddDeadlineCommand ac \u003d new AddDeadlineCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ac.execute(storage, taskList, ui, input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to add item into list\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void testEventExecute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d \"party /at a certain place\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gachia"
        },
        "content": "            AddEventCommand ac \u003d new AddEventCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gachia"
        },
        "content": "            ac.execute(storage, taskList, ui, input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to add item into list\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 60
    }
  },
  {
    "path": "src/test/java/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList.addTask(new Task(\"test task\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            DeleteCommand dc \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            dc.execute(storage, taskList, ui, input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            assertTrue(taskList.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to delete item in list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 36
    }
  },
  {
    "path": "src/test/java/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gachia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gachia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gachia"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gachia"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gachia"
        },
        "content": "        storage \u003d new Storage(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gachia"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList \u003d new TaskList(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gachia"
        },
        "content": "        taskList.addTask(new Task(\"test task\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gachia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gachia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gachia"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gachia"
        },
        "content": "        String input \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gachia"
        },
        "content": "        InputStream in \u003d new ByteArrayInputStream((input.getBytes()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gachia"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gachia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gachia"
        },
        "content": "            DoneCommand dc \u003d new DoneCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gachia"
        },
        "content": "            dc.execute(storage, taskList, ui, input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gachia"
        },
        "content": "            assertTrue(taskList.getTask(1).getIsDone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gachia"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gachia"
        },
        "content": "            fail(\"failed to change item in list to done\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gachia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gachia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gachia": 36
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gachia"
        },
        "content": "Congratulations! You have created your first Gui application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 109,
      "gachia": 1
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gachia"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a Gui for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gachia"
        },
        "content": "In this tutorial, we will be creating a Gui for Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Mockup for Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 156,
      "gachia": 2
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gachia"
        },
        "content": "You have successfully implemented a fully functional Gui for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gachia"
        },
        "content": "1. While the Gui looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 241,
      "gachia": 2
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gachia"
        },
        "content": "1. The process of visually enhancing the Gui is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gachia"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get Gui creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gachia"
        },
        "content": " * A Gui for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 291,
      "gachia": 3
    }
  }
]
