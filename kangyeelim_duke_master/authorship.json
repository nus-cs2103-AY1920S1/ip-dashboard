[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "# Bunny Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Bunny Duke is a task and expense manager chat bot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [General Commands](#general-commands)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [Tasks Managing Commands](#tasks-managing-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Types of Tasks](#types-of-tasks) "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Add Tasks](#add-tasks) "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [See Task List](#see-task-list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Mark Task as Done](#mark-tasks-as-done)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Delete Tasks](#delete-tasks)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Find Task by Keyword](#find-task-by-keyword)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [Expenses Managing Commands](#expenses-managing-commands)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Add Expenses](#add-expenses)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Input Income](#input-income)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [See Expense List](#see-expense-list)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Delete Expenses](#delete-expenses)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "### Task Managing feature"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Bunny Duke can help you to manage all your tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He can list out all your tasks, let you add tasks, delete tasks and mark tasks as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He also can help you save your deadline or event\u0027s date and time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "### Expense Managing feature"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Bunny duke can also help you manage your expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He can let you input your income and input your expenses."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Then, He can help you calculate how much you have left to spend or how much is overspent."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He is able to save everything so when you close the app, your data is not lost."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Here is how it looks like in-action:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "![Image of Duke Bunny](https://github.com/kangyeelim/duke/blob/master/docs/Ui.png)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## General Commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Help Command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny will give you a quick summary of all the commands in one reply to help you anytime you forget any."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To get a quick summary of all commands, you can send:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`help`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Tutorial Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny will guide you through a short hands-on tutorial to familiarise you with all the commands."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Just follow through the instructions and it will help you learn very quickly."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To get the tutorial of all commands, you can send:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`tutorial`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Bye Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "This is optional because the data will be saved whenever any command is made. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Thus, do not fret if you close Duke Bunny without doing this."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To bid Duke Bunny goodbye, you can send:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`bye`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Task Managing Commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "This section will show you the commands for the task managing functions of Duke Bunny."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Types of Tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Todo:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Tasks that do not have a time or date. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Event:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Tasks that have a time and date to attend to it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Deadline:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Tasks that have a time and date as its deadline."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Add Task Command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help add the 3 different tasks into the task list to help you keep track of them all."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He will reply you if he successfully did so and the number of tasks in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add a Todo Task called *return book*, send:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`todo return book`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[T][✗] return book"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 1 task in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add an Event called *lab meeting* which would be held on *21 September 2019* at *12PM*, send:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`event lab meeting /at 21/09/2019 1200`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tor"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`event lab meeting /at 21/09/2019 12.00 PM`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[E][✗] lab meeting (at: 21 Sep 2019 12.00PM)`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add a Task with a Deadline called *German Assignment* to be done by *21 September 2019* at *10.00AM*, send:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`deadline german assignment /by 21/09/2019 1000`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`deadline german assignment /by 21/09/2019 10.00 AM`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### See Task List"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to display all the tasks in your task list according to "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "when it was inputted with the oldest on top and newest below."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To see the list of tasks, send:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [T][✗] return book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t2. [E][✗] lab meeting (at: 21 Sep 2019 12.00 PM)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t3. [D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Mark Task as Done"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to mark tasks as done.He will reply you if he successfully did so. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To mark task at index 2 of list as done, send:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`done 2`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[✓] lab meeting"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Delete Tasks"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to delete the tasks that you no longer need to keep track of."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He will reply you if he successfully did so and the number of tasks in the list. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To delete task at index 2 of list, send:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`delete 2`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNoted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[✓] lab meeting (at: 21 Sep 2019 12.00 PM)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Find Task by Keyword"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you find tasks that match a single word keyword. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "All matching tasks will be presented."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To find if you have the task in the list by a single keyword like *lab*, send:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`find assignment`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the matching tasks in your list:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1.[D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "You can also find tasks by the date. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To find a task with the date *21/09/2019*, send:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`find 21/09/2019`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the matching tasks in your list:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1.[D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Expenses Managing Commands"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "This section will show you the commands for the expenses managing functions of Duke Bunny."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Add Expenses"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you add expenses into the expense list. "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If an income is already inputted, he will calculate how much of the income is left or how much is overspent."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He will also show the total expenditure."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add an expense where *$220* was spent on buying a *Bike* and the income I previously inputted is *$1800*, send:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`expense bike 220`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this expense:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tbike: 220.0"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 1 expense in the list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 220.0"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left is:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1580.0"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Input Income"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help to calculate how much is overspent or left of your income if you choose to input it."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Everytime you do this command, the previous income will be **overwritten**."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To input an income of *$1800* to see how much income is left or how much is overspent, send:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`income 1800`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 1 expense in the list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 220.0"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1580.0"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### See Expense List"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you display all the expenses in your expense list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He also shows the total expenditure and income left or amount of money overspent."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To see all expenses in the list, send"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`elist`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the expenses in your list:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. books 100.0"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t2. food 80.0"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t2. bike: 220.0"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tTotal expenditure: 400.0"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1400.0"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Delete Expenses"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to delete specific expenses that you no longer need to keep track of."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To delete an expense at index 2 of the list, send:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`delete e2`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNoted. I\u0027ve removed this expense:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tfood: 80.0"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 2 expenses in the list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 320.0"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1480.0"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "You can delete all expenses if you want to start anew when your monthly income has been received."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To delete all expenses, send:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`delete all`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 0 expenses in the list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 0.0"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1800.0"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 276,
      "-": 12
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Launcher\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tString javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\timplementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 35,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "T | 0 | homework"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "D | 0 | assignment | 02/10/2019 1230"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "E | 1 | CS2101 meeting | 20/09/2019 1200"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "E | 0 | ccr | 21/09/2019 1200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "T | 0 | return book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "E | 0 | lab meeting | 21/09/2019 1200"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6
    }
  },
  {
    "path": "data/dukeTutorial.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "E | 1 | meeting | 31/12/2019 1800"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "D | 0 | assignment | 31/12/2019 1800"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2
    }
  },
  {
    "path": "data/expensesTutorial.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "phonebill: 29.9"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1
    }
  },
  {
    "path": "data/income.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1800.0"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "# Bunny Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Bunny Duke is a task and expense manager chat bot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [General Commands](#general-commands)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [Tasks Managing Commands](#tasks-managing-commands)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Types of Tasks](#types-of-tasks) "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Add Tasks](#add-tasks) "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [See Task List](#see-task-list)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Mark Task as Done](#mark-tasks-as-done)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Delete Tasks](#delete-tasks)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Find Task by Keyword](#find-task-by-keyword)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "1. [Expenses Managing Commands](#expenses-managing-commands)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Add Expenses](#add-expenses)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Input Income](#input-income)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [See Expense List](#see-expense-list)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [Delete Expenses](#delete-expenses)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\t"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "### Task Managing feature"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Bunny Duke can help you to manage all your tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He can list out all your tasks, let you add tasks, delete tasks and mark tasks as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He also can help you save your deadline or event\u0027s date and time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "### Expense Managing feature"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Bunny duke can also help you manage your expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He can let you input your income and input your expenses."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Then, He can help you calculate how much you have left to spend or how much is overspent."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He is able to save everything so when you close the app, your data is not lost."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Here is how it looks like in-action:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "![Image of Duke Bunny](https://github.com/kangyeelim/duke/blob/master/docs/Ui.png)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## General Commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Help Command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny will give you a quick summary of all the commands in one reply to help you anytime you forget any."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To get a quick summary of all commands, you can send:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`help`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Tutorial Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny will guide you through a short hands-on tutorial to familiarise you with all the commands."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Just follow through the instructions and it will help you learn very quickly."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To get the tutorial of all commands, you can send:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`tutorial`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Bye Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "This is optional because the data will be saved whenever any command is made. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Thus, do not fret if you close Duke Bunny without doing this."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To bid Duke Bunny goodbye, you can send:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`bye`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Task Managing Commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "This section will show you the commands for the task managing functions of Duke Bunny."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Types of Tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Todo:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Tasks that do not have a time or date. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Event:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Tasks that have a time and date to attend to it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Deadline:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Tasks that have a time and date as its deadline."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Add Task Command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help add the 3 different tasks into the task list to help you keep track of them all."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He will reply you if he successfully did so and the number of tasks in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add a Todo Task called *return book*, send:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`todo return book`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[T][✗] return book"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 1 task in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add an Event called *lab meeting* which would be held on *21 September 2019* at *12PM*, send:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`event lab meeting /at 21/09/2019 1200`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tor"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`event lab meeting /at 21/09/2019 12.00 PM`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[E][✗] lab meeting (at: 21 Sep 2019 12.00PM)`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add a Task with a Deadline called *German Assignment* to be done by *21 September 2019* at *10.00AM*, send:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`deadline german assignment /by 21/09/2019 1000`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`deadline german assignment /by 21/09/2019 10.00 AM`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### See Task List"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to display all the tasks in your task list according to "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "when it was inputted with the oldest on top and newest below."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To see the list of tasks, send:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the tasks in your list:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. [T][✗] return book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t2. [E][✗] lab meeting (at: 21 Sep 2019 12.00 PM)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t3. [D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Mark Task as Done"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to mark tasks as done.He will reply you if he successfully did so. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To mark task at index 2 of list as done, send:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`done 2`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[✓] lab meeting"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Delete Tasks"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to delete the tasks that you no longer need to keep track of."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He will reply you if he successfully did so and the number of tasks in the list. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To delete task at index 2 of list, send:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`delete 2`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNoted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t[✓] lab meeting (at: 21 Sep 2019 12.00 PM)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Find Task by Keyword"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you find tasks that match a single word keyword. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "All matching tasks will be presented."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To find if you have the task in the list by a single keyword like *lab*, send:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`find assignment`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the matching tasks in your list:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1.[D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "You can also find tasks by the date. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To find a task with the date *21/09/2019*, send:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`find 21/09/2019`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the matching tasks in your list:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1.[D][✗] german assignment (by: 21 Sep 2019 10.00 AM)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "## Expenses Managing Commands"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "This section will show you the commands for the expenses managing functions of Duke Bunny."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Add Expenses"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you add expenses into the expense list. "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If an income is already inputted, he will calculate how much of the income is left or how much is overspent."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He will also show the total expenditure."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To add an expense where *$220* was spent on buying a *Bike* and the income I previously inputted is *$1800*, send:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`expense bike 220`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tGot it. I\u0027ve added this expense:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tbike: 220.0"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 1 expense in the list."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 220.0"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left is:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1580.0"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Input Income"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help to calculate how much is overspent or left of your income if you choose to input it."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Everytime you do this command, the previous income will be **overwritten**."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To input an income of *$1800* to see how much income is left or how much is overspent, send:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`income 1800`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 1 expense in the list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 220.0"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1580.0"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### See Expense List"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you display all the expenses in your expense list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "He also shows the total expenditure and income left or amount of money overspent."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To see all expenses in the list, send"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`elist`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tHere are the expenses in your list:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1. books 100.0"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t2. food 80.0"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t2. bike: 220.0"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tTotal expenditure: 400.0"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1400.0"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "#### Delete Expenses"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Duke Bunny can help you to delete specific expenses that you no longer need to keep track of."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The data will be saved once the command is made."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "If there is incorrect user input format, he will also reply with what went wrong."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To delete an expense at index 2 of the list, send:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`delete e2`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNoted. I\u0027ve removed this expense:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tfood: 80.0"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 2 expenses in the list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 320.0"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1480.0"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "You can delete all expenses if you want to start anew when your monthly income has been received."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- To delete all expenses, send:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t`delete all`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "- Expected outcome:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tNow you have 0 expenses in the list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe total expenditure is now: 0.0"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tThe amount of income left:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t1800.0"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\t"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 275,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027bye\u0027. A \u003ccode\u003eByeCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command and end Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \"bye\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ByeCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList currently."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList currently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui initialized in \u003ccode\u003eDuke\u003c/code\u003e to interact with user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage to write/load/append to data file after updating tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage to write/load/append to data file aftering updating expenses."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of goodbye message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printGoodbyeMsg();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns true to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Prints goodbye message before returning."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return True to end Duke"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns type of command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of command type."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //for testing purposes"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"ByeCommand\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Executes command and is the parent class of all duke commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Abstract class with no method implementations."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public abstract String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                   Storage expenseStorage, Storage incomeStorage) throws Exception;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns if should exit."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if duke should end."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a deadline task which extends \u003ccode\u003eTask\u003c/code\u003e. A \u003ccode\u003eDeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * object can take in a description, date and time to complete the task by."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected DateFormat outDateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected DateFormat outTimeFormat \u003d new SimpleDateFormat(\"h.mm aa\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected SimpleDateFormat fileDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected SimpleDateFormat fileTimeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected Date time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param description String description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param date Date of the deadline as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param time Time of the deadline as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Deadline(String description, Date date, Date time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns date of the deadline task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Date as \u003ccode\u003eDate\u003c/code\u003e class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns time of the deadline task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Time as \u003ccode\u003eDate\u003c/code\u003e class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Formats and returns string representation of the deadline task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String with the type of [task] [tick or cross] description (by:date time)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + outDateFormat.format(date) + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + outTimeFormat.format(time) + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Formats string representation of the deadline task with its description, date and time."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String with the type of task | boolean of whether done | description | date time."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toWriteIntoFile() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"D\" + super.toWriteIntoFile() + \" | \" + fileDateFormat.format(date) + \" \" + fileTimeFormat.format(time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 70
    }
  },
  {
    "path": "src/main/java/seedu/duke/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027deadline\u0027. A \u003ccode\u003eDeadlineCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command with checks for exception by adding deadline to tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027deadline\u0027."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkErrorForDeadlineCommand(command, tasks, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tasks.add(Parser.createDeadline(command));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (tasks.size() \u003e 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            taskStorage.appendFile(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            taskStorage.writeFile(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert tasks.size() \u003e\u003d 1 : \"Task size invalid\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printAddedTask(tasks.get(tasks.size() - 1))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + ui.printNoOfTaskInList(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns type of command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of command type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //for testing purposes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"DeadlineCommand\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/DeleteAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeleteAllCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks          TaskList of all tasks currently."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses       ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui             Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *                       executed tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage    Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is incorrect user input format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException   If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenses.deleteAll();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenseStorage.removeFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printNoOfExpenseInList(expenses);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns if should exit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if duke should end."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027delete\u0027. A \u003ccode\u003eDeleteCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command with checks for exception by deleting task from list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027delete\u0027."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage,  Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkErrorForDeleteCommand(command, tasks, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int curr \u003d Parser.taskToDelete(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert curr \u003e 0 : \"Task num is not valid\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Task deletedTask \u003d tasks.get(curr - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tasks.remove(curr - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        taskStorage.writeFile(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printDeletedTaskMsg(deletedTask) + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + ui.printNoOfTaskInList(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns type of command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of command type."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //for testing purposes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"DeleteCommand\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 64
    }
  },
  {
    "path": "src/main/java/seedu/duke/DeleteExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeleteExpenseCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027delete e\u0027."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public DeleteExpenseCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage taskStorage, Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkErrorForDeleteExpenseCommand(command, expenses, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int curr \u003d Parser.expenseToDelete(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert curr \u003e 0 : \"Task num is not valid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Expense deletedExpense \u003d expenses.get(curr - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenses.remove(curr - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenseStorage.writeExpenseFile(expenses);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printDeletedExpenseMsg(deletedExpense) + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + ui.printNoOfExpenseInList(expenses);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        displayPicture.setClip(new Circle(35, 35, 35));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the dialog box for a user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return DialogBox for user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the dialog box for duke\u0027s response."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return DialogBox for duke response."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 77
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Runs as a chat bot that helps to manage tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Loads task information from data file in hard drive when initialized"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * or creates file in hard drive if it does not exist."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Storage expenseStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private ExpenseList expenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Storage incomeStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns a message response to user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Runs Duke which will load tasks from data file, take in user commands to create tasks,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * delete tasks, mark task as done, list out task while updating data file when the tasks in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * the list is updated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String run(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Command c \u003d Parser.parse(input, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return c.execute(tasks, expenses, ui, storage, expenseStorage, incomeStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return e.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return ui.showParseError();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return ui.showParseError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return ui.showExceptionMsg(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Loads data file into task list in Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void load() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenseStorage \u003d new Storage(\"data/expenses.txt\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        incomeStorage \u003d new Storage(\"data/income.txt\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            double income \u003d incomeStorage.loadIncomeFile();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            tasks \u003d new TaskList(storage.loadTaskFile());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            expenses \u003d new ExpenseList(expenseStorage.loadExpenseFile(), income);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Loads new empty array lists for expenses and tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void loadEmptyLists() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        storage \u003d new Storage(\"data/dukeTutorial.txt\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenseStorage \u003d new Storage(\"data/expensesTutorial.txt\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenses \u003d new ExpenseList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 84,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the exception specific to duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String errMsg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor that takes in a string error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param errMsg String of exception message that Duke should let the user know."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public DukeException(String errMsg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert errMsg.length() \u003e 0 : \"No err msg\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.errMsg \u003d errMsg;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns string representation of the duke exception."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Error message of the duke exception."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.errMsg;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/EListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class EListCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public EListCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printAllExpenses(expenses);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the event task which extends \u003ccode\u003eTask\u003c/code\u003e. A \u003ccode\u003eEvent\u003c/code\u003e object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can take in a description, date and time which it is at."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected DateFormat outDateFormat \u003d new SimpleDateFormat(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected SimpleDateFormat outTimeFormat \u003d new SimpleDateFormat(\"h.mm aa\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected SimpleDateFormat fileDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected SimpleDateFormat fileTimeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected Date time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param description String description of the event task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param date Date of the event as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param time Time of the event as a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Event(String description, Date date, Date time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns date of the event task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Date as \u003ccode\u003eDate\u003c/code\u003e class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns time of the event task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Time as \u003ccode\u003eDate\u003c/code\u003e class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Formats and returns string representation of the event task with its description, date and time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String with the type of [task] [tick or cross] description (at:date time)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + outDateFormat.format(date) + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + outTimeFormat.format(time) + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Formats string representation of the event task with its description, date and time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String with the type of task | boolean of whether done | description | date time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toWriteIntoFile() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"E\" + super.toWriteIntoFile() + \" | \" + fileDateFormat.format(date) + \" \" + fileTimeFormat.format(time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 71
    }
  },
  {
    "path": "src/main/java/seedu/duke/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027event\u0027. An \u003ccode\u003eEventCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command with checks for exception by adding event to tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027event\u0027."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public EventCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkErrorForEventCommand(command, tasks, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tasks.add(Parser.createEvent(command));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (tasks.size() \u003e 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            taskStorage.appendFile(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            taskStorage.writeFile(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert tasks.size() \u003e 0 : \"tasks size invalid\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printAddedTask(tasks.get(tasks.size() - 1))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + ui.printNoOfTaskInList(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns type of command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of command type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //for testing purposes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"EventCommand\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/Expense.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected double amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param description Description of expense"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param amount Amount spent on expense"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Expense(String description, double amount) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns amount spent on expense."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Amount"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Formats and returns string representation of expense with description and amount."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String representation of expense"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.description + \": \" + this.amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Formats string representation of expense."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String representation of expense"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toWriteIntoFile() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.description + \": \" + this.amount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/ExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ExpenseCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ExpenseCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkErrorForExpenseCommand(command, ui, expenseStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenses.add(Parser.createExpense(command));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert expenses.size() \u003e 0 : \"tasks size invalid\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (expenses.size() \u003e 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            expenseStorage.appendExpenseFile(expenses);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            expenseStorage.writeExpenseFile(expenses);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printAddedExpense(expenses.get(expenses.size() - 1))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + ui.printNoOfExpenseInList(expenses);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/ExpenseList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ExpenseList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected ArrayList\u003cExpense\u003e arr;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected double income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor that takes in an array list of expenses."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param arr Arraylist of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param income User income."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ExpenseList(ArrayList\u003cExpense\u003e arr, double income) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.arr \u003d arr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor that takes in double income."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param income User income."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ExpenseList(double income) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ExpenseList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.income \u003d 0.0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns integer number of expenses in list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Integer size of the list of expenses."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return arr.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns expense at a specific index in list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * The first expense in the list starts with index 0."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index of expense to retrieve from list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Expense from list at index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Expense get(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return arr.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Removes the expense at a specific index in list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * The first expense in the list starts with index 0."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index of expense to remove from list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert index \u003e\u003d 0 : \"Invalid task number\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        (this.arr).remove(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Adds the expense at the end of list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * The first expense in the list starts with index 0."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expense Expense to be added to the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void add(Expense expense) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        (this.arr).add(expense);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns sum of all expenditure in array list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Double sum of all amounts"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public double getSum() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            sum \u003d sum + arr.get(i).getAmount();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Deletes all expenses in this list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void deleteAll() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Inputs the user\u0027s income."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param income Double value of user income."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void inputIncome(double income) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.income \u003d income;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns amount of money left after deducting expenditure from income or amount overspent."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Double value of income left or amount overspent."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public double getIncomeLeft() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (income \u003e\u003d this.getSum()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return income - this.getSum();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return this.getSum() - income;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns if user inputted an income."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean of whether user inputted an income."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isThereInputtedIncome() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (income \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Return if user has overspent."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean whether user overspent."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isOverspent() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (income - this.getSum() \u003c 0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 144
    }
  },
  {
    "path": "src/main/java/seedu/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027find\u0027. A \u003ccode\u003eFindCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command, with checks for exception, by finding matching tasks with a single keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected TaskList matchList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected DateFormat outDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected DateFormat outTimeFormat \u003d new SimpleDateFormat(\"H.mm aa\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027find\u0027."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        matchList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkErrorForFindCommand(command, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String keyword \u003d Parser.getKeyword(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            addTaskInListIfMatch(tasks, keyword, i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printAllMatchingTasks(matchList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns tasklist of all tasks that match the keyword."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return TaskList of all tasks matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TaskList getMatchList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.matchList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void addTaskInListIfMatch(TaskList tasks, String keyword, int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (tasks.get(index) instanceof Event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Event event \u003d (Event) tasks.get(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (event.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                matchList.add(event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (outDateFormat.format(event.getDate()).contains(keyword)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                matchList.add(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (outTimeFormat.format(event.getTime()).contains(keyword)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                matchList.add(event);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (tasks.get(index) instanceof Todo) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Todo td \u003d (Todo) tasks.get(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (td.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                matchList.add(td);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (tasks.get(index) instanceof Deadline) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Deadline dl \u003d (Deadline) tasks.get(index);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (dl.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                matchList.add(dl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (outDateFormat.format(dl.getDate()).contains(keyword)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                matchList.add(dl);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (outTimeFormat.format(dl.getTime()).contains(keyword)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                matchList.add(dl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 94
    }
  },
  {
    "path": "src/main/java/seedu/duke/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String instructions \u003d \"Let me teach you how to use me:\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"FOR TASK MANAGING:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"1. To add a todo to your list: enter \u0027todo [description]\u0027\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"2. To add a deadline to your list: enter \u0027deadline [description] /by \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"[date] [time]\u0027\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"3. To add an event to your list: enter \u0027event [description] /at \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"[date] [time]\u0027\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"4. To see list of tasks: enter \u0027list\u0027\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"5. To delete task from list: enter \u0027delete [index]\u0027\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"6. To find task by a single keyword: enter \u0027find [keyword]\u0027\\n\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"FOR EXPENSE TRACKING:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"1. To add expense to expense list: enter \u0027expense [description] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"[cost]\u0027\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"2. To see all expenses: enter \u0027elist\u0027\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"3. To delete expense from expense list: enter \u0027delete e[index]\u0027\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"4. To delete all expenses: enter \u0027delete all\u0027\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"5. To input income: enter \u0027income [amount]\u0027\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return instructions;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/IncomeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class IncomeCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public IncomeCommand(String command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks          TaskList of all tasks currently."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses       ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui             Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *                       executed tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage    Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is incorrect user input format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException   If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception     If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkNoIncomeInputError(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double income \u003d Parser.parseAndCheckErrorsForIncome(command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        expenses.inputIncome(income);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        incomeStorage.writeIncomeFile(income);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printNoOfExpenseInList(expenses);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns if should exit."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if duke should end."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Launches the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param args Inputs"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027list\u0027. A \u003ccode\u003eListCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command by listing tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027list\u0027."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printAllTasks(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Image titleLogo \u003d new Image(this.getClass().getResourceAsStream(\"/images/TitleLogo.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Starts the GUI for Duke using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param stage Primary stage for the GUI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setMainScene(scene);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.setTitle(\"DUKE BUNNY\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.getIcons().add(titleLogo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private VBox layout;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Image titleLogo \u003d new Image(this.getClass().getResourceAsStream(\"/images/TitleLogo.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Duke tutorialDuke;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TextField input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Initialises the layout for the main window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(ui.showIntro(), dukeImage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sets the duke attribute of Main Window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        duke.load();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (response.equals(\"tutorial\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            showTutorialScene();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            var db \u003d DialogBox.getDukeDialog(response, dukeImage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage), db);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sets the stage for MainWindow."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param stage Stage"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setStage(Stage stage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sets a scene for a stage."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param scene Scene"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setMainScene(Scene scene) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.scene \u003d scene;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void showTutorialScene() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/TutorialScene.fxml\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.\u003cTutorialScene\u003egetController().setStage(stage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            fxmlLoader.\u003cTutorialScene\u003egetController().setScene(this.scene);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.getIcons().add(titleLogo);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.setTitle(\"DUKE BUNNY\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 115
    }
  },
  {
    "path": "src/main/java/seedu/duke/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027done\u0027. A \u003ccode\u003eMarkDoneCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command with checks for exception."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027done\u0027."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public MarkDoneCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkMarkDoneError(command, tasks, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int curr \u003d Parser.taskToMarkDone(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tasks.get(curr - 1).markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert curr \u003e 0 : \"task number invalid\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        taskStorage.writeFile(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printMarkDoneMsg(tasks.get(curr - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns type of command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Type."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //for testing purposes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"MarkDoneCommand\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Executes methods that help to understand user input and data file input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * It identifies the intended user command, processes the information inputted"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * and calls the command to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected static SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected static SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected static SimpleDateFormat dashDateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected static SimpleDateFormat twelveHrTimeFormat \u003d new SimpleDateFormat(\"h.mm aa\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_EVENT \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_DEADLINE \u003d 8;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_TODO \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_BYE \u003d 3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_FIND \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_DONE \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_DELETE \u003d 6;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_LIST \u003d 4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_EXPENSE \u003d 7;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final int CHAR_LENGTH_OF_DELETE_E \u003d 8;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates a date object, taking in the format of dd/MM/yyyy for the string date input.."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param s String of the date input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Date of the task which is a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException If there is incorrect date user input format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Date createDate(String s) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Date date \u003d dateFormat.parse(s);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates a date object, taking in format of HHmm (24hr) for the string time input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param s String of the time input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Time of the task which is a \u003ccode\u003eDate\u003c/code\u003e object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException If there is incorrect time user input format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Date createTime(String s) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Date time \u003d timeFormat.parse(s);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates a \u003ccode\u003eTask\u003c/code\u003e object by reading in a line of input in data file format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param line String of a line of input in the data file format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return \u003ccode\u003eDeadline\u003c/code\u003e , \u003ccode\u003eEvent\u003c/code\u003e or \u003ccode\u003eTodo\u003c/code \u003eobject in data file format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException If there is incorrect input format, different from standard data file format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Task readInFileLine(String line) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] stringArr \u003d line.split(\" [|] \", 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert line.length() \u003e 0 : \"file path invalid in parser line 65\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (stringArr[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String[] dateTimeArr \u003d (stringArr[3]).split(\" \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d createDate(dateTimeArr[0]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d createTime(dateTimeArr[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Event event \u003d new Event(stringArr[2], date, time);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (stringArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                event.markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (stringArr[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Todo td \u003d new Todo(stringArr[2]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (stringArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                td.markAsDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return td;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String[] dateTimeArr \u003d (stringArr[3]).split(\" \", 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d createDate(dateTimeArr[0]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d createTime(dateTimeArr[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Deadline dl \u003d new Deadline(stringArr[2], date, time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (stringArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                dl.markAsDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return dl;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a delete command to delete task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if the command is intended to be a delete command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isDeleteCommand(String command) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003e\u003d CHAR_LENGTH_OF_DELETE \u0026\u0026 command.substring(0, 6).equals(\"delete\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies the index of task to be deleted from the user command input."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Integer index of the task to be a deleted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static int taskToDelete(String command) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return Integer.parseInt(command.substring(7));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a todo command to create a todo task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if the command is intended to be a todo command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isTodoCommand(String command) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003e\u003d CHAR_LENGTH_OF_TODO \u0026\u0026 command.substring(0, 4).equals(\"todo\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates a new todo task according to the user input command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return \u003ccode\u003eTodo\u003c/code\u003e object created from user input command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Todo createTodo(String command) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new Todo(command.substring(5));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a event command to create a event task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if the command is intended to be a event command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isEventCommand(String command) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003e\u003d CHAR_LENGTH_OF_EVENT \u0026\u0026 command.substring(0, 5).equals(\"event\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates a new event task according to the user input command."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return \u003ccode\u003eEvent\u003c/code\u003e object created from user input command."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException If the date or time input of the user is incorrect."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Event createEvent(String command) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert command.contains(\"/at\") : \"event command invalid\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] arr \u003d command.split(\" /at \", 2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] dateTimeArr \u003d (arr[1]).split(\" \", 2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Date time;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            date \u003d dateFormat.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            date \u003d dashDateFormat.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            time \u003d timeFormat.parse(dateTimeArr[1]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            time \u003d twelveHrTimeFormat.parse(dateTimeArr[1]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new Event(arr[0].substring(6), date, time);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a deadline command to create a deadline task."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @returrn Boolean if the command is intended to be a deadline command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isDeadlineCommand(String command) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003e\u003d CHAR_LENGTH_OF_DEADLINE \u0026\u0026 command.substring(0, 8).equals(\"deadline\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates a new deadline task according to the user input command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @returrn \u003ccode\u003eDeadline\u003c/code\u003e object created from user input command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException If the date or time input of the user is incorrect."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Deadline createDeadline(String command) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //assert command.contains(\"/by\") : \"deadline command invalid\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] arr \u003d command.split(\" /by \", 2);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] dateTimeArr \u003d (arr[1]).split(\" \", 2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Date time;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            date \u003d dateFormat.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            date \u003d dashDateFormat.parse(dateTimeArr[0]);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            time \u003d timeFormat.parse(dateTimeArr[1]);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            time \u003d twelveHrTimeFormat.parse(dateTimeArr[1]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new Deadline(arr[0].substring(9), date, time);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a mark as done command to mark a task as done."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if the command is intended to be a mark as done command."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isMarkDone(String command) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003e\u003d CHAR_LENGTH_OF_DONE \u0026\u0026 command.substring(0, 4).equals(\"done\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies the index of task to be marked as done from the user command input."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Integer index of the task to be marked as done."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static int taskToMarkDone(String command) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert command.substring(0, 4).equals(\"done\") : \"done command invalid\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int curr \u003d Integer.parseInt(command.substring(5));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return curr;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a list command to list out all tasks."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if the command is intended to be a list command."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isListCommand(String command) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003d\u003d CHAR_LENGTH_OF_LIST \u0026\u0026 command.equals(\"list\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the user input command to call the correct intended command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Commands include delete, list, deadline, event, todo, bye."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui initialized in duke."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Command according to the command from user."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If the command is incorrect and not understood by Duke."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Command parse(String command, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (Parser.isByeCommand(command)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new ByeCommand(command);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isHelpCommand(command)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isDeleteAllCommand(command)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new DeleteAllCommand();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isDeleteExpenseCommand(command)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new DeleteExpenseCommand(command);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isDeleteCommand(command)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new DeleteCommand(command);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isMarkDone(command)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new MarkDoneCommand(command);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isListCommand(command)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new ListCommand(command);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isFindCommand(command)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new FindCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isTodoCommand(command)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new TodoCommand(command);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isEventCommand(command)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new EventCommand(command);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isDeadlineCommand(command)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new DeadlineCommand(command);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isExpenseCommand(command)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new ExpenseCommand(command);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isEListCommand(command)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new EListCommand(command);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isTutorialCommand(command)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new TutorialCommand();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (Parser.isIncomeCommand(command)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new IncomeCommand(command);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.noSuchCommand());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Indentifies if command is intended to be income command."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean whether the command is income command."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isIncomeCommand(String command) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.length() \u003e\u003d 6 \u0026\u0026 command.contains(\"income\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if command is intended to be a delete all command."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String user input"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if command is delete all command."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isDeleteAllCommand(String command) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.equals(\"delete all\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command is intended to be a tutorial command."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of command user input."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if command is tutorial command."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isTutorialCommand(String command) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.equals(\"tutorial\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a find command to find a task."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if the command is intended to be a find command."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isFindCommand(String command) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003e\u003d CHAR_LENGTH_OF_FIND) \u0026\u0026 command.substring(0, 4).equals(\"find\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the keyword found in the command to find a task in the task list."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of the keyword."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static String getKeyword(String command) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.substring(5);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Identifies if the command intended to be a bye command."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of the command user input."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if the command is intended to be a bye command."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isByeCommand(String command) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (command.length() \u003d\u003d CHAR_LENGTH_OF_BYE \u0026\u0026 command.equals(\"bye\"));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks the exception for find commands."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Throws DukeException when the command is intended to find a task but is"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * incorrectly inputted by the user."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of command that user input."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is a incorrectly inputted user command that is intended to find a task."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkErrorForFindCommand(String command, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number and there is just trailing whitespaces"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replace(\" \", \"\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_FIND) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoFindKeyword());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.length() \u003d\u003d CHAR_LENGTH_OF_FIND) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoFindKeyword());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks the exception for mark as done commands."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Throws DukeException when the command is intended to mark a task as done but is"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * incorrectly inputted by the user."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of command that user input."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of all the tasks currently."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is a incorrectly inputted user command that is intended to mark a task as done."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkMarkDoneError(String command, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number and there is just trailing whitespaces"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replace(\" \", \"\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_DONE) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoTaskNumber());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.length() \u003d\u003d CHAR_LENGTH_OF_DONE) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoTaskNumber());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int curr \u003d Parser.taskToMarkDone(command);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (curr \u003e tasks.size()) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //check if index is within list size or throw exception"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoSuchTask());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks the exception for deadline commands."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Throws DukeException when the command is intended to create a deadline task but is"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * incorrectly inputted by the user."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of command that user input."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of all the tasks currently."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is a incorrectly inputted user command that is intended to create a deadline task."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkErrorForDeadlineCommand(String command, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.length() \u003d\u003d CHAR_LENGTH_OF_DEADLINE) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no description"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoDescription(\"deadline\"));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (!command.substring(8, 9).equals(\" \")) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no whitespace after deadline"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoWhitespaceForDescription(\"deadline\"));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            // throw exception for no description and there is just trailing whitespaces"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_DEADLINE) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoDescription(\"deadline\"));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!command.contains(\" /by \") \u0026\u0026 command.contains(\"/by\")) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for incorrect whitespaces for /by"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoWhitespaceForDate(\"deadline\"));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (!command.contains(\" /by \")) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no /by"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoDate(\"deadline\"));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.contains(\" /by \")) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String[] arr \u003d command.split(\" /by \", 2);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (arr[0].length() \u003d\u003d CHAR_LENGTH_OF_DEADLINE) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoDescription(\"deadline\"));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks the exception for delete commands."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Throws DukeException when the command is intended to delete a task but is"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * incorrectly inputted by the user."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of command that user input."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of all the tasks currently."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is a incorrectly inputted user command that is intended to delete task."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkErrorForDeleteCommand(String command, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number and there is just trailing whitespaces"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replace(\" \", \"\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_DELETE) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoTaskNumber());"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.length() \u003d\u003d CHAR_LENGTH_OF_DELETE) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoTaskNumber());"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int curr \u003d Parser.taskToDelete(command);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //check if list has no task to throw exception"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoTaskInList());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (curr \u003e tasks.size()) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //check if index is within list size or throw exception"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoSuchTask());"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks the exception for todo commands."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Throws DukeException when the command is intended create a todo task but is"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * incorrectly inputted by the user."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of command that user input."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of all the tasks currently."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is a incorrectly inputted user command that is intended to create a todo task."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkErrorForTodoCommand(String command, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.length() \u003d\u003d CHAR_LENGTH_OF_TODO) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no description"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoDescription(\"todo\"));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (!command.substring(4,5).equals(\" \")) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no description and there is just trailing whitespaces"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoWhitespaceForDescription(\"todo\"));"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_TODO) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoDescription(\"todo\"));"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks the exception for event commands."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Throws DukeException when the command is intended to create an event task but is"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * incorrectly inputted by the user."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of command that user input."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of all the tasks currently."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is a incorrectly inputted user command that is intended to create an event task."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkErrorForEventCommand(String command, TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.length() \u003d\u003d CHAR_LENGTH_OF_EVENT) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no description"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoDescription(\"event\"));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (!command.substring(5,6).equals(\" \")) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no whitespace after event"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoWhitespaceForDescription(\"event\"));"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no description and there is just trailing whitespaces"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_EVENT) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoDescription(\"event\"));"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!command.contains(\" /at \") \u0026\u0026 command.contains(\"/at\")) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for wrong user input syntax for incorrect whitespaces for /at"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoWhitespaceForDate(\"event\"));"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (!command.contains(\" /at \")) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no /at"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoDate(\"event\"));"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.contains(\" /at \")) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String[] arr \u003d command.split(\" /at \", 2);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (arr[0].length() \u003d\u003d CHAR_LENGTH_OF_EVENT) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoDescription(\"event\"));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates an expense object."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Expense object."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Expense createExpense(String command) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] arr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int arrSize \u003d arr.length;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double amount \u003d Double.parseDouble(arr[arrSize - 1]);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String description \u003d arr[1];"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (arrSize \u003e 3) {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            for (int i \u003d 2; i \u003c\u003d arrSize - 2; i++) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                description \u003d description + \" \" + arr[i];"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Expense e \u003d new Expense(description, amount);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Reads in data file for expense."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param line File line."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Expense object."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static Expense readInExpenseFileLine(String line) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] stringArr \u003d line.split(\": \", 0);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert line.length() \u003e 0 : \"file path invalid in Parser line 493\";"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double amount \u003d Double.parseDouble(stringArr[1]);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new Expense(stringArr[0], amount);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns boolean if the command is intended to be an expense command."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean whether command is expense command."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isExpenseCommand(String command) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.length() \u003e\u003d 7 \u0026\u0026 command.contains(\"expense\");"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns boolean if command is intended to be elist command."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean whether command is elist command."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isEListCommand(String command) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.length() \u003d\u003d 5 \u0026\u0026 command.equals(\"elist\");"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks for errors in user input for expense command."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param storage Storage."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If wrong user input"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkErrorForExpenseCommand(String command, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.length() \u003d\u003d CHAR_LENGTH_OF_EXPENSE) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no description"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoDescription(\"expense\"));"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (!command.substring(7, 8).equals(\" \")) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no whitespace after event"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoWhitespaceForExpenseDescription(\"expense\"));"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no description and there is just trailing whitespaces"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String[] arr \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_EXPENSE) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoDescription(\"expense\"));"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (!arr[1].contains(\" \")) {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoWhitespaceForAmount());"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns integer of expense index in list to delete."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Integer."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static int expenseToDelete(String command) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return Integer.parseInt(command.substring(8));"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns boolean if command is intended to be delete expense command."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean whether command is delete expense command."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isDeleteExpenseCommand(String command) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.length() \u003e\u003d 8 \u0026\u0026 command.contains(\"delete e\");"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns boolean if the command is intended to be help command."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean whether command is help command."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static boolean isHelpCommand(String command) {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return command.length() \u003d\u003d 4 \u0026\u0026 command.equals(\"help\");"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks error for user input for delete expense command."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses Expense list."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If  wrong user input for delete expense command."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkErrorForDeleteExpenseCommand(String command, ExpenseList expenses, Ui ui)"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.contains(\" \")) {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number and there is just trailing whitespaces"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String res \u003d command.replace(\" \", \"\");"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (res.length() \u003d\u003d CHAR_LENGTH_OF_DELETE_E - 1) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new DukeException(ui.showNoExpenseNumber());"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.length() \u003d\u003d CHAR_LENGTH_OF_DELETE_E) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //throw exception for no task number"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoExpenseNumber());"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int curr \u003d Parser.expenseToDelete(command);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (expenses.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //check if list has no task to throw exception"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoExpenseInList());"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (curr \u003e expenses.size()) {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //check if index is within list size or throw exception"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoSuchExpense());"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns double value of income and checks for wrong number format input."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String of user command"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Double value of income"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If wrong user input for income"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static double parseAndCheckErrorsForIncome(String command) throws DukeException {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            double income \u003d Double.valueOf(command.substring(7));"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return income;"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showWrongIncomeInput());"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks error for user input for income command."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command User input."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException If there is wrong user input format."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static void checkNoIncomeInputError(String command) throws DukeException {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (command.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoIncomeInput());"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (command.contains(\"income\") \u0026\u0026 !command.contains(\" \")) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoWhitespaceForIncome());"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String res \u003d command.replace(\" \", \"\");"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (res.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new DukeException(ui.showNoIncomeInput());"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 697
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Executes loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Able to load from existing file or create new file, overwrite existing file or append to existing file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected String filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param filepath String of filepath for file to be worked with."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Loads the information in the existing data file into the \u003ccode\u003eTasklist\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Else, creates data file if it does not exist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return ArrayList of tasks that is loaded from data file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If file cannot be loaded or created thrown by \u003ccode\u003eBufferedReader\u003c/code\u003e or \u003ccode\u003eFile\u003c/code\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTaskFile() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Task t \u003d Parser.readInFileLine(line);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            tasks.add(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Writes the information of the task into existing data file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Writes it in format according to \u003ccode\u003etoWriteIntoFile\u003c/code\u003e in \u003ccode\u003eDeadline\u003c/code\u003e,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e or \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If file cannot be written into thrown by \u003ccode\u003eFileWriter\u003c/code\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void writeFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String textFileMsg \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                textFileMsg \u003d textFileMsg + tasks.get(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                textFileMsg \u003d textFileMsg + System.lineSeparator() + tasks.get(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Appends the information of the task into existing data file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Appends it in format according to \u003ccode\u003etoWriteIntoFile\u003c/code\u003e in \u003ccode\u003eDeadline\u003c/code\u003e,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * \u003ccode\u003eEvent\u003c/code\u003e or \u003ccode\u003eTodo\u003c/code\u003e."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If file cannot be appended to thrown by \u003ccode\u003eFileWriter\u003c/code\u003e."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void appendFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String textFileMsg \u003d System.lineSeparator() + tasks.get(tasks.size() - 1).toWriteIntoFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filepath, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Appends the information of expense into existing data file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses Expense list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If file cannot be appended."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void appendExpenseFile(ExpenseList expenses) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String textFileMsg \u003d System.lineSeparator() + expenses.get(expenses.size() - 1).toWriteIntoFile();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filepath, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Loads data file information into array list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Expense list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If file cannot be read in."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ArrayList\u003cExpense\u003e loadExpenseFile() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Expense t \u003d Parser.readInExpenseFileLine(line);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            expenses.add(t);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Writes data file from the beginning according to expense list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses Expense list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If data file cannot be written into."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void writeExpenseFile(ExpenseList expenses) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String textFileMsg \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size(); i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                textFileMsg \u003d textFileMsg + expenses.get(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                textFileMsg \u003d textFileMsg + System.lineSeparator() + expenses.get(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Removes file and its content."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If cannot close filepath"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void removeFile() throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        new FileWriter(filepath, false).close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Writes the income into existing data file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If file cannot be written into thrown by \u003ccode\u003eFileWriter\u003c/code\u003e."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void writeIncomeFile(double income) throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String textFileMsg \u003d \"\" + income;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns data file income."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Expense list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If file cannot be read in."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public double loadIncomeFile() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double t \u003d 0.0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            t \u003d Double.parseDouble(line);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 175
    }
  },
  {
    "path": "src/main/java/seedu/duke/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public StorageStub(String fp) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(fp);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTaskFile() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        arr.add(new Todo(\"abc\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        arr.add(new Todo(\"def\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ArrayList\u003cExpense\u003e loadExpenseFile() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cExpense\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        arr.add(new Expense(\"ghi\", 120));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        arr.add(new Expense(\"jkl\", 130));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public double loadIncomeFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return 0.0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can take in a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Marks task is automatically as undone."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param description String description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Retrieves the description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Retrieves the status of DONE or NOT DONE of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Tick for a task that is done and cross for a undone task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String status of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int asciiTick \u003d 0x2713;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int asciiCross \u003d 0x2718;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String tick \u003d Character.toString((char)asciiTick);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String cross \u003d Character.toString((char) asciiCross);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (isDone ? tick : cross);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Retrieves the 1 or 0 of the task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * 1 for a task that is done and 0 for a undone task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String 1 or 0 of task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getIfDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * String representation of the task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String representation of task as [status icon] task description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String msg \u003d \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns string representation of the task to be written into data file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String representation of task as | 1 or 0 | task description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toWriteIntoFile() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String msg \u003d \" | \" + this.getIfDone() + \" | \" + this.getDescription();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the list of tasks in Duke. \u003ccode\u003eTaskList\u003c/code\u003e allows tasks to be added,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * removed and retrieved."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * It can also return the size of the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected ArrayList\u003cTask\u003e arr;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor that takes in an arraylist of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param arr Arraylist of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e arr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.arr \u003d arr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns integer number of tasks in list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Integer size of the list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return arr.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns task at a specific index in list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * The first task in the list starts with index 0."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index of task to retrieve from list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Task from list at index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return arr.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Removes the task at a specific index in list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * The first task in the list starts with index 0."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index of task to remove from list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert index \u003e\u003d 0 : \"Invalid task number\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        (this.arr).remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Adds the task at the end of list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * The first task in the list starts with index 0."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param task Task to be added to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        (this.arr).add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 69
    }
  },
  {
    "path": "src/main/java/seedu/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the todo task which extends \u003ccode\u003eTask\u003c/code\u003e. A \u003ccode\u003eTodo\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can take in a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param description String description of the todo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns string representation of the todo task with its description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String with the type of [task] [tick or cross] description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns string representation of the todo task with its description"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * to write into the data file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String with the type of task | boolean of whether done | description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toWriteIntoFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"T\" + super.toWriteIntoFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027todo\u0027. A \u003ccode\u003eTodoCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command with checks for exception by adding todo to tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param command String command of \u0027todo\u0027."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TodoCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and checks exceptions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Also, prints out what has been done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws DukeException  If there is incorrect user input format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If there is problems reading/writing or appending to file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If there is problems with Parser reading in file line."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Parser.checkErrorForTodoCommand(command, tasks, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tasks.add(Parser.createTodo(command));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assert tasks.size() \u003e 0 : \"tasks size invalid\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (tasks.size() \u003e 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            taskStorage.appendFile(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            taskStorage.writeFile(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return ui.printAddedTask(tasks.get(tasks.size() - 1))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + ui.printNoOfTaskInList(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns false to not exit."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns type of command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of command type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //for testing purposes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"TodoCommand\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/TutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the command when user inputs \u0027tutorial\u0027. A \u003ccode\u003eTutorialCommand\u003c/code\u003e object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * can \u003ccode\u003eexecute\u003c/code\u003e the command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " **/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TutorialCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TutorialCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the string tutorial to run tutorial scene."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks  TaskList of all tasks currently."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenses ExpenseList of all expenses currently."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param ui Ui that interacts with user by checking for exceptions and printing out"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *           executed tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskStorage Storage that load/write or append to data file after updating tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param expenseStorage Storage that load/write or append to data file after updating expenses."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String execute(TaskList tasks, ExpenseList expenses, Ui ui, Storage taskStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          Storage expenseStorage, Storage incomeStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"tutorial\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the boolean false to not exit."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return false to not exit duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/TutorialScene.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Controller for Tutorial Scene. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TutorialScene {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private VBox layout;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TextField input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Button enterBtn;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private ScrollPane helpContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Duke tutorialDuke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Scene mainScene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TutorialScene() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Initialises the layout for the tutorial scene."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        layout.getChildren().add(DialogBox.getDukeDialog(\"For the tutorial, \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"To learn more about the task managing commands, enter \u0027tasks\u0027\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"To learn more about the expense tracking commands, enter \u0027expenses\u0027\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"To return to the actual chat bot, enter \u0027back\u0027 anytime.\\n\", dukeImage));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        helpContainer.vvalueProperty().bind(layout.heightProperty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void handleHelpUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String userInput \u003d input.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (userInput.equals(\"tasks\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            showIntroDialog(userInput, \"Let\u0027s start!\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"To add a todo for homework, \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"type \u0027todo homework\u0027\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"todo homework\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To add a event for a meeting on 31/12/2019 6.00PM, \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"type \u0027event meeting /at 31/12/2019 1800\u0027\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"event meeting /at 31/12/2019 1800\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To add a deadline for an assignment on 31/12/2019 6.00PM, \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"type \u0027deadline assignment /by 31/12/2019 1800\u0027\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"deadline assignment /by 31/12/2019 1800\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To see all tasks, \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"type \u0027list\u0027\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To delete the task at index 1 which is todo homework, \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"type \u0027delete 1\u0027\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"delete e2\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"I can help you budget too! You can see how much you overspent \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"or have left from your income every time you add a new expense or call to see the expense list.\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"\\nTo input an income of 1800,\\ntype \u0027income 1800\u0027\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"income \")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput,\"To delete all expenses when you get your income,\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"\\ntype \u0027delete all\u0027\\nThis only works for expenses not tasks :-)\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"delete all\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput,\"To bid goodbye to Duke,\\ntype \u0027bye\u0027\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"find\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To mark meeting event as done, \\ntype \u0027done 1\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"done 1\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To bid goodbye to Duke, type \u0027bye\u0027\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"That\u0027s the end of this tutorial!\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"To go back to chat bot, type \u0027back\u0027\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"To go to task manager tutorial, type \u0027tasks\u0027\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"To go to expense tracking tutorial, type \u0027expenses\u0027\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.equals(\"expenses\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            showIntroDialog(userInput, \"Let\u0027s start!\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"To add an expense called phonebill with expense amount of $29.90 \\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"type \u0027expense phonebill 29.9\u0027\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"expense phonebill 29.9\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"Now try adding another expense called food with \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"expense amount of $30.50\u0027\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"expense food 30.50\") || userInput.contains(\"expense food 30.5\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To list all expense and get total expenditure,\\ntype \u0027elist\u0027\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.equals(\"elist\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To delete the expense of food at index 2,\\ntype \u0027delete e2\u0027\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.contains(\"delete 1\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            replyAndNextDialog(userInput, \"To find a task by keyword like meet, \\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"type \u0027find meet\u0027\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (userInput.equals(\"back\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            wrongInputDialog();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sets the stage for this scene."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param stage Stage."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setStage(Stage stage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.stage \u003d stage;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Allows access to another scene."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param scene Scene."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setScene(Scene scene) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.scene \u003d scene;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void replyAndNextDialog(String input, String nextStep) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String response \u003d tutorialDuke.getResponse(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        var db \u003d DialogBox.getDukeDialog(nextStep, dukeImage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        layout.getChildren().addAll("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                db);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.input.clear();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void wrongInputDialog() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String response \u003d \"Please follow the tutorial instructions carefully :-)\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        layout.getChildren().addAll("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                DialogBox.getUserDialog(input.getText(), userImage),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void showIntroDialog(String input, String nextStep) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tutorialDuke \u003d new Duke();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tutorialDuke.loadEmptyLists();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        var db \u003d DialogBox.getDukeDialog(nextStep, dukeImage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        layout.getChildren().addAll("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                DialogBox.getUserDialog(input, userImage), db);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.input.clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 151
    }
  },
  {
    "path": "src/main/java/seedu/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents user interface that has methods that interacts with the user and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * prints out messages of commands and exceptions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the welcome message of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of the welcome message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showIntro() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String greeting \u003d \"Hello! I\u0027m Duke Bunny.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"Enter \u0027help\u0027 if you need a summary of all the commands.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"Enter \u0027tutorial\u0027 if you need a tutorial on the commands.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return greeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the exception of loading data file into arraylist error."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of exception message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"OOPS!!! There is an error loading data file\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the exception string for a command Duke does not understand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of exception message when user input cannot be understood."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String noSuchCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the message of the task that is deleted with its information."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param task Task that is deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printDeletedTaskMsg(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of the tasks in the list currently."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of number of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printNoOfTaskInList(TaskList tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String statusOfList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (tasks.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            statusOfList \u003d \"Now you have \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + tasks.size()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \" task in the list.\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            statusOfList \u003d \"Now you have \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + tasks.size()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return statusOfList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the message of the task and its information that is added to the list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * of tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param task Task that is added to the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printAddedTask(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String commandMsg \u003d \"Got it. I\u0027ve added this task:\\n\" + task;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return commandMsg;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the message of the task information that is marked as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param task Task that is marked as done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printMarkDoneMsg(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String markAsDoneMsg \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"[\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + task.getStatusIcon()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"] \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + task.getDescription()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return markAsDoneMsg;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of all the tasks in the list with the information of each task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of all the tasks currently."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printAllTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String listMsg \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String taskMsg \u003d (i + 1) + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            listMsg \u003d listMsg + taskMsg;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return listMsg;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the exception message for a parse error caused by an incorrectly input date, time format."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showParseError() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"OOPS!!! Please input the date in dd/mm/yyyy \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"and time in 24hr format or 12hr format as HHmm or H.mmAM or H.mmPM, separated by a space.\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the exception message for an exception with default message."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param e Exception that was thrown to be printed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of exception message."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showExceptionMsg(Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return e.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the goodbye message of duke when the bye command is input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of goodbye message."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printGoodbyeMsg() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String exitMsg \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return exitMsg;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of all the tasks matching keyword with the information of each task."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tasks TaskList of all the tasks matching keyword."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printAllMatchingTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String listMsg \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String taskMsg \u003d (i + 1) + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            listMsg \u003d listMsg + taskMsg;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return listMsg;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no task number inputted."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoTaskNumber() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! Please input the task number.\\n\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no such task according to task number inputted."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoSuchTask() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! You do not have that task in your list. \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"Call \u0027list\u0027 to see all your tasks :-)\\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no keyword inputted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoFindKeyword() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! Please input the keyword for me to search in the list.\\n\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no description inputted for inputted task command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskType String of the type of task."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoDescription(String taskType) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! The description of \u0027\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + taskType"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\u0027 cannot be empty.\\n\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is wrong whitespace input for description."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskType String of the type of task."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoWhitespaceForDescription(String taskType) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! Please input a whitespace between the command \u0027\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + taskType"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\u0027 and your task description for me to keep track of it correctly :-)\\n\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no date inputted for task."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskType String of the type of task."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoDate(String taskType) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String error \u003d \"OOPS!!! You would need to schedule a date and time for\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \" this \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + taskType"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \" using \u0027/at\u0027.\\n\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return error;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String error \u003d \"OOPS!!! You would need to schedule a date and time for\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \" this \""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + taskType"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \" using \u0027/by\u0027.\\n\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return error;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return \"error with input\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is wrong whitespace input for date/time."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param taskType String of the type of task."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoWhitespaceForDate(String taskType) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String error \u003d \"OOPS!!! Please input a whitespace before and after \u0027/at\u0027 for me \""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"to keep track of the date/time correctly :-)\\n\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return error;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String error \u003d \"OOPS!!! Please input a whitespace before and after \u0027/by\u0027 for me \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"to keep track of the date/time correctly :-)\\n\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return error;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return \"error with input\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no task in the list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoTaskInList() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! You do not have any tasks in your list.\\n\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of all the expenses in the list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printAddedExpense(Expense expense) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String commandMsg \u003d \"Got it. I\u0027ve added this expense:\\n\" + expense;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return commandMsg;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of the number of expenses and total expenditure."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printNoOfExpenseInList(ExpenseList expenses) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String statusOfList;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (expenses.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            statusOfList \u003d \"Now you have \""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + expenses.size()"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \" expense in the list.\\n\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            statusOfList \u003d \"Now you have \" + expenses.size() + \" expenses in the list.\\n\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String totalAmount \u003d \"The total expenditure is now: \""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + expenses.getSum()"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (expenses.isThereInputtedIncome()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String leftover;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (expenses.isOverspent()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                leftover \u003d \"The amount you have overspent:\\n\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + expenses.getIncomeLeft()"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                leftover \u003d \"The amount of income left:\\n\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + expenses.getIncomeLeft()"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return statusOfList + totalAmount + leftover;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return statusOfList + totalAmount;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of all the expenses in the list and total expenditure."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printAllExpenses(ExpenseList expenses) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String listMsg \u003d \"Here are the expenses in your list:\\n\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size(); i++) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Expense task \u003d expenses.get(i);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String expenseMsg \u003d (i + 1) + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            listMsg \u003d listMsg + expenseMsg;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size(); i++) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            sum \u003d sum + expenses.get(i).getAmount();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String totalAmount \u003d \"Total expenditure: \""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + sum"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (expenses.isThereInputtedIncome()) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String leftover;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (expenses.isOverspent()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                leftover \u003d \"The amount you have overspent:\\n\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + expenses.getIncomeLeft()"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                leftover \u003d \"The amount of income left:\\n\""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + expenses.getIncomeLeft()"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return listMsg + totalAmount + leftover;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return listMsg + totalAmount;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns exception message for wrong format for expense input."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoWhitespaceForExpenseDescription(String taskType) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! Please input a whitespace between the command \u0027\""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + taskType"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\u0027 and your expense type or description for me to keep track of it correctly :-)\\n\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is wrong whitespace input for amount for expense."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoWhitespaceForAmount() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! Please input a whitespace between the description \u0027\""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\u0027 and your amount spent for me to keep track of it correctly :-)\\n\";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that the expense is removed from list."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printDeletedExpenseMsg(Expense expense) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"Noted. I\u0027ve removed this expense:\\n\""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + expense;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no expense number inputted."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoExpenseNumber() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! Please input the expense number you would like to mark as done.\\n\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no expenses in list."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoExpenseInList() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! You do not have any expenses in your list.\\n\";"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns message of that there is no such expense according to number inputted."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoSuchExpense() {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! You do not have that expense in your list. \""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"Call \u0027list\u0027 to see all your tasks :-)\\n\";"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns error message of wrong income inputted."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showWrongIncomeInput() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! You need to input a valid income amount.\";"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns error message of no income inputted."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoIncomeInput() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! You need to input an income amount.\";"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns error message of wrong whitespace format for user input."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return String of message."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String showNoWhitespaceForIncome() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String error \u003d \"OOPS!!! You need to input a valid income amount by having a space between \u0027income\u0027\""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \" and your input amount.\";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return error;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 450
    }
  },
  {
    "path": "src/main/java/seedu/duke/UiStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class UiStub extends Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String printAllMatchingTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //System.out.println(\"Ui Stub\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return \"Ui stub\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 10
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"TextArea\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 19
    }
  },
  {
    "path": "src/main/resources/view/TutorialScene.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.TutorialScene\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cTextField fx:id\u003d\"input\" layoutY\u003d\"558.0\" onAction\u003d\"#handleHelpUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cButton fx:id\u003d\"enterBtn\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelpUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"helpContainer\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            \u003cVBox fx:id\u003d\"layout\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiTick \u003d 0x2713;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiCross \u003d 0x2718;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String tick \u003d Character.toString((char)asciiTick);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String cross \u003d Character.toString((char) asciiCross);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Deadline dl \u003d new Deadline(\"abc\", date, time);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[D][\" + cross + \"] abc (by: 24 Aug 2019 6.00 PM)\", dl.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Deadline dl \u003d new Deadline(\"abc\", date, time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            dl.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[D][\" + tick + \"] abc (by: 24 Aug 2019 6.00 PM)\", dl.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Deadline dl \u003d new Deadline(\"abc\", date, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"D | 0 | abc | 24/08/2019 1800\", dl.toWriteIntoFile());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Deadline dl \u003d new Deadline(\"abc\", date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            dl.markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"D | 1 | abc | 24/08/2019 1800\", dl.toWriteIntoFile());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 72
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private void assertEquals(int i, int i1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 37
    }
  },
  {
    "path": "src/test/java/seedu/duke/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiTick \u003d 0x2713;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiCross \u003d 0x2718;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String tick \u003d Character.toString((char)asciiTick);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String cross \u003d Character.toString((char) asciiCross);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Event event \u003d new Event(\"abc\", date, time);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[E][\" + cross + \"] abc (at: 24 Aug 2019 6.00 PM)\", event.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Event event \u003d new Event(\"abc\", date, time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            event.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[E][\" + tick + \"] abc (at: 24 Aug 2019 6.00 PM)\", event.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Event dl \u003d new Event(\"abc\", date, time);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"E | 0 | abc | 24/08/2019 1800\", dl.toWriteIntoFile());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date date \u003d dateFormat.parse(\"24/08/2019\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Date time \u003d timeFormat.parse(\"1800\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Event dl \u003d new Event(\"abc\", date, time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            dl.markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"E | 1 | abc | 24/08/2019 1800\", dl.toWriteIntoFile());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 72
    }
  },
  {
    "path": "src/test/java/seedu/duke/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiTick \u003d 0x2713;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiCross \u003d 0x2718;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String tick \u003d Character.toString((char)asciiTick);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String cross \u003d Character.toString((char) asciiCross);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        FindCommand find \u003d new FindCommand(\"find e\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        StorageStub st \u003d new StorageStub(\"dummy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList(st.loadTaskFile());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ExpenseList el \u003d new ExpenseList(st.loadExpenseFile(), st.loadIncomeFile());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"1. [T][\" + cross + \"] def\\n\", find.execute(tl, el, ui, st, st, st));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiTick \u003d 0x2713;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiCross \u003d 0x2718;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String tick \u003d Character.toString((char)asciiTick);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String cross \u003d Character.toString((char) asciiCross);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[D][\" + cross + \"] abc (by: 24 Aug 2019 6.00 PM)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    Parser.readInFileLine(\"D | 0 | abc | 24/08/2019 1800\").toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(1,2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[D][\" + tick + \"] abc (by: 24 Aug 2019 6.00 PM)\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    (Parser.readInFileLine(\"D | 1 | abc | 24/08/2019 1800\")).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(1,2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isDeleteCommand(\"delete 2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isDeleteCommand(\"delete ebc\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test5() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isTodoCommand(\"todo efreb\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test6() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isTodoCommand(\"todo\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test7() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isEventCommand(\"event efreb\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test8() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isEventCommand(\"event\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test9() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(\"[T][\" + cross + \"] abcd\", Parser.createTodo(\"todo abcd\").toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test10() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[E][\" + cross + \"] efgh (at: 24 Aug 2019 4.00 PM)\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    Parser.createEvent(\"event efgh /at 24/08/2019 1600\").toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test11() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[E][\" + cross + \"] help (at: 30 Aug 2019 4.00 PM)\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    Parser.createEvent(\"event help /at 30/08/2019 1600\").toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test12() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isDeadlineCommand(\"deadline\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test13() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(true, Parser.isDeadlineCommand(\"deadline vfrfwre brv\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test14() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"[D][\" + cross + \"] help (by: 30 Aug 2019 4.00 PM)\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    Parser.createDeadline(\"deadline help /by 30/08/2019 1600\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                            .toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            System.out.println(\"failed test\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test15() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(12, Parser.taskToMarkDone(\"done 12\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test16() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(3, Parser.taskToMarkDone(\"done 3\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test17() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"EventCommand\", Parser.parse(\"event 3\", ui).toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test18() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"EventCommand\", Parser.parse(\"event wbcwecb /at revbr\", ui).toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test19() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"ByeCommand\", Parser.parse(\"bye\", ui).toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test20() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"DeleteCommand\", Parser.parse(\"delete 99\", ui).toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test21() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"DeleteCommand\", Parser.parse(\"delete\", ui).toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test22() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"MarkDoneCommand\", Parser.parse(\"done\", ui).toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test23() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"DeadlineCommand\", Parser.parse(\"deadline sjcbew c \", ui).toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test24() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"TodoCommand\", Parser.parse(\"todo   dw\", ui).toString());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test25() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.parse(\"wbfwf\", ui);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry but I don\u0027t know what that means :-(\\n\", e.toString());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test26() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.parse(\"wbf\", ui);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry but I don\u0027t know what that means :-(\\n\", e.toString());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(2, 3);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test27() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.createDeadline(\"deadline defbf /by 25/08/20191600\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! Please input the date in dd/mm/yyyy and time in 24hr format \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"or 12hr format as HHmm or H.mmAM or H.mmPM, separated by a space.\\n\", ui.showParseError());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 237
    }
  },
  {
    "path": "src/test/java/seedu/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList(arr);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(0, tl.size());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 15
    }
  },
  {
    "path": "src/test/java/seedu/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiTick \u003d 0x2713;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    int asciiCross \u003d 0x2718;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String tick \u003d Character.toString((char)asciiTick);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    String cross \u003d Character.toString((char) asciiCross);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Todo td \u003d new Todo(\"abc\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(\"[T][\" + cross + \"] abc\", td.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Todo td \u003d new Todo(\"abc\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        td.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(\"[T][\" + tick + \"] abc\", td.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Todo td \u003d new Todo(\"abc\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(\"T | 0 | abc\", td.toWriteIntoFile());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Todo td \u003d new Todo(\"abc\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        td.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(\"T | 1 | abc\", td.toWriteIntoFile());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 38
    }
  },
  {
    "path": "src/test/java/seedu/duke/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tl.add(new Todo(\"abc\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(\"Now you have 1 task in the list.\\n\", ui.printNoOfTaskInList(tl));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tl.add(new Todo(\"abc\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tl.add(new Todo(\"afewhb\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tl.add(new Todo(\"ecbe\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        assertEquals(\"Now you have 3 tasks in the list.\\n\", ui.printNoOfTaskInList(tl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeleteCommand(\"delete     \", tl, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! Please input the task number.\\n\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeleteCommand(\"delete\", tl, ui);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! Please input the task number.\\n\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test5() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeleteCommand(\"delete 3\", tl, ui);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! You do not have any tasks in your list.\\n\", e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test6() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tl.add(new Todo(\"edcbe\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeleteCommand(\"delete 3\", tl, ui);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! You do not have that task in your list. \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"Call \u0027list\u0027 to see all your tasks :-)\\n\",  e.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test7() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeadlineCommand(\"deadline    \", tl, ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! The description of \u0027deadline\u0027 cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test8() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeadlineCommand(\"deadline   \", tl, ui);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! The description of \u0027deadline\u0027 cannot be empty.\\n\", e.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test9() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeadlineCommand(\"deadlinesubmitwork\", tl, ui);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! Please input a whitespace between the command \u0027deadline\u0027 \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"and your task description for me to keep track of it correctly :-)\\n\", e.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test10() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeadlineCommand(\"deadline submit work /bycwpmc\", tl, ui);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! Please input a whitespace before and after \u0027/by\u0027 for me to \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"keep track of the date/time correctly :-)\\n\",  e.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test11() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeadlineCommand(\"deadline submit work\", tl, ui);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! You would need to schedule a date and time for this \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"deadline using \u0027/by\u0027.\\n\",  e.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test12() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeadlineCommand(\"deadline /by 13/09/2019 1600\", tl, ui);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! The description of \u0027deadline\u0027 cannot be empty.\\n\",  e.toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test13() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkErrorForDeadlineCommand(\"deadline awfbwe /at 13/09/2019 1600\", tl, ui);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! You would need to schedule a date and time for this \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"deadline using \u0027/by\u0027.\\n\",  e.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test14() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkMarkDoneError(\"done 3\", tl, ui);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! You do not have that task in your list. \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    + \"Call \u0027list\u0027 to see all your tasks :-)\\n\",  e.toString());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test15() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkMarkDoneError(\"done\", tl, ui);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! Please input the task number.\\n\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void test16() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Parser.checkMarkDoneError(\"done     \", tl, ui);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            assertEquals(\"OOPS!!! Please input the task number.\\n\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    e.toString());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 212
    }
  }
]
