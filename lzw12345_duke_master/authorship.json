[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the ui][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "lzw12345": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    testImplementation (\u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    implementation \u0027com.fasterxml.jackson.core:jackson-core:2.9.8\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    implementation \u0027com.fasterxml.jackson.core:jackson-annotations:2.9.8\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    implementation \u0027com.fasterxml.jackson.core:jackson-databind:2.9.8\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    implementation \u0027com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.4\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    archiveVersion \u003d \"0.1.4\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 38,
      "-": 14
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 12
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import ui.NewGui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Main() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/NewGui.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            VBox vb \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            Scene scene \u003d new Scene(vb);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            fxmlLoader.\u003cNewGui\u003egetController().setUi(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 35
    }
  },
  {
    "path": "src/main/java/core/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import storage.JsonParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Main class of the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * starts the application and receives use input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private JsonParser jsonParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Duke() throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        jsonParser \u003d new JsonParser(\"src/main/resources/data/SaveFile.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        tasks \u003d jsonParser.readData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Main link between the ui and the core program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return returns collection of print statements to be displayed by chatbot"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws IOException when there is a loading error"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getResponse(String input) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        tasks \u003d jsonParser.readData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        parser.parseTasks(input, tasks,false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        jsonParser.storeData(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return outContent.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public ObservableList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return FXCollections.observableArrayList(tasks.getTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 45,
      "-": 2
    }
  },
  {
    "path": "src/main/java/notes/Notes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Notes {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private SimpleStringProperty category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private SimpleStringProperty description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonFormat(pattern \u003d \"dd-MM-yyyy HH:mm\", timezone \u003d \"UTC\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private SimpleObjectProperty\u003cLocalDateTime\u003e dateCreated;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonFormat(pattern \u003d \"dd-MM-yyyy HH:mm\", timezone \u003d \"UTC\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private SimpleObjectProperty\u003cLocalDateTime\u003e date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Constructor with some Json tags to allow reading from file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param category contains type of category the note belongs too"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param description contains actual note"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param date optional date that can be included"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Notes(@JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                 @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                 @JsonProperty(\"date\") LocalDateTime date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.category \u003d new SimpleStringProperty(category);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.description \u003d new SimpleStringProperty(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.dateCreated \u003d new SimpleObjectProperty\u003c\u003e(LocalDateTime.now());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.date \u003d new SimpleObjectProperty\u003c\u003e(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return category.get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SimpleStringProperty categoryProperty() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setCategory(String category) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.category.set(category);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return description.get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SimpleStringProperty descriptionProperty() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.description.set(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public LocalDateTime getDateCreated() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return dateCreated.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SimpleObjectProperty\u003cLocalDateTime\u003e dateCreatedProperty() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return dateCreated;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setDateCreated(LocalDateTime dateCreated) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.dateCreated.set(dateCreated);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return date.get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SimpleObjectProperty\u003cLocalDateTime\u003e dateProperty() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setDate(LocalDateTime date) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.date.set(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 82
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import ui.TextUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Parser class to split up the user input in to separate variables. it then checks the command and executes as directed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * It also splits up the input from save files and adds it in the same way to a TaskList object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private boolean isSafe \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TaskList scheduler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Integer tasknum;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private String noteDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\w+)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"\\\\s*(?\u003ccompletionStatus\u003e(\\\\[[01]\\\\])?)\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"\\\\s*(?\u003cdescription\u003e([\\\\w\\\\s\\\\d{}.|]+)?)\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"(?:(/by|/at))?(?\u003cdate\u003e([\\\\w\\\\s\\\\d/]+)?)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public static final Pattern NOTE_FORMAT \u003d Pattern.compile(\"\\\\{(?\u003ctask\u003e[0-9.]+)\\\\}\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"\\\\s*(?\u003ccategory\u003e([\\\\w\\\\s\\\\d]+)?)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            + \"\\\\|?\\\\s*(?\u003cdescription\u003e([\\\\w\\\\s\\\\d]+)?)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * method used to split up the user input and execute the required task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param fullCommand user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param scheduler TaskList object that commands are to be executed on"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param isLoading boolean variable to check if the input is from a user or save file (to stop some print actions)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parseTasks(String fullCommand, TaskList scheduler, boolean isLoading) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.scheduler \u003d scheduler;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Matcher matcher \u003d COMMAND_FORMAT.matcher(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            splitTaskKeywords(matcher);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            if (isSafe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                executeCommand(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            ui.printErrorMsg2();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            isSafe \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Parses the commands for handling notes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param noteCommand actual command for handling notes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void splitNotesCommand(String noteCommand) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Matcher matcher \u003d NOTE_FORMAT.matcher(noteCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tasknum \u003d Integer.parseInt(matcher.group(\"task\")) - 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            category \u003d matcher.group(\"category\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            noteDescription \u003d matcher.group(\"description\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            ui.printErrorMsg2();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            isSafe \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean isSafe() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return isSafe;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Method to initialize the various variables with the parsed command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param matcher contains the parsed command according to the above regex format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void splitTaskKeywords(Matcher matcher) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        command \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        isDone \u003d matcher.group(\"completionStatus\").equals(\"[1]\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        description \u003d matcher.group(\"description\").trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (!matcher.group(\"date\").isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                DateTimeFormatter inputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                date \u003d LocalDateTime.parse(matcher.group(\"date\").trim(), inputFormat);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                ui.printWrongDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                isSafe \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Method that executes the commands according to the appropriate command word."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param command contains the main command word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void executeCommand(String command) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"notebook\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            scheduler.addTask(command, description, isDone, date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            scheduler.listTasks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            scheduler.completeTask(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            scheduler.removeTask(description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            scheduler.findTasks(description);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"addnote\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            splitNotesCommand(description);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            scheduler.getTasks().get(tasknum).addNote(category, noteDescription, date);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"deletenote\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            splitNotesCommand(description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            scheduler.getTasks().get(tasknum).removeNote(category);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            ui.printErrorMsg1();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            isSafe \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lzw12345": 139
    }
  },
  {
    "path": "src/main/java/storage/JsonParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class JsonParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public JsonParser(String filepath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Method to store data in the Json format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param tasks contains the tasklist to be stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws IOException in the case of a missing file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void storeData(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        mapper.registerModule(new JavaTimeModule());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ObjectWriter writer \u003d mapper.writer(new DefaultPrettyPrinter());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        writer.writeValue(new File(filepath),tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Method to load data from the Json formatted file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return returns the tasklist class with all the saveddata loaded"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @throws IOException in the case of missing file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TaskList readData() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        mapper.registerModule(new JavaTimeModule());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskList \u003d mapper.readValue(new FileInputStream(filepath), TaskList.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 48
    }
  },
  {
    "path": "src/main/java/tasklist/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Represents the Deadline type of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Deadline(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    @JsonProperty(\"isDOne\") boolean completionStatus,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    @JsonProperty(\"dateDue\") LocalDateTime date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(description,completionStatus, date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskType \u003d new SimpleStringProperty(\"Deadline\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getOverallStatus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return \"[D]\" + getCurrentStatus() + description.getValue() + \"(by:\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + dateDue.getValue().format(OUTPUT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 29
    }
  },
  {
    "path": "src/main/java/tasklist/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Represents the Event type of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Event(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                 @JsonProperty(\"isDone\") boolean completionStatus,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                 @JsonProperty(\"dateDue\") LocalDateTime date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(description, completionStatus,date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskType \u003d new SimpleStringProperty(\"Event\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getOverallStatus() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return \"[E]\" + getCurrentStatus() + description.getValue() + \"(at:\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + dateDue.getValue().format(OUTPUT_FORMAT) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 29
    }
  },
  {
    "path": "src/main/java/tasklist/Notebook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Notebook extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Notebook(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                @JsonProperty(\"isDone\") boolean completionStatus,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                @JsonProperty(\"dateDue\") LocalDateTime date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(description,completionStatus,date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskType \u003d new SimpleStringProperty(\"notebook\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getOverallStatus() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return \"[N]\" + description.getValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 26
    }
  },
  {
    "path": "src/main/java/tasklist/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import notes.Notes;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import ui.TextUi;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "@JsonTypeInfo(use \u003d Id.NAME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        include \u003d JsonTypeInfo.As.PROPERTY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        property \u003d \"type\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        @Type(value \u003d Todo.class, name \u003d \"Todo\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        @Type(value \u003d Deadline.class, name \u003d \"Deadline\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        @Type(value \u003d Event.class, name \u003d \"Event\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        @Type(value \u003d Notebook.class, name \u003d \"Notebook\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "})"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Abstract class for all tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * gurantees that all important methods are implemented"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected SimpleStringProperty taskType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected SimpleStringProperty description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected SimpleBooleanProperty isDone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonFormat(pattern \u003d \"dd-MM-yyyy HH:mm\", timezone \u003d \"UTC\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected ObjectProperty\u003cLocalDateTime\u003e dateDue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected ArrayList\u003cNotes\u003e noteBook \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected TextUi ui \u003d new TextUi();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected static final DateTimeFormatter OUTPUT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMMM hhmm a\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * First of two constructors for deadline and event tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Task(String description, boolean completionStatus, LocalDateTime date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.description \u003d new SimpleStringProperty(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.isDone \u003d new SimpleBooleanProperty(completionStatus);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.dateDue \u003d new SimpleObjectProperty\u003c\u003e(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Second of two constructors for todo tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Task(String description, boolean completionStatus) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.description \u003d new SimpleStringProperty(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.isDone \u003d new SimpleBooleanProperty(completionStatus);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Returns the current status of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return returns either a tick or cross according to the completion status"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return ((isDone.getValue() ? \"[✓] \" : \"[✗] \")); //return tick or X symbols"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * overall status of task that includes name,completion status, description and date(if applicable)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * to be implemented according to task type."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @return the overall status in a assignment correct format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonIgnore"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public abstract String getOverallStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * changes task status to done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void completeTask() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        isDone.setValue(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * adds a note to a particular task or notebook."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param category contains the category type of the note"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param description contains the actual note"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param date contains an optional date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void addNote(String category, String description,LocalDateTime date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        noteBook.add(new Notes(category, description, date));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui.printAddedItem(category + \" \" + description + \" \" + date, noteBook.size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Method to remove the note or all the notes of a designated task or notebook."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param noteToRemove contains command indicating whether all tasks are to be deleted or 1 particular one"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void removeNote(String noteToRemove) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (noteToRemove.contains(\"all\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            noteBook.clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            ui.printRemovedItem(\"All entries\", noteBook.size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            int noteToDelete \u003d Integer.parseInt(noteToRemove);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            noteBook.remove(noteToDelete - 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return taskType.get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SimpleStringProperty taskTypeProperty() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setTaskType(String taskType) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.taskType.set(taskType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return description.get();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SimpleStringProperty descriptionProperty() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.description.set(description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public boolean isIsDone() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return isDone.get();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public SimpleBooleanProperty isDoneProperty() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.isDone.set(isDone);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public LocalDateTime getDateDue() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return dateDue.get();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public ObjectProperty\u003cLocalDateTime\u003e dateDueProperty() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return dateDue;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setDateDue(LocalDateTime dateDue) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.dateDue.set(dateDue);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public ObservableList\u003cNotes\u003e getNoteBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return FXCollections.observableArrayList(noteBook);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 166
    }
  },
  {
    "path": "src/main/java/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Represents an entire tasklist and contains methods to edit and display the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    protected ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e loadedList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        tasks \u003d loadedList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the ui after adding a new task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printNewTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui.printAddedItem(tasks.get(tasks.size() - 1).getOverallStatus(), tasks.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the ui for listing tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void listTasks() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui.printItemList(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Changes the completion status of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param completedtask tells the method which task has been completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void completeTask(String completedtask) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(completedtask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        tasks.get(taskNumber - 1).completeTask();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui.printCompletedTask(tasks.get(taskNumber - 1).getOverallStatus());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Method to add a task to the tasklist according to the correct type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param taskType determines type of task to add"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param completionStatus sets the completion status of the task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param date sets the date of the task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void addTask(String taskType, String description, boolean completionStatus, LocalDateTime date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assert !description.isEmpty() : \"description should not be empty\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tasks.add(new Todo(description,completionStatus,date));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tasks.add(new Deadline(description, completionStatus, date));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tasks.add(new Event(description, completionStatus, date));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        case \"notebook\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tasks.add(new Notebook(description,completionStatus,date));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            // not necessary as tasktype can only be the above 3"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Deletes the task as specified by user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param deletedEvent determines the task to be deleted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void removeTask(String deletedEvent) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (deletedEvent.contains(\"all\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tasks.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            ui.printRemovedItem(\"All tasks\", tasks.size() + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            int taskTodDelete \u003d Integer.parseInt(deletedEvent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            ui.printRemovedItem(tasks.get(taskTodDelete - 1).getOverallStatus(), tasks.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tasks.remove(taskTodDelete - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Searches through whole tasklist to try and find a match with the user input."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param search the string to search for"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void findTasks(String search) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ObservableList\u003cString\u003e foundtasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            if (task.getOverallStatus().contains(search)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                foundtasks.add(task.getOverallStatus());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ui.printFoundTasks(foundtasks);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 118
    }
  },
  {
    "path": "src/main/java/tasklist/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonIgnore;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Represents the Todo type of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public Todo(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                @JsonProperty(\"isDone\") boolean completionStatus,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                @JsonProperty(\"dateDue\") LocalDateTime date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(description,completionStatus,date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskType \u003d new SimpleStringProperty(\"Todo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public String getOverallStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return \"[T]\" + getCurrentStatus() + description.getValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 28
    }
  },
  {
    "path": "src/main/java/ui/DateTable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class DateTable extends TableView {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public DateTable(String filepath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        loadFxml(filepath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private void loadFxml(String filepath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(NewGui.class.getResource(filepath));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    static class ColumnFormatter\u003cS, T\u003e implements Callback\u003cTableColumn\u003cS, T\u003e, TableCell\u003cS, T\u003e\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        private final DateTimeFormatter format;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ColumnFormatter(DateTimeFormatter format) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            this.format \u003d format;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        public TableCell\u003cS, T\u003e call(TableColumn\u003cS, T\u003e arg0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            return new TableCell\u003cS, T\u003e() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                protected void updateItem(T item, boolean empty) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    super.updateItem(item, empty);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    if (item \u003d\u003d null || empty) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        setGraphic(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        LocalDateTime ld \u003d (LocalDateTime) item;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        String val \u003d ld.format(format);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                        setGraphic(new Label(val));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 60
    }
  },
  {
    "path": "src/main/java/ui/NewGui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import core.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class NewGui extends VBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private StackPane tableArea;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Label systemOutput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Integer task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TaskView taskView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TaskNoteBook taskNoteBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Method to pass duke and setup the ui."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param d contains the duke class that will be the core program"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setUi(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskView \u003d new TaskView(\"/view/TaskView.fxml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskNoteBook \u003d new TaskNoteBook(\"/view/TaskNoteBook.fxml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        tableArea.getChildren().addAll(taskView.getTable());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        systemOutput.setText(\"hi my name is duke\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private void handleUserInput() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        chooseTableView(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        systemOutput.setText(response);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private void chooseTableView(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (input.contains(\"list\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            String[] split \u003d input.split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            tableArea.getChildren().clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            if (split.length !\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                task \u003d Integer.parseInt(split[2]) - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                tableArea.getChildren().addAll(taskNoteBook.getTaskNoteBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                tableArea.getChildren().addAll(taskView.getTable());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskView.setTable(duke.getAllTasks());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (task !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            taskNoteBook.setTaskNoteBook(duke.getAllTasks().get(task).getNoteBook());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 71
    }
  },
  {
    "path": "src/main/java/ui/TaskNoteBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import notes.Notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class TaskNoteBook extends DateTable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableView\u003cNotes\u003e taskNoteBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cNotes, String\u003e categoryCol;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cNotes, String\u003e descriptionCol;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cNotes, LocalDateTime\u003e dateCol;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cNotes, LocalDateTime\u003e dateCreatedCol;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Constructor for to create a tasknotebook table that display notes within a task or notebook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param filepath contains the filepath to the FXML file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TaskNoteBook(String filepath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(filepath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        categoryCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"category\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        descriptionCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        dateCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        dateCol.setCellFactory(new ColumnFormatter\u003c\u003e(outputFormat));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        dateCreatedCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"dateCreated\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        dateCreatedCol.setCellFactory(new ColumnFormatter\u003c\u003e(outputFormat));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TableView\u003cNotes\u003e getTaskNoteBook() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return taskNoteBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void setTaskNoteBook(ObservableList\u003cNotes\u003e noteBook) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskNoteBook.setItems(noteBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lzw12345": 51
    }
  },
  {
    "path": "src/main/java/ui/TaskView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.cell.CheckBoxTableCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class TaskView extends DateTable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableView\u003cTask\u003e taskView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cTask, String\u003e taskTypeCol;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cTask, Boolean\u003e statusCol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cTask, String\u003e descriptionCol;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private TableColumn\u003cTask, LocalDateTime\u003e dateDueCol;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    TaskView(String filepath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        super(filepath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskTypeCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"taskType\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statusCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"isDone\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        statusCol.setCellFactory(tc -\u003e new CheckBoxTableCell\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        descriptionCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"description\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        dateDueCol.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"dateDue\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        dateDueCol.setCellFactory(new ColumnFormatter\u003c\u003e(outputFormat));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    TableView\u003cTask\u003e getTable() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        return taskView;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    void setTable(ObservableList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        taskView.setItems(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lzw12345": 55
    }
  },
  {
    "path": "src/main/java/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Contains all the text ui used in the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String DIVIDER \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private static final String LOGO \u003d \" ____         _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                     + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                     + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                     + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                                     + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TextUi() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * ui for printing when a new a item has been added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param task full task string including type, status, description and date(if applicable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param size total number of tasks in the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printAddedItem(String task, int size) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Got it. I\u0027ve added this item:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"       \" + task + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Now you have \" + size + \" item in the list.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints out the entire list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param taskList is the linkedlist containing the tasks to be printed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printItemList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Here are the items in your list:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * ui for indicating that a task has been marked complete."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param completedtask full task name and description of the completed task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printCompletedTask(String completedtask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Nice! I\u0027ve marked this item as done: \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"       \" + completedtask + \"\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * ui for indicating that a task has been removed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param task full task description"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param size total number of tasks on the list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printRemovedItem(String task, int size) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Noted. I\u0027ve removed this item: \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"       \" + task + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Now you have \" + (size - 1) + \" items in the list.\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the welcome message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printIntroduction() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(LOGO + DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     What can I do for you?\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the program exit messsage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printGoodByeMsg() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the error message for when the command word is wrongly formatted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printErrorMsg1() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know that command :-(\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the error message for a general command failure."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printErrorMsg2() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the error message for a loading error."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param tasknumber task that failed to load"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printLoadingError(int tasknumber) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     ☹ OOPS!!! I\u0027m sorry, but loading task \" + tasknumber"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \" has failed, it will be removed\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the error message for a wrongly formatted date."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printWrongDate() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t understand that date :-(\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + DIVIDER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * prints the ui for listing the found tasks."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * @param foundtasks list containing the tasks that were found"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void printFoundTasks(ObservableList\u003cString\u003e foundtasks) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        if (foundtasks.isEmpty()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    + \"     ☹ OOPS!!! I\u0027m sorry, but I couldn\u0027t find anything :-(\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    + DIVIDER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            System.out.println(DIVIDER + \"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                    + \"     Here are the matching items in your list:\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 145
    }
  },
  {
    "path": "src/main/resources/view/NewGUI.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.NewGui\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" alignment\u003d\"CENTER\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"10.0\" prefWidth\u003d\"600.0\" promptText\u003d\"Please enter your commands here!\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cHBox prefHeight\u003d\"19.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-border-color: black;\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cImageView fx:id\u003d\"systemImage\" fitHeight\u003d\"78.0\" fitWidth\u003d\"86.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003cImage url\u003d\"@../images/DaDuke.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003cScrollPane prefHeight\u003d\"111.0\" prefWidth\u003d\"547.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                  \u003cLabel fx:id\u003d\"systemOutput\" text\u003d\"Hi, how can I help you today\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cStackPane fx:id\u003d\"tableArea\" prefHeight\u003d\"272.0\" prefWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 31
    }
  },
  {
    "path": "src/main/resources/view/TaskNoteBook.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cfx:root fx:id\u003d\"taskNoteBook\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" type\u003d\"TableView\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003ccolumns\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"categoryCol\" prefWidth\u003d\"180.0\" text\u003d\"Category\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"descriptionCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"136.0\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cTableColumn fx:id\u003d\"dateCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"157.0\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cTableColumn fx:id\u003d\"dateCreatedCol\" prefWidth\u003d\"126.0\" text\u003d\"Date Created\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003c/columns\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 13
    }
  },
  {
    "path": "src/main/resources/view/TaskView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003cfx:root fx:id\u003d\"taskView\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" type\u003d\"TableView\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003ccolumns\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"taskTypeCol\" prefWidth\u003d\"98.66675055027008\" text\u003d\"Tasktype\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cTableColumn fx:id\u003d\"statusCol\" prefWidth\u003d\"99.33336639404297\" text\u003d\"Status\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    \u003cTableColumn fx:id\u003d\"descriptionCol\" prefWidth\u003d\"258.66664123535156\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "      \u003cTableColumn fx:id\u003d\"dateDueCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"141.33334350585938\" text\u003d\"DateDue\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "  \u003c/columns\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 13
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_correctlyParseCommand_sucess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        TaskList testlist \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        parser.parse(\"todo just a test\",testlist,true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(\"todo\",parser.command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(\"just a test\",parser.description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void parse_correctlyPrintAddStatement() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        TaskList testlist \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String correctOutput \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"       [D][✗] this is a test input(by:02 February 0800 PM)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     Now you have 1 tasks in the list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"    ____________________________________________________________\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        parser.parse(\"deadline this is a test input /by 2/2/2019 2000\",testlist,false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(correctOutput.toString(), outContent.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 36
    }
  },
  {
    "path": "src/test/java/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Storage testfile;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public void loadData_incorrectDataFormat_errormsg() throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        testfile \u003d new Storage(\"src\\\\test\\\\resources\\\\testfile.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        TaskList testlist \u003d new TaskList(testfile.loadData());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        String expectedOutput \u003d \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know that command :-(\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"    ____________________________________________________________\\r\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"    ____________________________________________________________\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"     ☹ OOPS!!! I\u0027m sorry, but loading task 1 has failed, it will be removed\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                + \"    ____________________________________________________________\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        assertEquals(expectedOutput,outContent.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 31
    }
  },
  {
    "path": "src/test/resources/testfile.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "todox"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 1
    }
  },
  {
    "path": "tutorials/TaskListDeserializer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.JsonDeserializer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.StdDeserializer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.core.JsonParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.databind.node.BooleanNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import javax.swing.tree.TreeNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "public class TaskListDesrerializer extends JsonDeserializer\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    public TaskList deserialize(JsonParser jp , DeserializationContext ctxt) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        JsonNode node \u003d jp.getCodec().readTree(jp);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        JsonNode tasks \u003d node.get(\"tasks\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        Iterator\u003cJsonNode\u003e iter \u003d tasks.elements();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        while (iter.hasNext()){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            String taskType \u003d tasks.get(\"taskType\").asText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            String description \u003d tasks.get(\"description\").asText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            Boolean isDone \u003d tasks.get(\"isDone\").asBoolean();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            ObjectMapper mapper \u003d new ObjectMapper().registerModule(new JavaTimeModule());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            if (!tasks.get(\"dateDue\").isNull()){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "                LocalDateTime dateDue \u003d ;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            switch (taskType){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            case \"Todo\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lzw12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 45
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the ui"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to ui input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the ui pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    //Step 3. Add functionality to handle ui input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the ui avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    private Image ui \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "Add a new method to handle ui input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * Creates two dialog boxes, one echoing ui input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * the dialog container. Clears the ui input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            new DialogBox(userText, new ImageView(ui)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lzw12345"
        },
        "content": " * You should have your own function to generate a response to ui input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "    //Part 3. Add functionality to handle ui input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between ui input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(ui)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 14,
      "-": 229
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "FXML is a XML-based language that allows us to define our ui interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * Creates two dialog boxes, one echoing ui input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lzw12345"
        },
        "content": "     * the dialog container. Clears the ui input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "lzw12345": 3,
      "-": 291
    }
  }
]
