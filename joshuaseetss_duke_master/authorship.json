[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`A-TextUiTesting` | [Text duke.execution.UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 3,
      "-": 36
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "run {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 49,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "### Your Personal Planner!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "## Features of Currents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Todo: `todo`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Allows you to track tasks that needs to be done and adds it to a list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Deadline: `deadline`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Reminds you of your upcoming deadlines and adds it to a list with the deadline date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Event: `event`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Remind you of your upcoming events and adds it to a list with the date and time of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Done: `done`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Allows you to tick off todo/event/deadline tasks that have been completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Delete: `delete`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Allows you to delete finished tasks or wrong tasks that was inputted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Delete: `deleteAll`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Allows you to delete multiple finished tasks or wrong tasks that was inputted at one go."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Find: `find`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Prints out matching words that you have inputted from the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### List: `list`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Prints out the entire list as of then."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Bye: `bye`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Closes the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "## Usage of Currents"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Command | Example | Description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "---------------|---------------|---------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`todo \u003ctask\u003e` | todo eat | Adds a new to do task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`event \u003cdescription\u003e /at \u003cdd/MM/yyyy\u003e \u003chhmm\u003e` | event meeting /at 20/06/2021 1700 | Add a new meeting event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`deadline \u003cdescription\u003e /by \u003cdd/MM/yyyy\u003e \u003chhmm\u003e` | deadline homework /by 30/05/2023 2359 | Add a new homework deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`done \u003ctaskNumber\u003e` | done 1 | Ticks off the first todo/event/deadline task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`delete \u003ctaskNumber\u003e` | delete 2 | Deletes the second task off the list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`deleteAll \u003ctaskNumbers\u003e` | delete 1 3 5 6 | Deletes the first, third, fifth and sixth task off the list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`find \u003ckeyword\u003e` | find homework | Find the tasks with \"homework\" and prints out them out in a list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`list` | list | Prints out everything in your list at that current point of time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "`\u003ccommand\u003e *` | todo eat * | Prioritises this task and enters the task at the top of the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Todo: `todo eat`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![Todo picture](./images/todo.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Event: `event birthday party /at John\u0027s place`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![Event picture](./images/event.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Deadline: `deadline duke /by monday`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![deadline picture](./images/deadline.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Done: `done 1`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![done picture](./images/done.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Delete: `delete 2`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![delete picture](./images/delete.png)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### DeleteAll: `deleteAll 1 2`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![deleteAll picture](./images/deleteAll.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### Find: `find homework`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![find picture](./images/find.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### List: `list`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![list picture](./images/find.png)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "#### command *: `todo sleep *`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![list picture](./images/priority.png)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 89,
      "-": 11
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a duke.DialogBox."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param text of the dialog box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param img of the dialog box, either from the user or duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.dialog.setMinSize(Label.USE_PREF_SIZE, Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the user dialog box."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param text entered by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param img of the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a Dialog Box to show on the duke.MainWindow."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        DialogBox current \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        current.setBackground(Background.EMPTY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String style \u003d \"-fx-background-color: rgba(28, 97, 176, 1);\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                       + \"-fx-text-fill: white\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        current.dialog.setStyle(style);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return current;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns duke.Duke\u0027s dialog box."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param text response from duke.Duke."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param img of duke.Duke."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a Dialog Box to show on the duke.MainWindow."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String style \u003d \"-fx-background-color: rgba(203, 207, 215, 1);\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        db.dialog.setStyle(style);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 85
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents duke.Duke, a personal assistant ChatBot that helps a person to keep track of various things."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Initialises a new duke.Duke object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.ui \u003d new UI();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.storage \u003d new Storage(\"./duke.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            ArrayList\u003cTask\u003e existing \u003d storage.readFileContents();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.taskList \u003d new TaskList(existing);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(e + \" the file does not exist\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Runs the program. It will start from here."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws IOException if there is an issue reading the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static void main(String[] args) throws IOException, DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "       new duke.Duke().run();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Runs the program by prompting user to enter the command. The program will then carry out the program"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * if the command is valid. If not, it will throw a duke.Duke duke.exception."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws IOException if there is an issue reading the .txt file to recover the previous list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void run() throws IOException, DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.ui.welcome();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String command \u003d ui.promptEntry();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            while (ui.isRunning()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                Command current \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                current.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                command \u003d this.ui.promptEntry();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.print(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return ui.getResponse();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            ui.displayError(e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return ui.getResponse();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            if (!ui.isRunning()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Closes the application upon user entry of \"bye\"."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Timer countdown \u003d new Timer();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        TimerTask onExit \u003d new TimerTask() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        };"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        countdown.schedule(onExit, 2000);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 119,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Controller for FXMLLoader."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            stage.setTitle(\"Duke - Your personal Task Manager\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 35
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Controller for duke.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/UserV3.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Dukev2.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs the main window."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Initialisation of GUI."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        UI ui \u003d new UI();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String style \u003d \"-fx-background-color: rgba(40, 42, 47, 1);\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.dialogContainer.setStyle(style);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //duke welcome message upon opening GUI"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                DialogBox.getDukeDialog(ui.welcomeMsg(), dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Set Controller for duke.MainWindow."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private void handleUserInput() throws InterruptedException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 75
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents a class to implement a duke.exception.DukeException to throw errors related to duke.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates a duke.exception.DukeException error object so it can be thrown and caught."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param errorMessage to be printed when an error occurs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 18
    }
  },
  {
    "path": "src/main/java/duke/execution/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.MassDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.TodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.commands.EventCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents a parser that parses a string value to decide which command to create based on the input string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Parses the input string by breaking up the input string into a string array to seperate the action word and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * description of task created."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param line is the input string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a Command object based on the first word of input key."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException is thrown when parser does not understand the first word of input key."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String[] split \u003d line.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String restOfInput \u003d getRestOfInput(split);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return parseForCommand(split[0], restOfInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Parses the input string - action and rest , into a Command object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param action string decides which type of Command object to be created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param rest string is the description of the task which be used in the constructor of a command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a Command object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException is thrown when parse does not understand the first word of input key."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private static Command parseForCommand(String action, String rest) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new ByeCommand(rest.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new ListCommand(rest.trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new DoneCommand(rest.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new TodoCommand(rest.trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new DeadlineCommand(rest.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new EventCommand(rest.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new DeleteCommand(rest.trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new FindCommand(rest.trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        case \"deleteAll\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            return new MassDeleteCommand(rest.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(\"ERROR: \" + rest.trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Removes the first word of the input string which is the action word. The resulting string is the description of"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * the task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param split is the String array of the input string."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the string without the first word."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private static String getRestOfInput(String[] split) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String rest \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        for (int i \u003d 1; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            rest +\u003d split[i];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            rest +\u003d \" \";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return rest;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 104
    }
  },
  {
    "path": "src/main/java/duke/execution/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the storage object where the information will be stored in."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructor of a storage object, initiating the file we are storing the information into."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param filepath the string value of the filepath of the duke.txt file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.filePath \u003d filepath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * This method will print the contents of the Storage object (file)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws FileNotFoundException if the file is not found based on the filepath."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public ArrayList\u003cTask\u003e readFileContents() throws FileNotFoundException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        File currentFile \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        currentFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (currentFile.createNewFile()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(\"file created\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(\"file exists\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Scanner sc \u003d new Scanner(currentFile);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String current \u003d sc.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            char type \u003d current.charAt(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            int isDone \u003d Integer.parseInt(\"\" + current.charAt(4));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String des \u003d current.substring(8).trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                ToDo newT \u003d new ToDo(isDone, des);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                list.add(newT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                int index \u003d des.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                String taskName \u003d des.substring(0, index).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                String date \u003d des.substring(index + 1).trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                Deadline newD \u003d new Deadline(isDone, taskName, date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                list.add(newD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                int index1 \u003d des.indexOf(\u0027|\u0027);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                String taskName1 \u003d des.substring(0, index1).trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                String date1 \u003d des.substring(index1 + 1).trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                Event newE \u003d new Event(isDone, taskName1, date1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                list.add(newE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                System.out.println(\"Error!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Saves tasks into specified file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList Tasks to be saved."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void saveToDataFile(TaskList taskList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d taskList.getList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            assert fileWriter !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            for (Task task: tasks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                String taskData \u003d task.toTextFile();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                bufferedWriter.write(taskData);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                bufferedWriter.newLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 120
    }
  },
  {
    "path": "src/main/java/duke/execution/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents a tasklist that will keep track of the tasks that the user enters."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * It consists of methods that will add, delete and mark complete tasks in the current list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates a tasklist object by creating a new empty arraylist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates a tasklist object with an existing list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param currentList of existing tasks reloaded from the duke.txt file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e currentList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.list \u003d currentList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the size of the current arraylist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the integer value of the number of tasks in the arraylist currently."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        assert this.list !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the current list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the existing ArrayList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        assert this.list !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns a task in the arraylist at the input integer\u0027s position."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param index is the position of the file in the arraylist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the Task at that position."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Task getTaskByIndex(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        assert this.list !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Adds a task to the list attribute of this duke.execution.TaskList object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param current the duke.models.Task object to be added to the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void addTask(Task current) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        assert this.list !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.list.add(current);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Adds a task to the top of the list, since it is of priority."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param priority task to be added."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void addPriorityTask(Task priority) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.list.add(0, priority);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Deletes a task off the list attribute of this duke.execution.TaskList object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param current the duke.models.Task object to be deleted off the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Task deleteTask(int current) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Task deleted \u003d list.get(current);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        list.remove(current);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        assert this.list !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 109
    }
  },
  {
    "path": "src/main/java/duke/execution/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the items that affect the user interface of the program and handles the interaction with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected boolean isRunning;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected String response \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates a duke.execution.UI object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.isRunning \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prints out a welcome statement when users first open the duke.Duke program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        System.out.println(\"Hello I\u0027m\\n\" + logo + \"\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.response \u003d (\"Hello I\u0027m\\n\" + logo + \"\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns a welcome message. This is mainly for the GUI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String welcomeMsg() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return \"Hello I\u0027m duke.Duke!\" + \" \\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the goodbye message. This is mainly for GUI."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a string."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String goodbyeMsg() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prints out a goodbye statement when the users enter bye, before the program ends."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.response \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.isRunning \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prints out the response of duke when a task is added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param task that is being added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param size of the arraylist after adding of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void displayAddingOfTask(Task task, int size) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        System.out.println(\" Noted. I\u0027ve added this task:\\n\" + task + \"\\nNow you have \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.response \u003d \" Noted. I\u0027ve added this task:\\n\" + task + \"\\nNow you have \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + size + \" tasks in the list.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prints out the response of duke when a task is being deleted."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param task that is being deleted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param size of the arraylist after deletion of the task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void displayDeletedTask(Task task, int size) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        System.out.println(\" Noted. I\u0027ve removed this task:\\n\" + task + \"\\nNow you have \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.response \u003d \" Noted. I\u0027ve removed this task:\\n\" + task + \"\\nNow you have \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                + size + \" tasks in the list.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prints out the response of duke when a task is being marked as done."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param task that is done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void displayDone(Task task) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        System.out.println(\" Nice! I\u0027ve marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.response \u003d \" Nice! I\u0027ve marked this task as done:\\n\" + task;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prints out the response of duke when an error is thrown."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param e is the Exception object of the error."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void displayError(Exception e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        setResponse(e.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prints out the response of duke when user prompts the program to list tasks."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList the current arraylist that duke will print."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void listTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (taskList.getList().isEmpty()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(\" No tasks to be found.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.response \u003d \" No tasks to be found.\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(\"Here are the tasks in your list\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.response \u003d \"Here are the tasks in your list\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                System.out.println((i + 1) + \". \" + taskList.getList().get(i) + \"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                this.response +\u003d (i + 1) + \". \" + taskList.getList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Prompts the user to enter into the program."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the string that the user entered."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String promptEntry() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the boolean value."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return true if duke is still running, and false if duke is not running."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.isRunning;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Sets the response attribute for UI with the string input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param response is the string value that we want to assign to the response attribute."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void setResponse(String response) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the string value of the response attribute for the GUI."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the response."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.response;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 198
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a Bye Command object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a ByeCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param bye string value would not matter for this case since we are only interested in the keyword bye."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public ByeCommand(String bye) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(bye);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Executes a bye command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList current tasklist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException thrown if there are any errors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        checkValidity();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 41
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the attributes and behavior of a Command object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected String descriptionOfTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs the Command object with the description of task string value as parameter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param descriptionOfTask to construct the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Command(String descriptionOfTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.descriptionOfTask \u003d descriptionOfTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Executes the command object and carries out its operations as per different type of command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * This is can be treated like an abstract method as it will be overridden based on the type of command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param tasklist arraylist of tasks since a task would be created from this duke.execution of a command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if the user input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList tasklist, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        checkValidity();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Checks for any duke.exception in the duke.execution of the commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException when there is an duke.exception during the duke.execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected void checkValidity() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 49
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a Deadline Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a DeadlineCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the deadline Command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public DeadlineCommand(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the formatted date and time. If it is in the wrong format, it will return the string entered."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param dateAndTime String value of the date and time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the formatted date and time, if it is in the correct format of dd/MM/yyyy hhmm"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static String getFormattedDate(String dateAndTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String result \u003d dateAndTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\").parse(dateAndTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String day \u003d new SimpleDateFormat(\"dd\").format(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String month \u003d new SimpleDateFormat(\"MMMMMMMMMMMMMMM\").format(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String year \u003d new SimpleDateFormat(\"yyyy\").format(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String time \u003d new SimpleDateFormat(\"h:mm a\").format(date).toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String ordinalIndicator;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            int intDay \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            if (intDay \u003e\u003d 11 \u0026\u0026 intDay \u003c\u003d 13) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                ordinalIndicator \u003d \"th\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            } else if (intDay % 10 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                ordinalIndicator \u003d \"st\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            } else if (intDay % 10 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                ordinalIndicator \u003d \"nd\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            } else if (intDay % 10 \u003d\u003d 3) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                ordinalIndicator \u003d \"rd\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                ordinalIndicator \u003d \"th\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            result \u003d intDay + ordinalIndicator + \" of \" + month + \" \" + year + \", \" + time;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Executes a deadline Command object. Here, a deadline object will be created."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList deadline object will be added to the tasklist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException thrown if deadline command is entered without /by"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String wholeTask \u003d this.descriptionOfTask.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int index \u003d wholeTask.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //what the task is"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String description \u003d wholeTask.substring(0, index).trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //when it is due by"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String date \u003d wholeTask.substring(index + 4).trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int intPriority \u003d date.indexOf(\u0027*\u0027);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //if the format is correct"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String formattedDate \u003d getFormattedDate(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //the duke.execution"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Task newDeadline;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (intPriority \u003e\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            //removing the * if is priority"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String cleanDate \u003d formattedDate.substring(0, intPriority)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                    + formattedDate.substring(intPriority + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newDeadline \u003d new Deadline(description, cleanDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newDeadline.markAsPriority();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            taskList.addPriorityTask(newDeadline);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newDeadline \u003d new Deadline(description, formattedDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            taskList.addTask(newDeadline);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.displayAddingOfTask(newDeadline, taskList.getSize());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        storage.saveToDataFile(taskList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Handles the error and checks if it is valid for duke.execution."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if description of deadline is empty or is not in the correct format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected void checkValidity() throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (this.descriptionOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else if (!this.descriptionOfTask.contains(\"/by\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! Deadline input should include \u0027/by\u0027.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 126
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a delete Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Contructs a delete command with the input string, which is supposedly an integer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description an integer string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public DeleteCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Execution of a DeleteCommand which would remove a task off the arraylist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList of current tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if the description is empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.checkValidity(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int deleteNum \u003d Integer.parseInt(this.descriptionOfTask.trim()) - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Task deleted \u003d taskList.deleteTask(deleteNum);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.displayDeletedTask(deleted, taskList.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        storage.saveToDataFile(taskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Handles the error and checks if it is valid for duke.execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if description (the number) is left empty."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected void checkValidity(TaskList tasklist) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            int indexToBeDeleted \u003d Integer.parseInt(this.descriptionOfTask.trim()) - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            if (this.descriptionOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                throw new DukeException(\" ☹ OOPS!!! The description of an delete cannot be empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            } else if (indexToBeDeleted \u003e\u003d tasklist.getSize()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                throw new DukeException(\" ☹ OOPS!!! You do not have that many tasks.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! You only can put a number after the command\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                    + \"\\n delete. If you want to put more numbers, \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                    + \"\\n please use the command DeleteAll. \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 65
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a Done Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a done command with a input string, which is supposedly an integer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description an integer string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public DoneCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Execution of a DoneCommand which would mark a task in the arraylist as done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList of current tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException is thrown if description of command is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        checkValidity();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Task doneTask \u003d taskList.getTaskByIndex(Integer.parseInt(this.descriptionOfTask.trim()) - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        doneTask.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.displayDone(doneTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        storage.saveToDataFile(taskList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Handles the error and checks if it is valid for duke.execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if description (the number) is left empty."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected void checkValidity() throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (this.descriptionOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of a done cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 60
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of an EventCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructor of an EventCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description description of the event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public EventCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Execution of an event Command. In this case, an Event task would be created and added to the current"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * arraylist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList where the new Event task is added (if there are no exceptions) to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException thrown when an input to create event command is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String wholeTask \u003d this.descriptionOfTask.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int index \u003d wholeTask.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //what the task is"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String description \u003d wholeTask.substring(0, index).trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //when it is due by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String date \u003d wholeTask.substring(index + 4).trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int intPriority \u003d date.indexOf(\u0027*\u0027);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //duke.execution"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Task newEvent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (intPriority \u003e\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String cleanDate \u003d date.substring(0, intPriority) + date.substring(intPriority + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newEvent \u003d new Event(description, cleanDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newEvent.markAsPriority();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            taskList.addPriorityTask(newEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newEvent \u003d new Event(description, date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            taskList.addTask(newEvent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.displayAddingOfTask(newEvent, taskList.getSize());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        storage.saveToDataFile(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Handles the error and checks if it is valid for duke.execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException thrown if event description input is empty or does not have /at in it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected void checkValidity() throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (this.descriptionOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else if (!this.descriptionOfTask.contains(\"/at\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! Event input should include \u0027/at\u0027.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 78
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a FindCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a FindCommand object with the input string with matching keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description the matching keyword that you are finding."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public FindCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Executes a FindCommand object. In this case, a new arraylist would be created with all the tasks that have"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * matching descriptions. Thereafter, the list of tasks would be printed by duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList to retrieve the current tasks in the arraylist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException is thrown if the description is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        checkValidity();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getList().size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            if (taskList.getList().get(i).contains(this.descriptionOfTask)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                newList.add(taskList.getList().get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.listTasks(new TaskList(newList));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Handles the error and checks if it is valid for duke.execution."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if the description of the find command is empty."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected void checkValidity() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (this.descriptionOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of a find cannot be empty.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 62
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a ListCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a ListCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param text can be empty."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public ListCommand(String text) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(text);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Execution of a ListCommand object. This duke.execution is just to print out the list of tasks in the current"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * arraylist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList that we want to print."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException is thrown if there are any errors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        checkValidity();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.listTasks(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 41
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/MassDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a Mass Delete Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class MassDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a MassDeleteCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param commands which is a string of indexes of tasks to be deleted, with respect to the current tasklist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public MassDeleteCommand(String commands) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(commands);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Execution of a MassDeleteCommand which will delete tasks off the current tasklist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param taskList of current tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if the description is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList taskList, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        String[] arrayToBeDeleted \u003d this.descriptionOfTask.trim().split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Integer[] arrayInInt \u003d new Integer[arrayToBeDeleted.length];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //changing to integer array for sorting"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayToBeDeleted.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            arrayInInt[i] \u003d Integer.parseInt(arrayToBeDeleted[i]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        // Sorts arr[] in descending order for deletion to avoid troubling with indexes."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Arrays.sort(arrayInInt, Collections.reverseOrder());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        //delete the tasks using the DeleteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        for (int j \u003d 0; j \u003c arrayInInt.length; j++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            Command deleting \u003d new DeleteCommand(arrayInInt[j] + \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            deleting.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Handles the error and checks if it is valid for duke.execution."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException if description (the number) is left empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected void checkValidity() throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (this.descriptionOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of a MassDelete cannot be empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 73
    }
  },
  {
    "path": "src/main/java/duke/execution/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.execution.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.execution.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the characteristics of a TodoCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Constructs a TodoCommand object with the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param todoTask description of toDo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public TodoCommand(String todoTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(todoTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Execution of a TodoCommand object. Here, a new ToDo object would be created and added to a list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param tasklist arraylist of tasks to add the new todo object to when it is created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param ui to set a response from duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param storage to store any changes in the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException is thrown if the description is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void execute(TaskList tasklist, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super.execute(tasklist, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        checkValidity();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int intPriority \u003d this.descriptionOfTask.indexOf(\u0027*\u0027);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Task newTodo;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (intPriority \u003e\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            String newDescription \u003d this.descriptionOfTask.substring(0, intPriority)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                    + this.descriptionOfTask.substring(intPriority + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newTodo \u003d new ToDo(newDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newTodo.markAsPriority();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            tasklist.addPriorityTask(newTodo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            newTodo \u003d new ToDo(this.descriptionOfTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            tasklist.addTask(newTodo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ui.displayAddingOfTask(newTodo, tasklist.getSize());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        storage.saveToDataFile(tasklist);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Handles the error and checks if it is valid for duke.execution."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @throws DukeException is thrown when the description of the toDo is empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void checkValidity() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (this.descriptionOfTask.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            throw new DukeException(\" ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 71
    }
  },
  {
    "path": "src/main/java/duke/models/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the attributes of a duke.models.Deadline object, which is a sub-class of duke.models.Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates a duke.models.Deadline object with a description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * The identity is also intialised as D, for all duke.models.Deadline objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the duke.models.Deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.identity \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Recovery of a duke.models.Deadline object based on the format of a task in the duke.Duke.txt file that we save"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * our information into. Whether the task is done or not depends on the int value of the task when it is saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param intDone if task is done, the int value \u003d\u003d 1. If the task is not done, int value \u003d\u003d 0."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Deadline(int intDone, String description, String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(intDone, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.identity \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (intDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the string value of a duke.models.Deadline object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the identity of the duke.models.Deadline task followed by the status icon and description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns a string value to be saved in the duke.Duke.txt file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a string in the duke.Duke.txt file format for a duke.models.Deadline object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String toTextFile() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.identity + \" | \" + done + \" | \" + this.description + \" | \" + this.date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 68
    }
  },
  {
    "path": "src/main/java/duke/models/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the attributes of an duke.models.Event object, which is a sub-class of duke.models.Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected String dateAndTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates an duke.models.Event object with a description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * The identity is also intialised as E, for all duke.models.Event objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the duke.models.Event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.dateAndTime \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.identity \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Recovery of an duke.models.Event object based on the format of a task in the duke.Duke.txt file that we save our"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * information into. Whether the task is done or not depends on the int value of the task when it is saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param intDone if task is done, the int value \u003d\u003d 1. If the task is not done, int value \u003d\u003d 0."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Event(int intDone, String description, String dateAndTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(intDone, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.identity \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (intDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the string value of an duke.models.Event object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the identity of the duke.models.Event task followed by the status icon and description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateAndTime + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns a string value to be saved in the duke.Duke.txt file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a string in the duke.Duke.txt file format for an duke.models.Event object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String toTextFile() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.identity + \" | \" + done + \" | \" + this.description + \" | \" + this.dateAndTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 68
    }
  },
  {
    "path": "src/main/java/duke/models/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Representing the attributes and behavior of a general duke.models.Task. The abstract methods will be more specific"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * for the child classes of the duke.models.Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected char identity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    protected boolean isPriority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creating a task object. It is the default for a task to be not done upon creation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the task being created."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.isPriority \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Recovery of a task object based on the format of a task in the duke.Duke.txt file that we save our information"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * into. Whether the task is done or not depends on the int value of the task when it is saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param intDone if task is done, the int value \u003d\u003d 1. If the task is not done, int value \u003d\u003d 0."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public Task(int intDone, String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (intDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the status icon of the task. This is dependent on whether the task is done or not."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the icon, which is a string value."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return isDone ? \"[\\u2713]\" : \"[\\u2718]\"; //return tick or X symbols"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.isDone \u003d !isDone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Marks the task as high priority."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void markAsPriority() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.isPriority \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.description +\u003d \"     \" + this.priorityDescription();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the string value of a duke.models.Task object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the status icon and description of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return getStatusIcon() + \" \" + this.description;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns a string to be saved in the duke.Duke.txt file. It is an abstract method that needs to be implemented"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * by the sub classes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return string value to be saved in the duke.Duke.txt file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public abstract String toTextFile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the string value of the description attribute since it has only protected access."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return string value of description of Task object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns a boolean value on whether the description of task contains a particular string value."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * This is for the Find Command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param text particular string value we are checking if present."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return true if Task object\u0027s description contains the keyword. False if not."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public boolean contains(String text) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.description.contains(text);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Appends a priority description to tasks with priority."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the description."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String priorityDescription() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return \"**** Priority ****\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 130
    }
  },
  {
    "path": "src/main/java/duke/models/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package duke.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Represents the attributes of a duke.models.ToDo object, which is a sub-class of duke.models.Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates a duke.models.ToDo object with a description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * The identity is also intialised as T, for all duke.models.ToDo objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the duke.models.ToDo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.identity \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Recovery of a duke.models.ToDo object based on the format of a task in the duke.Duke.txt file that we save"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * our information into. Whether the task is done or not depends on the int value of the task when it is saved."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param intDone if task is done, the int value \u003d\u003d 1. If the task is not done, int value \u003d\u003d 0."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @param description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public ToDo(int intDone, String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        super(intDone, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        this.identity \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        if (intDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns the string value of a duke.models.ToDo object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return the identity of the duke.models.ToDo task followed by the status icon and description."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Returns a string value to be saved in the duke.Duke.txt file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * @return a string in the duke.Duke.txt file format for a duke.models.ToDo object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public String toTextFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return this.identity + \" | \" + done + \" | \" + this.description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 65
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            \u003cInsets bottom\u003d\"6.0\" left\u003d\"6.0\" right\u003d\"6.0\" top\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            \u003cInsets left\u003d\"6.0\" right\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"623.0\" style\u003d\"-fx-background-color: #474747#474747;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"14.0\" layoutY\u003d\"753.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"495.0\" AnchorPane.bottomAnchor\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"527.0\" layoutY\u003d\"753.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"82.0\" style\u003d\"-fx-background-color: #1c61b0#1c61b0;\" text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"1.0\" prefHeight\u003d\"740.0\" prefWidth\u003d\"623.0\" style\u003d\"-fx-background-color: #474747#474747;\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"740.0\" prefWidth\u003d\"605.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    void duke() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 13
    }
  },
  {
    "path": "src/test/java/modelstest/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "package modelstest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import duke.models.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    void testTextFileString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        ToDo toDoTest \u003d new ToDo(\"Testing ToDo class\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        assertEquals(\"T | 0| Testing ToDo class\", toDoTest.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 16
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "│     └─seedu/duke/duke.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 3,
      "-": 167
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `duke.Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Next, we create another Java class, `duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "The `duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        Application.launch(duke.Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Run `duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 7,
      "-": 103
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for duke.Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "In this tutorial, we will be creating a GUI for duke.Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![Mockup for duke.Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Controls are reusable duke.execution.UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Now that we know what controls we need to implement our duke.execution.UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "But how do we get the exact layout we want in the duke.execution.UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![duke.Duke\u0027s layout](assets/DukeSceneGraph.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![duke.Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        stage.setTitle(\"duke.Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "![duke.Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 11,
      "-": 147
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "For duke.Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `duke.Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "In the mockup of the duke.execution.UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Let’s create our custom control `duke.DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public duke.DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `duke.Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and duke.Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            new duke.DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            new duke.DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    return \"duke.Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "## Iteration 3 – Adding custom behavior to duke.DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `duke.DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and duke.Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public static duke.DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    return new duke.DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public static duke.DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    var db \u003d new duke.DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Now, we can go back to the `duke.Main` class and change the event handler to use our new `duke.DialogBox`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            duke.DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            duke.DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "You have successfully implemented a fully functional GUI for duke.Duke!"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   * Add padding between each duke.DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 24,
      "-": 219
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   Why does `duke.Main` need to know that `duke.DialogBox` needs a `Label`?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   The `duke.Main` class attempts to do it all."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Let\u0027s return to duke.Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "**duke.MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "**duke.DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/duke.MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   ![SceneBuilder opening duke.MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `duke.MainWindow`."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   ![Controller for duke.MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "1. Let’s repeat the process for `duke.DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   The main difference here is that duke.DialogBox checks `Use fx:root construct` and _does not define a controller class_."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   ![Settings for duke.DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "As part of the effort to separate the code handling duke.Duke\u0027s logic and duke.execution.UI, let\u0027s _refactor_ the duke.execution.UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "We call these duke.execution.UI classes _controllers_."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Let\u0027s implement the `duke.MainWindow` controller class that we specified in `duke.MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "**duke.MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * Controller for duke.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private duke.Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public void setDuke(duke.Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                duke.DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "                duke.DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our duke.execution.UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Notice how in `duke.MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Let\u0027s create a new `duke.Main` class as the bridge between the existing logic in `duke.Duke` and the duke.execution.UI in `duke.MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "**duke.Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private duke.Duke duke \u003d new duke.Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.Main.class.getResource(\"/view/duke.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            fxmlLoader.\u003cduke.MainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "For our custom `duke.DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "**duke.DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "public class duke.DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    private duke.DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.MainWindow.class.getResource(\"/view/duke.DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static duke.DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        return new duke.DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "    public static duke.DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "        var db \u003d new duke.DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "When we create a new instance of `duke.DialogBox`, we set both the controller and root Node to `duke.DialogBox`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "From this point onwards we can interact with `duke.DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "The last change that we have to make is to point our `duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "In `duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "Application.launch(duke.Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "1. Convert `duke.MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "1. Extend `duke.MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 49,
      "-": 245
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "# Text duke.execution.UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshuaseetss"
        },
        "content": "   java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "joshuaseetss": 5,
      "-": 69
    }
  }
]
